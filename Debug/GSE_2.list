
GSE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007384  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007534  08007534  00008534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007550  08007550  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007550  08007550  00008550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007558  08007558  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007558  08007558  00008558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800755c  0800755c  0000855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007560  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000900c  2**0
                  CONTENTS
 10 .bss          00000514  2000000c  2000000c  0000900c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000520  20000520  0000900c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b79  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c9c  00000000  00000000  00012bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  00014858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ec  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241ed  00000000  00000000  00015404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b76e  00000000  00000000  000395f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9c96  00000000  00000000  00044d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e9f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001aac  00000000  00000000  0011ea38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001204e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800751c 	.word	0x0800751c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	0800751c 	.word	0x0800751c

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	@ 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__gedf2>:
 80007bc:	f04f 3cff 	mov.w	ip, #4294967295
 80007c0:	e006      	b.n	80007d0 <__cmpdf2+0x4>
 80007c2:	bf00      	nop

080007c4 <__ledf2>:
 80007c4:	f04f 0c01 	mov.w	ip, #1
 80007c8:	e002      	b.n	80007d0 <__cmpdf2+0x4>
 80007ca:	bf00      	nop

080007cc <__cmpdf2>:
 80007cc:	f04f 0c01 	mov.w	ip, #1
 80007d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e6:	d01b      	beq.n	8000820 <__cmpdf2+0x54>
 80007e8:	b001      	add	sp, #4
 80007ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ee:	bf0c      	ite	eq
 80007f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f4:	ea91 0f03 	teqne	r1, r3
 80007f8:	bf02      	ittt	eq
 80007fa:	ea90 0f02 	teqeq	r0, r2
 80007fe:	2000      	moveq	r0, #0
 8000800:	4770      	bxeq	lr
 8000802:	f110 0f00 	cmn.w	r0, #0
 8000806:	ea91 0f03 	teq	r1, r3
 800080a:	bf58      	it	pl
 800080c:	4299      	cmppl	r1, r3
 800080e:	bf08      	it	eq
 8000810:	4290      	cmpeq	r0, r2
 8000812:	bf2c      	ite	cs
 8000814:	17d8      	asrcs	r0, r3, #31
 8000816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800081a:	f040 0001 	orr.w	r0, r0, #1
 800081e:	4770      	bx	lr
 8000820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000828:	d102      	bne.n	8000830 <__cmpdf2+0x64>
 800082a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082e:	d107      	bne.n	8000840 <__cmpdf2+0x74>
 8000830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000838:	d1d6      	bne.n	80007e8 <__cmpdf2+0x1c>
 800083a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083e:	d0d3      	beq.n	80007e8 <__cmpdf2+0x1c>
 8000840:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <__aeabi_cdrcmple>:
 8000848:	4684      	mov	ip, r0
 800084a:	4610      	mov	r0, r2
 800084c:	4662      	mov	r2, ip
 800084e:	468c      	mov	ip, r1
 8000850:	4619      	mov	r1, r3
 8000852:	4663      	mov	r3, ip
 8000854:	e000      	b.n	8000858 <__aeabi_cdcmpeq>
 8000856:	bf00      	nop

08000858 <__aeabi_cdcmpeq>:
 8000858:	b501      	push	{r0, lr}
 800085a:	f7ff ffb7 	bl	80007cc <__cmpdf2>
 800085e:	2800      	cmp	r0, #0
 8000860:	bf48      	it	mi
 8000862:	f110 0f00 	cmnmi.w	r0, #0
 8000866:	bd01      	pop	{r0, pc}

08000868 <__aeabi_dcmpeq>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff fff4 	bl	8000858 <__aeabi_cdcmpeq>
 8000870:	bf0c      	ite	eq
 8000872:	2001      	moveq	r0, #1
 8000874:	2000      	movne	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmplt>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffea 	bl	8000858 <__aeabi_cdcmpeq>
 8000884:	bf34      	ite	cc
 8000886:	2001      	movcc	r0, #1
 8000888:	2000      	movcs	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmple>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffe0 	bl	8000858 <__aeabi_cdcmpeq>
 8000898:	bf94      	ite	ls
 800089a:	2001      	movls	r0, #1
 800089c:	2000      	movhi	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmpge>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffce 	bl	8000848 <__aeabi_cdrcmple>
 80008ac:	bf94      	ite	ls
 80008ae:	2001      	movls	r0, #1
 80008b0:	2000      	movhi	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmpgt>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffc4 	bl	8000848 <__aeabi_cdrcmple>
 80008c0:	bf34      	ite	cc
 80008c2:	2001      	movcc	r0, #1
 80008c4:	2000      	movcs	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_d2uiz>:
 80008cc:	004a      	lsls	r2, r1, #1
 80008ce:	d211      	bcs.n	80008f4 <__aeabi_d2uiz+0x28>
 80008d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008d4:	d211      	bcs.n	80008fa <__aeabi_d2uiz+0x2e>
 80008d6:	d50d      	bpl.n	80008f4 <__aeabi_d2uiz+0x28>
 80008d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008e0:	d40e      	bmi.n	8000900 <__aeabi_d2uiz+0x34>
 80008e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ee:	fa23 f002 	lsr.w	r0, r3, r2
 80008f2:	4770      	bx	lr
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	4770      	bx	lr
 80008fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008fe:	d102      	bne.n	8000906 <__aeabi_d2uiz+0x3a>
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	4770      	bx	lr
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	4770      	bx	lr

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b96a 	b.w	8000bf8 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	460c      	mov	r4, r1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d14e      	bne.n	80009e6 <__udivmoddi4+0xaa>
 8000948:	4694      	mov	ip, r2
 800094a:	458c      	cmp	ip, r1
 800094c:	4686      	mov	lr, r0
 800094e:	fab2 f282 	clz	r2, r2
 8000952:	d962      	bls.n	8000a1a <__udivmoddi4+0xde>
 8000954:	b14a      	cbz	r2, 800096a <__udivmoddi4+0x2e>
 8000956:	f1c2 0320 	rsb	r3, r2, #32
 800095a:	4091      	lsls	r1, r2
 800095c:	fa20 f303 	lsr.w	r3, r0, r3
 8000960:	fa0c fc02 	lsl.w	ip, ip, r2
 8000964:	4319      	orrs	r1, r3
 8000966:	fa00 fe02 	lsl.w	lr, r0, r2
 800096a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800096e:	fa1f f68c 	uxth.w	r6, ip
 8000972:	fbb1 f4f7 	udiv	r4, r1, r7
 8000976:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800097a:	fb07 1114 	mls	r1, r7, r4, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb04 f106 	mul.w	r1, r4, r6
 8000986:	4299      	cmp	r1, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x64>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000992:	f080 8112 	bcs.w	8000bba <__udivmoddi4+0x27e>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 810f 	bls.w	8000bba <__udivmoddi4+0x27e>
 800099c:	3c02      	subs	r4, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a59      	subs	r1, r3, r1
 80009a2:	fa1f f38e 	uxth.w	r3, lr
 80009a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009aa:	fb07 1110 	mls	r1, r7, r0, r1
 80009ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b2:	fb00 f606 	mul.w	r6, r0, r6
 80009b6:	429e      	cmp	r6, r3
 80009b8:	d90a      	bls.n	80009d0 <__udivmoddi4+0x94>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c2:	f080 80fc 	bcs.w	8000bbe <__udivmoddi4+0x282>
 80009c6:	429e      	cmp	r6, r3
 80009c8:	f240 80f9 	bls.w	8000bbe <__udivmoddi4+0x282>
 80009cc:	4463      	add	r3, ip
 80009ce:	3802      	subs	r0, #2
 80009d0:	1b9b      	subs	r3, r3, r6
 80009d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009d6:	2100      	movs	r1, #0
 80009d8:	b11d      	cbz	r5, 80009e2 <__udivmoddi4+0xa6>
 80009da:	40d3      	lsrs	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	e9c5 3200 	strd	r3, r2, [r5]
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d905      	bls.n	80009f6 <__udivmoddi4+0xba>
 80009ea:	b10d      	cbz	r5, 80009f0 <__udivmoddi4+0xb4>
 80009ec:	e9c5 0100 	strd	r0, r1, [r5]
 80009f0:	2100      	movs	r1, #0
 80009f2:	4608      	mov	r0, r1
 80009f4:	e7f5      	b.n	80009e2 <__udivmoddi4+0xa6>
 80009f6:	fab3 f183 	clz	r1, r3
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d146      	bne.n	8000a8c <__udivmoddi4+0x150>
 80009fe:	42a3      	cmp	r3, r4
 8000a00:	d302      	bcc.n	8000a08 <__udivmoddi4+0xcc>
 8000a02:	4290      	cmp	r0, r2
 8000a04:	f0c0 80f0 	bcc.w	8000be8 <__udivmoddi4+0x2ac>
 8000a08:	1a86      	subs	r6, r0, r2
 8000a0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a0e:	2001      	movs	r0, #1
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d0e6      	beq.n	80009e2 <__udivmoddi4+0xa6>
 8000a14:	e9c5 6300 	strd	r6, r3, [r5]
 8000a18:	e7e3      	b.n	80009e2 <__udivmoddi4+0xa6>
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	f040 8090 	bne.w	8000b40 <__udivmoddi4+0x204>
 8000a20:	eba1 040c 	sub.w	r4, r1, ip
 8000a24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a28:	fa1f f78c 	uxth.w	r7, ip
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a36:	fb08 4416 	mls	r4, r8, r6, r4
 8000a3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3e:	fb07 f006 	mul.w	r0, r7, r6
 8000a42:	4298      	cmp	r0, r3
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x11c>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a4e:	d202      	bcs.n	8000a56 <__udivmoddi4+0x11a>
 8000a50:	4298      	cmp	r0, r3
 8000a52:	f200 80cd 	bhi.w	8000bf0 <__udivmoddi4+0x2b4>
 8000a56:	4626      	mov	r6, r4
 8000a58:	1a1c      	subs	r4, r3, r0
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a62:	fb08 4410 	mls	r4, r8, r0, r4
 8000a66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a6a:	fb00 f707 	mul.w	r7, r0, r7
 8000a6e:	429f      	cmp	r7, r3
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x148>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a7a:	d202      	bcs.n	8000a82 <__udivmoddi4+0x146>
 8000a7c:	429f      	cmp	r7, r3
 8000a7e:	f200 80b0 	bhi.w	8000be2 <__udivmoddi4+0x2a6>
 8000a82:	4620      	mov	r0, r4
 8000a84:	1bdb      	subs	r3, r3, r7
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	e7a5      	b.n	80009d8 <__udivmoddi4+0x9c>
 8000a8c:	f1c1 0620 	rsb	r6, r1, #32
 8000a90:	408b      	lsls	r3, r1
 8000a92:	fa22 f706 	lsr.w	r7, r2, r6
 8000a96:	431f      	orrs	r7, r3
 8000a98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000aa0:	ea43 030c 	orr.w	r3, r3, ip
 8000aa4:	40f4      	lsrs	r4, r6
 8000aa6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aaa:	0c38      	lsrs	r0, r7, #16
 8000aac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ab0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ab4:	fa1f fc87 	uxth.w	ip, r7
 8000ab8:	fb00 441e 	mls	r4, r0, lr, r4
 8000abc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aca:	d90a      	bls.n	8000ae2 <__udivmoddi4+0x1a6>
 8000acc:	193c      	adds	r4, r7, r4
 8000ace:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ad2:	f080 8084 	bcs.w	8000bde <__udivmoddi4+0x2a2>
 8000ad6:	45a1      	cmp	r9, r4
 8000ad8:	f240 8081 	bls.w	8000bde <__udivmoddi4+0x2a2>
 8000adc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ae0:	443c      	add	r4, r7
 8000ae2:	eba4 0409 	sub.w	r4, r4, r9
 8000ae6:	fa1f f983 	uxth.w	r9, r3
 8000aea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aee:	fb00 4413 	mls	r4, r0, r3, r4
 8000af2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000afa:	45a4      	cmp	ip, r4
 8000afc:	d907      	bls.n	8000b0e <__udivmoddi4+0x1d2>
 8000afe:	193c      	adds	r4, r7, r4
 8000b00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b04:	d267      	bcs.n	8000bd6 <__udivmoddi4+0x29a>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	d965      	bls.n	8000bd6 <__udivmoddi4+0x29a>
 8000b0a:	3b02      	subs	r3, #2
 8000b0c:	443c      	add	r4, r7
 8000b0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b12:	fba0 9302 	umull	r9, r3, r0, r2
 8000b16:	eba4 040c 	sub.w	r4, r4, ip
 8000b1a:	429c      	cmp	r4, r3
 8000b1c:	46ce      	mov	lr, r9
 8000b1e:	469c      	mov	ip, r3
 8000b20:	d351      	bcc.n	8000bc6 <__udivmoddi4+0x28a>
 8000b22:	d04e      	beq.n	8000bc2 <__udivmoddi4+0x286>
 8000b24:	b155      	cbz	r5, 8000b3c <__udivmoddi4+0x200>
 8000b26:	ebb8 030e 	subs.w	r3, r8, lr
 8000b2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b32:	40cb      	lsrs	r3, r1
 8000b34:	431e      	orrs	r6, r3
 8000b36:	40cc      	lsrs	r4, r1
 8000b38:	e9c5 6400 	strd	r6, r4, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e750      	b.n	80009e2 <__udivmoddi4+0xa6>
 8000b40:	f1c2 0320 	rsb	r3, r2, #32
 8000b44:	fa20 f103 	lsr.w	r1, r0, r3
 8000b48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b50:	4094      	lsls	r4, r2
 8000b52:	430c      	orrs	r4, r1
 8000b54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5c:	fa1f f78c 	uxth.w	r7, ip
 8000b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b64:	fb08 3110 	mls	r1, r8, r0, r3
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b6e:	fb00 f107 	mul.w	r1, r0, r7
 8000b72:	4299      	cmp	r1, r3
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0x24c>
 8000b76:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b7e:	d22c      	bcs.n	8000bda <__udivmoddi4+0x29e>
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d92a      	bls.n	8000bda <__udivmoddi4+0x29e>
 8000b84:	3802      	subs	r0, #2
 8000b86:	4463      	add	r3, ip
 8000b88:	1a5b      	subs	r3, r3, r1
 8000b8a:	b2a4      	uxth	r4, r4
 8000b8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b90:	fb08 3311 	mls	r3, r8, r1, r3
 8000b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b98:	fb01 f307 	mul.w	r3, r1, r7
 8000b9c:	42a3      	cmp	r3, r4
 8000b9e:	d908      	bls.n	8000bb2 <__udivmoddi4+0x276>
 8000ba0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ba8:	d213      	bcs.n	8000bd2 <__udivmoddi4+0x296>
 8000baa:	42a3      	cmp	r3, r4
 8000bac:	d911      	bls.n	8000bd2 <__udivmoddi4+0x296>
 8000bae:	3902      	subs	r1, #2
 8000bb0:	4464      	add	r4, ip
 8000bb2:	1ae4      	subs	r4, r4, r3
 8000bb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bb8:	e739      	b.n	8000a2e <__udivmoddi4+0xf2>
 8000bba:	4604      	mov	r4, r0
 8000bbc:	e6f0      	b.n	80009a0 <__udivmoddi4+0x64>
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	e706      	b.n	80009d0 <__udivmoddi4+0x94>
 8000bc2:	45c8      	cmp	r8, r9
 8000bc4:	d2ae      	bcs.n	8000b24 <__udivmoddi4+0x1e8>
 8000bc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7a8      	b.n	8000b24 <__udivmoddi4+0x1e8>
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	e7ed      	b.n	8000bb2 <__udivmoddi4+0x276>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	e799      	b.n	8000b0e <__udivmoddi4+0x1d2>
 8000bda:	4630      	mov	r0, r6
 8000bdc:	e7d4      	b.n	8000b88 <__udivmoddi4+0x24c>
 8000bde:	46d6      	mov	lr, sl
 8000be0:	e77f      	b.n	8000ae2 <__udivmoddi4+0x1a6>
 8000be2:	4463      	add	r3, ip
 8000be4:	3802      	subs	r0, #2
 8000be6:	e74d      	b.n	8000a84 <__udivmoddi4+0x148>
 8000be8:	4606      	mov	r6, r0
 8000bea:	4623      	mov	r3, r4
 8000bec:	4608      	mov	r0, r1
 8000bee:	e70f      	b.n	8000a10 <__udivmoddi4+0xd4>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	e730      	b.n	8000a58 <__udivmoddi4+0x11c>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_idiv0>:
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <I2C_init>:
#include "I2C.h"
#include "stm32f4xx_hal.h"


void I2C_init(I2C *i2c, I2C_TypeDef *interface,GPIO_TypeDef *port,Type device, uint8_t Mst_addr)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	70fb      	strb	r3, [r7, #3]
	i2c->interface = interface;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	601a      	str	r2, [r3, #0]
	i2c->device = device;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	78fa      	ldrb	r2, [r7, #3]
 8000c14:	721a      	strb	r2, [r3, #8]
	i2c->port = port;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	605a      	str	r2, [r3, #4]
	i2c->receive = I2C_receive;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4a07      	ldr	r2, [pc, #28]	@ (8000c3c <I2C_init+0x40>)
 8000c20:	611a      	str	r2, [r3, #16]
	i2c->send = I2C_send;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4a06      	ldr	r2, [pc, #24]	@ (8000c40 <I2C_init+0x44>)
 8000c26:	60da      	str	r2, [r3, #12]
	i2c->address = Mst_addr;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	7e3a      	ldrb	r2, [r7, #24]
 8000c2c:	725a      	strb	r2, [r3, #9]
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	08000dad 	.word	0x08000dad
 8000c40:	08000c45 	.word	0x08000c45

08000c44 <I2C_send>:


//when reading
void I2C_send(I2C *i2c, uint8_t address, uint8_t data)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
 8000c50:	4613      	mov	r3, r2
 8000c52:	70bb      	strb	r3, [r7, #2]
	i2c->interface->CR1 |= I2C_CR1_START;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c62:	601a      	str	r2, [r3, #0]
	while(!(i2c->interface->CR1 & I2C_CR1_START));
 8000c64:	bf00      	nop
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0f8      	beq.n	8000c66 <I2C_send+0x22>

	i2c->interface->DR |= address;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6919      	ldr	r1, [r3, #16]
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	611a      	str	r2, [r3, #16]
	while(i2c->interface->SR1 & I2C_SR1_ADDR);//ACK bit
 8000c84:	bf00      	nop
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f8      	bne.n	8000c86 <I2C_send+0x42>
		(void)i2c->interface->SR1; //clears the SR
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	695b      	ldr	r3, [r3, #20]

	while(!(i2c->interface->SR1 & I2C_SR1_TXE));
 8000c9a:	bf00      	nop
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f8      	beq.n	8000c9c <I2C_send+0x58>
		I2C1->DR |= data;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <I2C_send+0xa0>)
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	78bb      	ldrb	r3, [r7, #2]
 8000cb0:	490c      	ldr	r1, [pc, #48]	@ (8000ce4 <I2C_send+0xa0>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	610b      	str	r3, [r1, #16]
	while(i2c->interface->SR1 & I2C_SR1_BTF); //wait for byte transfer to be completed
 8000cb6:	bf00      	nop
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f8      	bne.n	8000cb8 <I2C_send+0x74>
	i2c->interface->CR1 &= ~I2C_CR1_START; //clears start bit
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000cd4:	601a      	str	r2, [r3, #0]

}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40005400 	.word	0x40005400

08000ce8 <I2C_sendBurst>:

void I2C_sendBurst(I2C *i2c, uint8_t data[], uint8_t size, uint8_t address)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71bb      	strb	r3, [r7, #6]
	i2c->interface->CR1 |= I2C_CR1_START;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000d0c:	601a      	str	r2, [r3, #0]
	while(!(i2c->interface->CR1 & I2C_CR1_START));
 8000d0e:	bf00      	nop
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f8      	beq.n	8000d10 <I2C_sendBurst+0x28>

	i2c->interface->DR |= address;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6919      	ldr	r1, [r3, #16]
 8000d24:	79ba      	ldrb	r2, [r7, #6]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	611a      	str	r2, [r3, #16]
	while(i2c->interface->SR1 & I2C_SR1_ADDR);//ACK bit
 8000d2e:	bf00      	nop
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f8      	bne.n	8000d30 <I2C_sendBurst+0x48>
		(void)i2c->interface->SR1; //clears the SR
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	695b      	ldr	r3, [r3, #20]

for(int i = 0; i<size ; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e01e      	b.n	8000d88 <I2C_sendBurst+0xa0>
{
	while(!(i2c->interface->SR1 & I2C_SR1_TXE));
 8000d4a:	bf00      	nop
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f8      	beq.n	8000d4c <I2C_sendBurst+0x64>
		i2c->interface->DR |= data[i];
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	440b      	add	r3, r1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	611a      	str	r2, [r3, #16]
		while(i2c->interface->SR1 & I2C_SR1_BTF); //wait for byte transfer to be completed
 8000d72:	bf00      	nop
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f8      	bne.n	8000d74 <I2C_sendBurst+0x8c>
for(int i = 0; i<size ; i++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbdc      	blt.n	8000d4a <I2C_sendBurst+0x62>
}
	i2c->interface->CR1 &= ~I2C_CR1_START; //clears start bit
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d9e:	601a      	str	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <I2C_receive>:


void I2C_receive(I2C *i2c, uint8_t address, volatile uint8_t *data)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	460b      	mov	r3, r1
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	72fb      	strb	r3, [r7, #11]
	i2c->interface->CR1 |= I2C_CR1_START;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000dc8:	601a      	str	r2, [r3, #0]
	while(!(i2c->interface->CR1 & I2C_CR1_START));
 8000dca:	bf00      	nop
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f8      	beq.n	8000dcc <I2C_receive+0x20>

	i2c->interface->DR |= address;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6919      	ldr	r1, [r3, #16]
 8000de0:	7afa      	ldrb	r2, [r7, #11]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	611a      	str	r2, [r3, #16]
	while(i2c->interface->SR1 & I2C_SR1_ADDR);//ACK bit
 8000dea:	bf00      	nop
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f8      	bne.n	8000dec <I2C_receive+0x40>
		(void)i2c->interface->SR1; //clears the SR
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	695b      	ldr	r3, [r3, #20]

		while(!(i2c->interface->SR1 & I2C_SR1_RXNE)); //wait for receiver data register to be empty
 8000e00:	bf00      	nop
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f8      	beq.n	8000e02 <I2C_receive+0x56>
		data = i2c->interface->DR;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	607b      	str	r3, [r7, #4]

	while(i2c->interface->SR1 & I2C_SR1_BTF); //wait for byte transfer to be completed
 8000e18:	bf00      	nop
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f8      	bne.n	8000e1a <I2C_receive+0x6e>
		i2c->interface->CR1 &= ~I2C_CR1_START; //clears start bit
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <I2C_MultiReceive>:


 void I2C_MultiReceive(I2C * i2c, volatile uint8_t *data, uint8_t address, uint8_t size)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	460b      	mov	r3, r1
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	4613      	mov	r3, r2
 8000e58:	71bb      	strb	r3, [r7, #6]
	i2c->interface->CR1 |= I2C_CR1_START;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e68:	601a      	str	r2, [r3, #0]
	while(!(i2c->interface->CR1 & I2C_CR1_START));
 8000e6a:	bf00      	nop
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f8      	beq.n	8000e6c <I2C_MultiReceive+0x28>

	i2c->interface->DR |= address;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6919      	ldr	r1, [r3, #16]
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	611a      	str	r2, [r3, #16]
	while(i2c->interface->SR1 & I2C_SR1_ADDR);//ACK bit
 8000e8a:	bf00      	nop
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f8      	bne.n	8000e8c <I2C_MultiReceive+0x48>
		(void)i2c->interface->SR1; //clears the SR
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	695b      	ldr	r3, [r3, #20]

	for(uint8_t i = 0; i<size; i++){
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	75fb      	strb	r3, [r7, #23]
 8000ea4:	e01a      	b.n	8000edc <I2C_MultiReceive+0x98>
		while(!(i2c->interface->SR1 & I2C_SR1_RXNE)); //wait for receiver data register to be empty
 8000ea6:	bf00      	nop
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f8      	beq.n	8000ea8 <I2C_MultiReceive+0x64>
		data[i] = i2c->interface->DR;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6919      	ldr	r1, [r3, #16]
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
	while(i2c->interface->SR1 & I2C_SR1_BTF); //wait for byte transfer to be completed
 8000ec6:	bf00      	nop
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f8      	bne.n	8000ec8 <I2C_MultiReceive+0x84>
	for(uint8_t i = 0; i<size; i++){
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	75fb      	strb	r3, [r7, #23]
 8000edc:	7dfa      	ldrb	r2, [r7, #23]
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3e0      	bcc.n	8000ea6 <I2C_MultiReceive+0x62>
	}
		i2c->interface->CR1 &= ~I2C_CR1_START; //clears start bit
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ef2:	601a      	str	r2, [r3, #0]

}
 8000ef4:	bf00      	nop
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <I2C_TempExtract>:


void I2C_TempExtract(I2C * i2c, volatile uint8_t *data, uint8_t address, uint8_t command)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	460b      	mov	r3, r1
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	4613      	mov	r3, r2
 8000f14:	71bb      	strb	r3, [r7, #6]
	i2c->interface->CR1 |= I2C_CR1_START;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f24:	601a      	str	r2, [r3, #0]
	while(!(i2c->interface->CR1 & I2C_CR1_START));
 8000f26:	bf00      	nop
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f8      	beq.n	8000f28 <I2C_TempExtract+0x28>

	i2c->interface->DR |= address;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6919      	ldr	r1, [r3, #16]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	611a      	str	r2, [r3, #16]
	while(i2c->interface->SR1 & I2C_SR1_ADDR);//ACK bit
 8000f46:	bf00      	nop
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f8      	bne.n	8000f48 <I2C_TempExtract+0x48>
		(void)i2c->interface->SR1; //clears the SR
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	695b      	ldr	r3, [r3, #20]

		while(!(i2c->interface->SR1 & I2C_SR1_TXE));
 8000f5c:	bf00      	nop
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f8      	beq.n	8000f5e <I2C_TempExtract+0x5e>
				i2c->interface->DR |= command;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6919      	ldr	r1, [r3, #16]
 8000f72:	79ba      	ldrb	r2, [r7, #6]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	611a      	str	r2, [r3, #16]
			while(i2c->interface->SR1 & I2C_SR1_BTF); //wait for byte transfer to be completed
 8000f7c:	bf00      	nop
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f8      	bne.n	8000f7e <I2C_TempExtract+0x7e>

	for(uint8_t i = 0; i<2; i++){
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	75fb      	strb	r3, [r7, #23]
 8000f90:	e01a      	b.n	8000fc8 <I2C_TempExtract+0xc8>
		while(!(i2c->interface->SR1 & I2C_SR1_RXNE)); //wait for receiver data register to be empty
 8000f92:	bf00      	nop
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f8      	beq.n	8000f94 <I2C_TempExtract+0x94>
		data[i] = i2c->interface->DR;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6919      	ldr	r1, [r3, #16]
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4413      	add	r3, r2
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
		while(i2c->interface->SR1 & I2C_SR1_BTF); //wait for byte transfer to be completed
 8000fb2:	bf00      	nop
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f8      	bne.n	8000fb4 <I2C_TempExtract+0xb4>
	for(uint8_t i = 0; i<2; i++){
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	75fb      	strb	r3, [r7, #23]
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d9e1      	bls.n	8000f92 <I2C_TempExtract+0x92>
	}
		i2c->interface->CR1 &= ~I2C_CR1_START; //clears start bit
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fdc:	601a      	str	r2, [r3, #0]


}
 8000fde:	bf00      	nop
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4907      	ldr	r1, [pc, #28]	@ (8001024 <__NVIC_EnableIRQ+0x38>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	@ (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	@ (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <configureI2CBus1>:
 */

#include "stm32f4xx_hal.h"
#include "driver.h"
void configureI2CBus1(void)
{ //for BUS, mode is alternate function
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	GPIOF->MODER &= (~(GPIO_MODER_MODE0_Msk | GPIO_MODER_MODE0_Msk)); //everything except for
 8001080:	4b4a      	ldr	r3, [pc, #296]	@ (80011ac <configureI2CBus1+0x130>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a49      	ldr	r2, [pc, #292]	@ (80011ac <configureI2CBus1+0x130>)
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (0x02<<GPIO_MODER_MODE0_Pos | 0x02 << GPIO_MODER_MODE1_Pos);
 800108c:	4b47      	ldr	r3, [pc, #284]	@ (80011ac <configureI2CBus1+0x130>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a46      	ldr	r2, [pc, #280]	@ (80011ac <configureI2CBus1+0x130>)
 8001092:	f043 030a 	orr.w	r3, r3, #10
 8001096:	6013      	str	r3, [r2, #0]
	GPIOF->OTYPER &= (~(GPIO_OTYPER_OT0_Msk | GPIO_OTYPER_OT1_Msk));
 8001098:	4b44      	ldr	r3, [pc, #272]	@ (80011ac <configureI2CBus1+0x130>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a43      	ldr	r2, [pc, #268]	@ (80011ac <configureI2CBus1+0x130>)
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	6053      	str	r3, [r2, #4]
	GPIOF->OTYPER |= (0x01 << GPIO_OTYPER_OT0_Pos | 0x01<<GPIO_OTYPER_OT1_Pos); //open drain
 80010a4:	4b41      	ldr	r3, [pc, #260]	@ (80011ac <configureI2CBus1+0x130>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a40      	ldr	r2, [pc, #256]	@ (80011ac <configureI2CBus1+0x130>)
 80010aa:	f043 0303 	orr.w	r3, r3, #3
 80010ae:	6053      	str	r3, [r2, #4]
	GPIOF->OSPEEDR &= (~(GPIO_OSPEEDR_OSPEED0_Msk | GPIO_OSPEEDR_OSPEED1_Msk));
 80010b0:	4b3e      	ldr	r3, [pc, #248]	@ (80011ac <configureI2CBus1+0x130>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a3d      	ldr	r2, [pc, #244]	@ (80011ac <configureI2CBus1+0x130>)
 80010b6:	f023 030f 	bic.w	r3, r3, #15
 80010ba:	6093      	str	r3, [r2, #8]
	GPIOF->OSPEEDR |= 0x01 << GPIO_OSPEEDR_OSPEED0_Pos | 0x01 << GPIO_OSPEEDR_OSPEED1_Pos; //doesn't need to be quick
 80010bc:	4b3b      	ldr	r3, [pc, #236]	@ (80011ac <configureI2CBus1+0x130>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a3a      	ldr	r2, [pc, #232]	@ (80011ac <configureI2CBus1+0x130>)
 80010c2:	f043 0305 	orr.w	r3, r3, #5
 80010c6:	6093      	str	r3, [r2, #8]

	GPIOF->PUPDR &= (~(GPIO_PUPDR_PUPD0_Msk | GPIO_PUPDR_PUPD1_Msk));
 80010c8:	4b38      	ldr	r3, [pc, #224]	@ (80011ac <configureI2CBus1+0x130>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4a37      	ldr	r2, [pc, #220]	@ (80011ac <configureI2CBus1+0x130>)
 80010ce:	f023 030f 	bic.w	r3, r3, #15
 80010d2:	60d3      	str	r3, [r2, #12]
	GPIOF->PUPDR |= 0x01<<GPIO_PUPDR_PUPD0_Pos | 0x01<<GPIO_PUPDR_PUPD1_Pos; //enabling internal pull ups on I2C lines
 80010d4:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <configureI2CBus1+0x130>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4a34      	ldr	r2, [pc, #208]	@ (80011ac <configureI2CBus1+0x130>)
 80010da:	f043 0305 	orr.w	r3, r3, #5
 80010de:	60d3      	str	r3, [r2, #12]

	//might change timer channel itself, although with available timers this should be fine!
	TIM2->ARR &= ~(TIM_ARR_ARR_Msk);
 80010e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ea:	2200      	movs	r2, #0
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC &= ~(TIM_PSC_PSC_Msk); //resetting both prescaler and counter registers
 80010ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010f8:	0c1b      	lsrs	r3, r3, #16
 80010fa:	041b      	lsls	r3, r3, #16
 80010fc:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->ARR |= (39800-1); //counter
 80010fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001104:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001108:	f443 431b 	orr.w	r3, r3, #39680	@ 0x9b00
 800110c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001110:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM2->PSC |= (114 - 1); //prescaler
 8001112:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001118:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800111c:	f043 0371 	orr.w	r3, r3, #113	@ 0x71
 8001120:	6293      	str	r3, [r2, #40]	@ 0x28

	TIM2->CR1 |= TIM_CR1_CEN; //turns on the timer -> fix .ioc to get rid of HAL init
 8001122:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6013      	str	r3, [r2, #0]

	//turn on alternate function of I2C
	GPIOF->AFR[0] |= 0x03; //alt function 3
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <configureI2CBus1+0x130>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <configureI2CBus1+0x130>)
 8001138:	f043 0303 	orr.w	r3, r3, #3
 800113c:	6213      	str	r3, [r2, #32]
	GPIOF->AFR[0] |= 0x03 <<(4*1); //PF1
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <configureI2CBus1+0x130>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <configureI2CBus1+0x130>)
 8001144:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001148:	6213      	str	r3, [r2, #32]

	I2C1->OAR1 &= (~(I2C_OAR1_ADDMODE_Msk) | 0x3FF);
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <configureI2CBus1+0x134>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <configureI2CBus1+0x134>)
 8001150:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001154:	6093      	str	r3, [r2, #8]
	I2C1->OAR1 |= (0x30 << 1); //I2C1 address (may need to change)
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <configureI2CBus1+0x134>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <configureI2CBus1+0x134>)
 800115c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001160:	6093      	str	r3, [r2, #8]

	I2C1->CR2 &= (~(I2C_CR2_FREQ_Msk));
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <configureI2CBus1+0x134>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <configureI2CBus1+0x134>)
 8001168:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800116c:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= 0x05; //for 8mhz
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <configureI2CBus1+0x134>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a0f      	ldr	r2, [pc, #60]	@ (80011b0 <configureI2CBus1+0x134>)
 8001174:	f043 0305 	orr.w	r3, r3, #5
 8001178:	6053      	str	r3, [r2, #4]

	I2C1->CCR &= (~(0xFFF)); // clears bits 11:0
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <configureI2CBus1+0x134>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <configureI2CBus1+0x134>)
 8001180:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001184:	f023 030f 	bic.w	r3, r3, #15
 8001188:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= 0x28;
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <configureI2CBus1+0x134>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <configureI2CBus1+0x134>)
 8001190:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001194:	61d3      	str	r3, [r2, #28]

	I2C1->CR1 |= I2C_CR1_PE; //starts the protocol
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <configureI2CBus1+0x134>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <configureI2CBus1+0x134>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6013      	str	r3, [r2, #0]

}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021400 	.word	0x40021400
 80011b0:	40005400 	.word	0x40005400

080011b4 <configureSPIBus1>:



void configureSPIBus1(void) //for ADC transducers
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
 80011b8:	4b66      	ldr	r3, [pc, #408]	@ (8001354 <configureSPIBus1+0x1a0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a65      	ldr	r2, [pc, #404]	@ (8001354 <configureSPIBus1+0x1a0>)
 80011be:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80011c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODE5_Pos | 0x02 << GPIO_MODER_MODE6_Pos | 0x02 << GPIO_MODER_MODE7_Pos);
 80011c4:	4b63      	ldr	r3, [pc, #396]	@ (8001354 <configureSPIBus1+0x1a0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a62      	ldr	r2, [pc, #392]	@ (8001354 <configureSPIBus1+0x1a0>)
 80011ca:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80011ce:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5_Msk | GPIO_PUPDR_PUPD6_Msk | GPIO_PUPDR_PUPD7_Msk); //if needing to change internal pull up/downs
 80011d0:	4b60      	ldr	r3, [pc, #384]	@ (8001354 <configureSPIBus1+0x1a0>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	4a5f      	ldr	r2, [pc, #380]	@ (8001354 <configureSPIBus1+0x1a0>)
 80011d6:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80011da:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (0x01 << GPIO_PUPDR_PUPD5_Pos | 0x01 << GPIO_PUPDR_PUPD6_Pos | 0x01 << GPIO_PUPDR_PUPD7_Pos); //internal pull ups on SCK, MOSI and MISO
 80011dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001354 <configureSPIBus1+0x1a0>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4a5c      	ldr	r2, [pc, #368]	@ (8001354 <configureSPIBus1+0x1a0>)
 80011e2:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80011e6:	60d3      	str	r3, [r2, #12]


	//Chip Select for Transducer: PG4
	GPIOG->MODER |= 0x01 << GPIO_MODER_MODE4_Pos;
 80011e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001358 <configureSPIBus1+0x1a4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001358 <configureSPIBus1+0x1a4>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f2:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD4_Msk);
 80011f4:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <configureSPIBus1+0x1a4>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4a57      	ldr	r2, [pc, #348]	@ (8001358 <configureSPIBus1+0x1a4>)
 80011fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80011fe:	60d3      	str	r3, [r2, #12]
	GPIOG->OTYPER |= 0x00 <<GPIO_OTYPER_OT4_Pos;
 8001200:	4b55      	ldr	r3, [pc, #340]	@ (8001358 <configureSPIBus1+0x1a4>)
 8001202:	4a55      	ldr	r2, [pc, #340]	@ (8001358 <configureSPIBus1+0x1a4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	6053      	str	r3, [r2, #4]
	GPIOG->OSPEEDR |= 0x01<<GPIO_OSPEEDR_OSPEED4_Pos;
 8001208:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <configureSPIBus1+0x1a4>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a52      	ldr	r2, [pc, #328]	@ (8001358 <configureSPIBus1+0x1a4>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001212:	6093      	str	r3, [r2, #8]
	GPIOG->ODR |= GPIO_ODR_OD4; //raise up CS of PG
 8001214:	4b50      	ldr	r3, [pc, #320]	@ (8001358 <configureSPIBus1+0x1a4>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	4a4f      	ldr	r2, [pc, #316]	@ (8001358 <configureSPIBus1+0x1a4>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6153      	str	r3, [r2, #20]

	//Chip select for Loadcell: PA2
	GPIOA->MODER |= 0x01 << GPIO_MODER_MODE2_Pos;
 8001220:	4b4c      	ldr	r3, [pc, #304]	@ (8001354 <configureSPIBus1+0x1a0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a4b      	ldr	r2, [pc, #300]	@ (8001354 <configureSPIBus1+0x1a0>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk);
 800122c:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <configureSPIBus1+0x1a0>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a48      	ldr	r2, [pc, #288]	@ (8001354 <configureSPIBus1+0x1a0>)
 8001232:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001236:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER |= 0x00 <<GPIO_OTYPER_OT2_Pos;
 8001238:	4b46      	ldr	r3, [pc, #280]	@ (8001354 <configureSPIBus1+0x1a0>)
 800123a:	4a46      	ldr	r2, [pc, #280]	@ (8001354 <configureSPIBus1+0x1a0>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 0x01<<GPIO_OSPEEDR_OSPEED2_Pos;
 8001240:	4b44      	ldr	r3, [pc, #272]	@ (8001354 <configureSPIBus1+0x1a0>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <configureSPIBus1+0x1a0>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6093      	str	r3, [r2, #8]
	GPIOA->ODR |= GPIO_ODR_OD2; //raise up CS of PG
 800124c:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <configureSPIBus1+0x1a0>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a40      	ldr	r2, [pc, #256]	@ (8001354 <configureSPIBus1+0x1a0>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6153      	str	r3, [r2, #20]

	//timer config for SPI1 -> remember to change RCC to allow for TIM7
	TIM7->ARR &= ~(TIM_ARR_ARR_Msk);
 8001258:	4b40      	ldr	r3, [pc, #256]	@ (800135c <configureSPIBus1+0x1a8>)
 800125a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125c:	4b3f      	ldr	r3, [pc, #252]	@ (800135c <configureSPIBus1+0x1a8>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM7->PSC &= ~(TIM_PSC_PSC_Msk);
 8001262:	4b3e      	ldr	r3, [pc, #248]	@ (800135c <configureSPIBus1+0x1a8>)
 8001264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001266:	4a3d      	ldr	r2, [pc, #244]	@ (800135c <configureSPIBus1+0x1a8>)
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	6293      	str	r3, [r2, #40]	@ 0x28

	//halve the prescaler as load cell and other transducer share same SPI bus - around 20Hz for BOTH transactions
	TIM7->ARR |= (40000-1);
 800126e:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <configureSPIBus1+0x1a8>)
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	4a3a      	ldr	r2, [pc, #232]	@ (800135c <configureSPIBus1+0x1a8>)
 8001274:	f443 431c 	orr.w	r3, r3, #39936	@ 0x9c00
 8001278:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800127c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM7->PSC |= (113-1);
 800127e:	4b37      	ldr	r3, [pc, #220]	@ (800135c <configureSPIBus1+0x1a8>)
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	4a36      	ldr	r2, [pc, #216]	@ (800135c <configureSPIBus1+0x1a8>)
 8001284:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001288:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM7->CR1 |= TIM_CR1_CEN; //enable TIM6
 800128a:	4b34      	ldr	r3, [pc, #208]	@ (800135c <configureSPIBus1+0x1a8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a33      	ldr	r2, [pc, #204]	@ (800135c <configureSPIBus1+0x1a8>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6013      	str	r3, [r2, #0]
	while(TIM7->SR & TIM_SR_UIF == 0);
 8001296:	bf00      	nop
 8001298:	4b30      	ldr	r3, [pc, #192]	@ (800135c <configureSPIBus1+0x1a8>)
 800129a:	691b      	ldr	r3, [r3, #16]
	TIM7->SR &= ~(TIM_SR_UIF); //clear UIF
 800129c:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <configureSPIBus1+0x1a8>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	4a2e      	ldr	r2, [pc, #184]	@ (800135c <configureSPIBus1+0x1a8>)
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	6113      	str	r3, [r2, #16]

	GPIOA->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT5_Msk | GPIO_OTYPER_OT6_Msk | GPIO_OTYPER_OT7_Msk ); //push pull de
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <configureSPIBus1+0x1a0>)
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4929      	ldr	r1, [pc, #164]	@ (8001354 <configureSPIBus1+0x1a0>)
 80012ae:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 80012b2:	4013      	ands	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5_Msk | GPIO_OSPEEDR_OSPEED6_Msk | GPIO_OSPEEDR_OSPEED7_Msk);
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <configureSPIBus1+0x1a0>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	4a26      	ldr	r2, [pc, #152]	@ (8001354 <configureSPIBus1+0x1a0>)
 80012bc:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80012c0:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x02<<GPIO_OSPEEDR_OSPEED5_Pos | 0x02<<GPIO_OSPEEDR_OSPEED6_Pos | 0x02<<GPIO_OSPEEDR_OSPEED7_Pos); //fast mode
 80012c2:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <configureSPIBus1+0x1a0>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <configureSPIBus1+0x1a0>)
 80012c8:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80012cc:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] |= (0x05 << 4*5) | (0x06 << 4*6) | (0x06 << 4*7); //alternate function 5,6,6
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <configureSPIBus1+0x1a0>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a20      	ldr	r2, [pc, #128]	@ (8001354 <configureSPIBus1+0x1a0>)
 80012d4:	f043 43cc 	orr.w	r3, r3, #1711276032	@ 0x66000000
 80012d8:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80012dc:	6213      	str	r3, [r2, #32]

	SPI1->CR1 &= (~(SPI_CR1_BR_Msk));
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <configureSPIBus1+0x1ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <configureSPIBus1+0x1ac>)
 80012e4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80012e8:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (0x02 <<SPI_CR1_BR_Pos); //SPIclk/8
 80012ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <configureSPIBus1+0x1ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <configureSPIBus1+0x1ac>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(SPI_CR1_CPHA_Msk | SPI_CR1_CPOL_Msk)); //
 80012f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <configureSPIBus1+0x1ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <configureSPIBus1+0x1ac>)
 80012fc:	f023 0303 	bic.w	r3, r3, #3
 8001300:	6013      	str	r3, [r2, #0]

	SPI1->CR1 |= SPI_CR1_MSTR; //sets SPI to master mode
 8001302:	4b17      	ldr	r3, [pc, #92]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a16      	ldr	r2, [pc, #88]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; //set both bits;
 800130e:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a13      	ldr	r2, [pc, #76]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001314:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001318:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~(SPI_CR1_LSBFIRST); //MSB
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <configureSPIBus1+0x1ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a10      	ldr	r2, [pc, #64]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001324:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_DFF; //16 bit mode has been selected!
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <configureSPIBus1+0x1ac>)
 800132c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001330:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= (~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE));
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001338:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 800133c:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (0x01 << SPI_CR1_SPE_Pos); //enables the protocol
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <configureSPIBus1+0x1ac>)
 8001344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40020000 	.word	0x40020000
 8001358:	40021800 	.word	0x40021800
 800135c:	40001400 	.word	0x40001400
 8001360:	40013000 	.word	0x40013000

08001364 <configureSPIBus3>:


void configureSPIBus3(void)// 	//for both additional 5V channels and LoRa
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	GPIOG->MODER &= ~(GPIO_MODER_MODE12_Msk | GPIO_MODER_MODE13_Msk | GPIO_MODER_MODE14_Msk);
 8001368:	4b5e      	ldr	r3, [pc, #376]	@ (80014e4 <configureSPIBus3+0x180>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a5d      	ldr	r2, [pc, #372]	@ (80014e4 <configureSPIBus3+0x180>)
 800136e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8001372:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x02 <<GPIO_MODER_MODE12_Pos | 0x02 << GPIO_MODER_MODE13_Pos | 0x02 << GPIO_MODER_MODE14_Pos);
 8001374:	4b5b      	ldr	r3, [pc, #364]	@ (80014e4 <configureSPIBus3+0x180>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a5a      	ldr	r2, [pc, #360]	@ (80014e4 <configureSPIBus3+0x180>)
 800137a:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 800137e:	6013      	str	r3, [r2, #0]
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD12_Msk | GPIO_PUPDR_PUPD13_Msk | GPIO_PUPDR_PUPD14_Msk); //if needing to change internal pull up/downs
 8001380:	4b58      	ldr	r3, [pc, #352]	@ (80014e4 <configureSPIBus3+0x180>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4a57      	ldr	r2, [pc, #348]	@ (80014e4 <configureSPIBus3+0x180>)
 8001386:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800138a:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |= (0x01 << GPIO_PUPDR_PUPD12_Pos | 0x01 << GPIO_PUPDR_PUPD13_Pos | 0x01 << GPIO_PUPDR_PUPD14_Pos); //internal pull ups on SCK, MOSI and MISO
 800138c:	4b55      	ldr	r3, [pc, #340]	@ (80014e4 <configureSPIBus3+0x180>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a54      	ldr	r2, [pc, #336]	@ (80014e4 <configureSPIBus3+0x180>)
 8001392:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8001396:	60d3      	str	r3, [r2, #12]
		//@var PG12 = SDO
		//		PG13 = SCLK
		// 		 PG14 = SDI
	//GPIO for LoRa, RF Switch & Chip select
	GPIOG->MODER &= ~(GPIO_MODER_MODE9_Msk | GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk);
 8001398:	4b52      	ldr	r3, [pc, #328]	@ (80014e4 <configureSPIBus3+0x180>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a51      	ldr	r2, [pc, #324]	@ (80014e4 <configureSPIBus3+0x180>)
 800139e:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 80013a2:	6013      	str	r3, [r2, #0]
	GPIOG->MODER |= (0x01 <<GPIO_MODER_MODE9_Pos | 0x01 <<GPIO_MODER_MODE10_Pos | 0x01 <<GPIO_MODER_MODE11_Pos);
 80013a4:	4b4f      	ldr	r3, [pc, #316]	@ (80014e4 <configureSPIBus3+0x180>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a4e      	ldr	r2, [pc, #312]	@ (80014e4 <configureSPIBus3+0x180>)
 80013aa:	f443 03a8 	orr.w	r3, r3, #5505024	@ 0x540000
 80013ae:	6013      	str	r3, [r2, #0]
	//		PG10 = RF_SWITCH
	//		 PG11 = CS

	//timer config for LoRa
		//Use the same config as Australis board
	TIM6->ARR &= ~(TIM_ARR_ARR_Msk);
 80013b0:	4b4d      	ldr	r3, [pc, #308]	@ (80014e8 <configureSPIBus3+0x184>)
 80013b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b4:	4b4c      	ldr	r3, [pc, #304]	@ (80014e8 <configureSPIBus3+0x184>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->PSC &= ~(TIM_PSC_PSC_Msk);
 80013ba:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <configureSPIBus3+0x184>)
 80013bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013be:	4a4a      	ldr	r2, [pc, #296]	@ (80014e8 <configureSPIBus3+0x184>)
 80013c0:	0c1b      	lsrs	r3, r3, #16
 80013c2:	041b      	lsls	r3, r3, #16
 80013c4:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM6->ARR |= 20000;
 80013c6:	4b48      	ldr	r3, [pc, #288]	@ (80014e8 <configureSPIBus3+0x184>)
 80013c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ca:	4a47      	ldr	r2, [pc, #284]	@ (80014e8 <configureSPIBus3+0x184>)
 80013cc:	f443 439c 	orr.w	r3, r3, #19968	@ 0x4e00
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM6->PSC |= 251; //same as australis to remain consistent!
 80013d6:	4b44      	ldr	r3, [pc, #272]	@ (80014e8 <configureSPIBus3+0x184>)
 80013d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013da:	4a43      	ldr	r2, [pc, #268]	@ (80014e8 <configureSPIBus3+0x184>)
 80013dc:	f043 03fb 	orr.w	r3, r3, #251	@ 0xfb
 80013e0:	6293      	str	r3, [r2, #40]	@ 0x28

	GPIOG->ODR |= (GPIO_ODR_OD9); //hold reset high for SX1272
 80013e2:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <configureSPIBus3+0x180>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	@ (80014e4 <configureSPIBus3+0x180>)
 80013e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ec:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_CEN; //enable TIM6
 80013ee:	4b3e      	ldr	r3, [pc, #248]	@ (80014e8 <configureSPIBus3+0x184>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a3d      	ldr	r2, [pc, #244]	@ (80014e8 <configureSPIBus3+0x184>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]
	while((TIM6->CR1 & TIM_SR_UIF)==0); //wait for hardware registers to be updated
 80013fa:	bf00      	nop
 80013fc:	4b3a      	ldr	r3, [pc, #232]	@ (80014e8 <configureSPIBus3+0x184>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f9      	beq.n	80013fc <configureSPIBus3+0x98>
	GPIOG->ODR &= ~(GPIO_ODR_OD9); //resets reset on GPIO
 8001408:	4b36      	ldr	r3, [pc, #216]	@ (80014e4 <configureSPIBus3+0x180>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	4a35      	ldr	r2, [pc, #212]	@ (80014e4 <configureSPIBus3+0x180>)
 800140e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001412:	6153      	str	r3, [r2, #20]
	TIM6->CR1 &= ~(TIM_SR_UIF); //clears UIF register
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <configureSPIBus3+0x184>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a33      	ldr	r2, [pc, #204]	@ (80014e8 <configureSPIBus3+0x184>)
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]

	//
	GPIOG->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT12_Msk | GPIO_OTYPER_OT13_Msk | GPIO_OTYPER_OT14_Msk); //push pull
 8001420:	4b30      	ldr	r3, [pc, #192]	@ (80014e4 <configureSPIBus3+0x180>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	492f      	ldr	r1, [pc, #188]	@ (80014e4 <configureSPIBus3+0x180>)
 8001426:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 800142a:	4013      	ands	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED12_Msk | GPIO_OSPEEDR_OSPEED13_Msk | GPIO_OSPEEDR_OSPEED14_Msk);
 800142e:	4b2d      	ldr	r3, [pc, #180]	@ (80014e4 <configureSPIBus3+0x180>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4a2c      	ldr	r2, [pc, #176]	@ (80014e4 <configureSPIBus3+0x180>)
 8001434:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8001438:	6093      	str	r3, [r2, #8]
	GPIOG->OSPEEDR |= (0x02<<GPIO_OSPEEDR_OSPEED12_Pos | 0x02<<GPIO_OSPEEDR_OSPEED13_Pos | 0x02<<GPIO_OSPEEDR_OSPEED14_Pos); //fast mode
 800143a:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <configureSPIBus3+0x180>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	4a29      	ldr	r2, [pc, #164]	@ (80014e4 <configureSPIBus3+0x180>)
 8001440:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 8001444:	6093      	str	r3, [r2, #8]
	GPIOG->ODR |= GPIO_ODR_OD11; //raise up CS
 8001446:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <configureSPIBus3+0x180>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a26      	ldr	r2, [pc, #152]	@ (80014e4 <configureSPIBus3+0x180>)
 800144c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001450:	6153      	str	r3, [r2, #20]

	GPIOG->AFR[1] &= ~((GPIO_AFRH_AFRH5) | (GPIO_AFRH_AFRH6) | (GPIO_AFRH_AFRH7));// alternate functions for SPI3
 8001452:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <configureSPIBus3+0x180>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	4a23      	ldr	r2, [pc, #140]	@ (80014e4 <configureSPIBus3+0x180>)
 8001458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800145c:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOG->AFR[1] |= ((0x05 << 4*4) | (0x04 << 5*4) | (0x04 << 6*4));// alternate functions for SPI3
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <configureSPIBus3+0x180>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	4a20      	ldr	r2, [pc, #128]	@ (80014e4 <configureSPIBus3+0x180>)
 8001464:	f043 6388 	orr.w	r3, r3, #71303168	@ 0x4400000
 8001468:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800146c:	6253      	str	r3, [r2, #36]	@ 0x24

	SPI3->CR1 &= (~(SPI_CR1_BR_Msk));
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <configureSPIBus3+0x188>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <configureSPIBus3+0x188>)
 8001474:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001478:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= (0x02 <<SPI_CR1_BR_Pos); //SPIclk/8
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <configureSPIBus3+0x188>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1b      	ldr	r2, [pc, #108]	@ (80014ec <configureSPIBus3+0x188>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6013      	str	r3, [r2, #0]
	SPI3->CR1 &= (~(SPI_CR1_CPHA_Msk | SPI_CR1_CPOL_Msk)); //as per SX specifications
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <configureSPIBus3+0x188>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <configureSPIBus3+0x188>)
 800148c:	f023 0303 	bic.w	r3, r3, #3
 8001490:	6013      	str	r3, [r2, #0]

	SPI3->CR1 |= SPI_CR1_MSTR; //sets SPI to master mode
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <configureSPIBus3+0x188>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a15      	ldr	r2, [pc, #84]	@ (80014ec <configureSPIBus3+0x188>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; //set both bits;
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <configureSPIBus3+0x188>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <configureSPIBus3+0x188>)
 80014a4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80014a8:	6013      	str	r3, [r2, #0]

	SPI3->CR1 &= ~(SPI_CR1_LSBFIRST); //MSB
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <configureSPIBus3+0x188>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <configureSPIBus3+0x188>)
 80014b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014b4:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= SPI_CR1_DFF;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <configureSPIBus3+0x188>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <configureSPIBus3+0x188>)
 80014bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014c0:	6013      	str	r3, [r2, #0]
	SPI3->CR1 &= (~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE));
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <configureSPIBus3+0x188>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <configureSPIBus3+0x188>)
 80014c8:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 80014cc:	6013      	str	r3, [r2, #0]
	SPI3->CR1 |= (0x01 << SPI_CR1_SPE_Pos); //enables the protocol
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <configureSPIBus3+0x188>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <configureSPIBus3+0x188>)
 80014d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014d8:	6013      	str	r3, [r2, #0]
	//rise and repeat for all SPI buses
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40001000 	.word	0x40001000
 80014ec:	40003c00 	.word	0x40003c00

080014f0 <configureSPIBus4>:

void configureSPIBus4(void) //for flash memory storage
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	//PE11: CS4
	//PE12: SCK4
	//PE13: SDO
	//PE14: SDI
	GPIOE->MODER &= ~(GPIO_MODER_MODE12_Msk | GPIO_MODER_MODE13_Msk | GPIO_MODER_MODE14_Msk);
 80014f4:	4b48      	ldr	r3, [pc, #288]	@ (8001618 <configureSPIBus4+0x128>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a47      	ldr	r2, [pc, #284]	@ (8001618 <configureSPIBus4+0x128>)
 80014fa:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80014fe:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (0x02 <<GPIO_MODER_MODE12_Pos | 0x02 << GPIO_MODER_MODE13_Pos | 0x02 << GPIO_MODER_MODE14_Pos);
 8001500:	4b45      	ldr	r3, [pc, #276]	@ (8001618 <configureSPIBus4+0x128>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a44      	ldr	r2, [pc, #272]	@ (8001618 <configureSPIBus4+0x128>)
 8001506:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 800150a:	6013      	str	r3, [r2, #0]
	GPIOE->PUPDR &= ~(GPIO_PUPDR_PUPD12_Msk | GPIO_PUPDR_PUPD13_Msk | GPIO_PUPDR_PUPD14_Msk); //if needing to change internal pull up/downs
 800150c:	4b42      	ldr	r3, [pc, #264]	@ (8001618 <configureSPIBus4+0x128>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4a41      	ldr	r2, [pc, #260]	@ (8001618 <configureSPIBus4+0x128>)
 8001512:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8001516:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= (0x01 << GPIO_PUPDR_PUPD12_Pos | 0x01 << GPIO_PUPDR_PUPD13_Pos | 0x01 << GPIO_PUPDR_PUPD14_Pos); //internal pull ups on SCK, MOSI and MISO
 8001518:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <configureSPIBus4+0x128>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4a3e      	ldr	r2, [pc, #248]	@ (8001618 <configureSPIBus4+0x128>)
 800151e:	f043 53a8 	orr.w	r3, r3, #352321536	@ 0x15000000
 8001522:	60d3      	str	r3, [r2, #12]
//PE 11 initial config
	GPIOE->MODER &= ~(GPIO_MODER_MODE11_Msk);
 8001524:	4b3c      	ldr	r3, [pc, #240]	@ (8001618 <configureSPIBus4+0x128>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a3b      	ldr	r2, [pc, #236]	@ (8001618 <configureSPIBus4+0x128>)
 800152a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800152e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= 0x01 << GPIO_MODER_MODE11_Pos;
 8001530:	4b39      	ldr	r3, [pc, #228]	@ (8001618 <configureSPIBus4+0x128>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a38      	ldr	r2, [pc, #224]	@ (8001618 <configureSPIBus4+0x128>)
 8001536:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800153a:	6013      	str	r3, [r2, #0]
	GPIOE->PUPDR &= ~(GPIO_PUPDR_PUPD11_Msk);
 800153c:	4b36      	ldr	r3, [pc, #216]	@ (8001618 <configureSPIBus4+0x128>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a35      	ldr	r2, [pc, #212]	@ (8001618 <configureSPIBus4+0x128>)
 8001542:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001546:	60d3      	str	r3, [r2, #12]
	GPIOE->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT12_Msk | GPIO_OTYPER_OT13_Msk | GPIO_OTYPER_OT14_Msk);
 8001548:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <configureSPIBus4+0x128>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4932      	ldr	r1, [pc, #200]	@ (8001618 <configureSPIBus4+0x128>)
 800154e:	f648 73ff 	movw	r3, #36863	@ 0x8fff
 8001552:	4013      	ands	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
	GPIOE->OTYPER &= (uint16_t)~(GPIO_OTYPER_OT11_Msk);//CS
 8001556:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <configureSPIBus4+0x128>)
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	492f      	ldr	r1, [pc, #188]	@ (8001618 <configureSPIBus4+0x128>)
 800155c:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8001560:	4013      	ands	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
	GPIOE->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED12_Msk | GPIO_OSPEEDR_OSPEED13_Msk | GPIO_OSPEEDR_OSPEED14_Msk);
 8001564:	4b2c      	ldr	r3, [pc, #176]	@ (8001618 <configureSPIBus4+0x128>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a2b      	ldr	r2, [pc, #172]	@ (8001618 <configureSPIBus4+0x128>)
 800156a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800156e:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= (0x02 << GPIO_OSPEEDR_OSPEED12_Pos | 0x02 << GPIO_OSPEEDR_OSPEED13_Pos | 0x02 << GPIO_OSPEEDR_OSPEED14_Pos);
 8001570:	4b29      	ldr	r3, [pc, #164]	@ (8001618 <configureSPIBus4+0x128>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a28      	ldr	r2, [pc, #160]	@ (8001618 <configureSPIBus4+0x128>)
 8001576:	f043 5328 	orr.w	r3, r3, #704643072	@ 0x2a000000
 800157a:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |= 0x01 << GPIO_OSPEEDR_OSPEED11_Pos;
 800157c:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <configureSPIBus4+0x128>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a25      	ldr	r2, [pc, #148]	@ (8001618 <configureSPIBus4+0x128>)
 8001582:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001586:	6093      	str	r3, [r2, #8]

	//all alt function 5
	GPIOE->AFR[1] &= ~(GPIO_AFRL_AFRL4 | GPIO_AFRL_AFRL5 | GPIO_AFRL_AFRL6);
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <configureSPIBus4+0x128>)
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	4a22      	ldr	r2, [pc, #136]	@ (8001618 <configureSPIBus4+0x128>)
 800158e:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 8001592:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001596:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOE->AFR[1] |= (0x05 << GPIO_AFRL_AFRL4 | 0x05 << GPIO_AFRL_AFRL5 | 0x05 << GPIO_AFRL_AFRL6);
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <configureSPIBus4+0x128>)
 800159a:	4a1f      	ldr	r2, [pc, #124]	@ (8001618 <configureSPIBus4+0x128>)
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	6253      	str	r3, [r2, #36]	@ 0x24

	SPI4->CR1 &= (~(SPI_CR1_BR_Msk));
 80015a0:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <configureSPIBus4+0x12c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <configureSPIBus4+0x12c>)
 80015a6:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80015aa:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= (0x02 <<SPI_CR1_BR_Pos); //SPIclk/8
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <configureSPIBus4+0x12c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1a      	ldr	r2, [pc, #104]	@ (800161c <configureSPIBus4+0x12c>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
	SPI4->CR1 &= (~(SPI_CR1_CPHA_Msk | SPI_CR1_CPOL_Msk)); //as per SX specifications
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <configureSPIBus4+0x12c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a17      	ldr	r2, [pc, #92]	@ (800161c <configureSPIBus4+0x12c>)
 80015be:	f023 0303 	bic.w	r3, r3, #3
 80015c2:	6013      	str	r3, [r2, #0]

	SPI4->CR1 |= SPI_CR1_MSTR; //sets SPI to master mode
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <configureSPIBus4+0x12c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <configureSPIBus4+0x12c>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; //set both bits;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <configureSPIBus4+0x12c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a11      	ldr	r2, [pc, #68]	@ (800161c <configureSPIBus4+0x12c>)
 80015d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80015da:	6013      	str	r3, [r2, #0]

	SPI4->CR1 &= ~(SPI_CR1_LSBFIRST); //MSB
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <configureSPIBus4+0x12c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <configureSPIBus4+0x12c>)
 80015e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015e6:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= SPI_CR1_DFF;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <configureSPIBus4+0x12c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0b      	ldr	r2, [pc, #44]	@ (800161c <configureSPIBus4+0x12c>)
 80015ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015f2:	6013      	str	r3, [r2, #0]
	SPI4->CR1 &= (~(SPI_CR1_RXONLY | SPI_CR1_BIDIMODE));
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <configureSPIBus4+0x12c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a08      	ldr	r2, [pc, #32]	@ (800161c <configureSPIBus4+0x12c>)
 80015fa:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 80015fe:	6013      	str	r3, [r2, #0]
	SPI4->CR1 |= (0x01 << SPI_CR1_SPE_Pos); //enables the protocol
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <configureSPIBus4+0x12c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	@ (800161c <configureSPIBus4+0x12c>)
 8001606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800160a:	6013      	str	r3, [r2, #0]
	//rise and repeat for all SPI buses
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40013400 	.word	0x40013400

08001620 <configureRCC_APB1>:


void configureRCC_APB1(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
	RCC->APB1ENR &= ~(RCC_APB1ENR_I2C1EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN);
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <configureRCC_APB1+0x4c>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	4a10      	ldr	r2, [pc, #64]	@ (800166c <configureRCC_APB1+0x4c>)
 800162a:	f423 1302 	bic.w	r3, r3, #2129920	@ 0x208000
 800162e:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 8001632:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN | RCC_APB1ENR_SPI3EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM6EN | RCC_APB1ENR_TIM7EN;
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <configureRCC_APB1+0x4c>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <configureRCC_APB1+0x4c>)
 800163a:	f443 1302 	orr.w	r3, r3, #2129920	@ 0x208000
 800163e:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1RSTR &= (uint16_t)~(RCC_APB1RSTR_TIM2RST_Msk | RCC_APB1RSTR_I2C1RST_Msk | RCC_APB1RSTR_SPI3RST_Msk | RCC_APB1RSTR_TIM6RST_Msk | RCC_APB1RSTR_TIM7RST_Msk);
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <configureRCC_APB1+0x4c>)
 8001646:	6a1a      	ldr	r2, [r3, #32]
 8001648:	4908      	ldr	r1, [pc, #32]	@ (800166c <configureRCC_APB1+0x4c>)
 800164a:	f647 73ce 	movw	r3, #32718	@ 0x7fce
 800164e:	4013      	ands	r3, r2
 8001650:	620b      	str	r3, [r1, #32]
	RCC->APB1RSTR |= RCC_APB1RSTR_TIM2RST_Msk | RCC_APB1RSTR_I2C1RST_Msk |  RCC_APB1RSTR_SPI2RST_Msk |  RCC_APB1RSTR_SPI3RST_Msk | RCC_APB1RSTR_TIM6RST_Msk | RCC_APB1RSTR_TIM7RST_Msk;
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <configureRCC_APB1+0x4c>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <configureRCC_APB1+0x4c>)
 8001658:	f443 1303 	orr.w	r3, r3, #2146304	@ 0x20c000
 800165c:	f043 0331 	orr.w	r3, r3, #49	@ 0x31
 8001660:	6213      	str	r3, [r2, #32]
	//configure for more timers when necessary
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40023800 	.word	0x40023800

08001670 <configureRCC_APB2>:

void configureRCC_APB2(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	RCC->APB2ENR &=  ~(RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN | RCC_APB2ENR_SYSCFGEN /*important for interrupts and other sys init*/| RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN);
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <configureRCC_APB2+0x4c>)
 8001676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001678:	4a10      	ldr	r2, [pc, #64]	@ (80016bc <configureRCC_APB2+0x4c>)
 800167a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800167e:	f023 0321 	bic.w	r3, r3, #33	@ 0x21
 8001682:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB2ENR |=  RCC_APB2ENR_SPI1EN | RCC_APB2ENR_SPI4EN | RCC_APB2ENR_SYSCFGEN | RCC_APB2ENR_USART6EN | RCC_APB2ENR_TIM1EN;
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <configureRCC_APB2+0x4c>)
 8001686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001688:	4a0c      	ldr	r2, [pc, #48]	@ (80016bc <configureRCC_APB2+0x4c>)
 800168a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800168e:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 8001692:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB2RSTR &= (uint16_t)~(RCC_APB2RSTR_SPI1RST_Msk | RCC_APB2RSTR_SPI4RST_Msk | RCC_APB2RSTR_SYSCFGRST_Msk | RCC_APB2RSTR_USART6RST_Msk | RCC_APB2RSTR_TIM11RST_Msk);
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <configureRCC_APB2+0x4c>)
 8001696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001698:	4908      	ldr	r1, [pc, #32]	@ (80016bc <configureRCC_APB2+0x4c>)
 800169a:	f648 73df 	movw	r3, #36831	@ 0x8fdf
 800169e:	4013      	ands	r3, r2
 80016a0:	624b      	str	r3, [r1, #36]	@ 0x24
	RCC->APB2RSTR |= RCC_APB2RSTR_SPI1RST_Msk | RCC_APB2RSTR_SPI4RST_Msk | RCC_APB2RSTR_SYSCFGRST_Msk | RCC_APB2RSTR_USART6RST_Msk | RCC_APB2RSTR_TIM11RST_Msk;
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <configureRCC_APB2+0x4c>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <configureRCC_APB2+0x4c>)
 80016a8:	f443 238e 	orr.w	r3, r3, #290816	@ 0x47000
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40023800 	.word	0x40023800

080016c0 <configureRCC_AHB1>:
void configureRCC_AHB1(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~(RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN);
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <configureRCC_AHB1+0x34>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c8:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <configureRCC_AHB1+0x34>)
 80016ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80016ce:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1RSTR &= (uint16_t)(~(RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST | RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST));
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <configureRCC_AHB1+0x34>)
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	4907      	ldr	r1, [pc, #28]	@ (80016f4 <configureRCC_AHB1+0x34>)
 80016d6:	f64f 7382 	movw	r3, #65410	@ 0xff82
 80016da:	4013      	ands	r3, r2
 80016dc:	610b      	str	r3, [r1, #16]
	RCC->AHB1RSTR |= RCC_AHB1RSTR_GPIOARST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIOCRST | RCC_AHB1RSTR_GPIODRST | RCC_AHB1RSTR_GPIOERST | RCC_AHB1RSTR_GPIOFRST | RCC_AHB1RSTR_GPIOGRST;
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <configureRCC_AHB1+0x34>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <configureRCC_AHB1+0x34>)
 80016e4:	f043 037d 	orr.w	r3, r3, #125	@ 0x7d
 80016e8:	6113      	str	r3, [r2, #16]

}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40023800 	.word	0x40023800

080016f8 <configure_TIM1>:

void configure_TIM1(void) //operating at 10Hz or 100ms
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	TIM1->ARR &= ~(TIM_ARR_ARR_Msk);
 80016fc:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <configure_TIM1+0x84>)
 80016fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001700:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <configure_TIM1+0x84>)
 8001702:	2200      	movs	r2, #0
 8001704:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC &= ~(TIM_PSC_PSC_Msk);
 8001706:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <configure_TIM1+0x84>)
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <configure_TIM1+0x84>)
 800170c:	0c1b      	lsrs	r3, r3, #16
 800170e:	041b      	lsls	r3, r3, #16
 8001710:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM1->ARR |= (10001-1);
 8001712:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <configure_TIM1+0x84>)
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	4a19      	ldr	r2, [pc, #100]	@ (800177c <configure_TIM1+0x84>)
 8001718:	f443 531c 	orr.w	r3, r3, #9984	@ 0x2700
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->PSC |= (1801-1); //same as australis to remain consistent!
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <configure_TIM1+0x84>)
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	4a15      	ldr	r2, [pc, #84]	@ (800177c <configure_TIM1+0x84>)
 8001728:	f443 63e1 	orr.w	r3, r3, #1800	@ 0x708
 800172c:	6293      	str	r3, [r2, #40]	@ 0x28

	//when the timer overflows, an interrupt will trigger!
	TIM1->DIER &= !(TIM_DIER_UIE_Msk);
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <configure_TIM1+0x84>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <configure_TIM1+0x84>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
	TIM1->DIER |= (TIM_DIER_UIE); //enable update event interrupt
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <configure_TIM1+0x84>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <configure_TIM1+0x84>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	60d3      	str	r3, [r2, #12]

	TIM1->CR1 |= TIM_CR1_CEN; //enable TIM6
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <configure_TIM1+0x84>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0c      	ldr	r2, [pc, #48]	@ (800177c <configure_TIM1+0x84>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]
	while((TIM6->SR & TIM_SR_UIF)==0); //wait for hardware registers to be updated
 8001750:	bf00      	nop
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <configure_TIM1+0x88>)
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f9      	beq.n	8001752 <configure_TIM1+0x5a>
	TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <configure_TIM1+0x84>)
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	4a06      	ldr	r2, [pc, #24]	@ (800177c <configure_TIM1+0x84>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6113      	str	r3, [r2, #16]

	NVIC_SetPriority(TIM1_UP_TIM10_IRQn,1);
 800176a:	2101      	movs	r1, #1
 800176c:	2019      	movs	r0, #25
 800176e:	f7ff fc5b 	bl	8001028 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001772:	2019      	movs	r0, #25
 8001774:	f7ff fc3a 	bl	8000fec <__NVIC_EnableIRQ>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40010000 	.word	0x40010000
 8001780:	40001000 	.word	0x40001000

08001784 <__NVIC_EnableIRQ>:
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4907      	ldr	r1, [pc, #28]	@ (80017bc <__NVIC_EnableIRQ+0x38>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <GPIO_init>:
#include "gpio.h"
#include "stm32f4xx_hal.h"


void GPIO_init(GPIO *gpio, GPIO_TypeDef *port, uint8_t MODER, uint8_t OTYPER, uint8_t OSPEEDR, uint8_t PUPDR, uint8_t POS)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	460b      	mov	r3, r1
 80017d0:	71fb      	strb	r3, [r7, #7]
 80017d2:	4613      	mov	r3, r2
 80017d4:	71bb      	strb	r3, [r7, #6]
	gpio->port = port;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	609a      	str	r2, [r3, #8]
	gpio->MODER = MODER;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	701a      	strb	r2, [r3, #0]
	gpio->OTYPER = OTYPER;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	79ba      	ldrb	r2, [r7, #6]
 80017e6:	705a      	strb	r2, [r3, #1]
	gpio->OSPEEDR = OSPEEDR;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	7e3a      	ldrb	r2, [r7, #24]
 80017ec:	709a      	strb	r2, [r3, #2]
	gpio->PUPDR = PUPDR;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	7f3a      	ldrb	r2, [r7, #28]
 80017f2:	70da      	strb	r2, [r3, #3]
	gpio->POS = POS;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017fa:	711a      	strb	r2, [r3, #4]

	gpio->port->MODER &= ~(MODER<<(2*POS)); //2* bc of 32 bit register
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	79f9      	ldrb	r1, [r7, #7]
 8001804:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	4619      	mov	r1, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	400a      	ands	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
	gpio->port->MODER |= (MODER<<(2*POS));
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	79f9      	ldrb	r1, [r7, #7]
 8001822:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4619      	mov	r1, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
	gpio->port->OTYPER &= ~(OTYPER<<POS);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	79b9      	ldrb	r1, [r7, #6]
 800183e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	4619      	mov	r1, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	400a      	ands	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
	gpio->port->OTYPER |= (OTYPER<<POS);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	79b9      	ldrb	r1, [r7, #6]
 800185a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	4619      	mov	r1, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
	gpio->port->OSPEEDR &= ~(OSPEEDR<<(2*POS));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	7e39      	ldrb	r1, [r7, #24]
 8001874:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	4619      	mov	r1, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	400a      	ands	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
	gpio->port->OSPEEDR |= (OSPEEDR<<(2*POS));
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	7e39      	ldrb	r1, [r7, #24]
 8001892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	4619      	mov	r1, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
	gpio->port->PUPDR &= ~(PUPDR<<(2*POS)); //clears the bit that we want to edit
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	7f39      	ldrb	r1, [r7, #28]
 80018ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	400a      	ands	r2, r1
 80018c2:	60da      	str	r2, [r3, #12]
	gpio->port->PUPDR |= (PUPDR<<(2*POS));
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	7f39      	ldrb	r1, [r7, #28]
 80018cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	4619      	mov	r1, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <GPIO_init_interrupt>:

void GPIO_init_interrupt(GPIO *gpio, GPIO_TypeDef *port, uint8_t MODER, uint8_t OTYPER, uint8_t OSPEEDR, uint8_t PUPDR, uint8_t POS)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	460b      	mov	r3, r1
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	4613      	mov	r3, r2
 8001900:	71bb      	strb	r3, [r7, #6]
	gpio->port = port;
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]
	gpio->MODER = MODER;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	701a      	strb	r2, [r3, #0]
	gpio->OTYPER = OTYPER;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	79ba      	ldrb	r2, [r7, #6]
 8001912:	705a      	strb	r2, [r3, #1]
	gpio->OSPEEDR = OSPEEDR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	7e3a      	ldrb	r2, [r7, #24]
 8001918:	709a      	strb	r2, [r3, #2]
	gpio->PUPDR = PUPDR;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	7f3a      	ldrb	r2, [r7, #28]
 800191e:	70da      	strb	r2, [r3, #3]
	gpio->POS = POS;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001926:	711a      	strb	r2, [r3, #4]


	gpio->port->MODER &= ~(MODER<<(2*POS)); //2* bc of 32 bit register
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	79f9      	ldrb	r1, [r7, #7]
 8001930:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	4619      	mov	r1, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	400a      	ands	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
	gpio->port->MODER |= (MODER<<(2*POS));
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	79f9      	ldrb	r1, [r7, #7]
 800194e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	4619      	mov	r1, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
	gpio->port->OTYPER &= ~(OTYPER<<POS);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	79b9      	ldrb	r1, [r7, #6]
 800196a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	4619      	mov	r1, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	400a      	ands	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
	gpio->port->OTYPER |= (OTYPER<<POS);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	79b9      	ldrb	r1, [r7, #6]
 8001986:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	4619      	mov	r1, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
	gpio->port->OSPEEDR &= ~(OSPEEDR<<(2*POS));
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	7e39      	ldrb	r1, [r7, #24]
 80019a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	400a      	ands	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]
	gpio->port->OSPEEDR |= (OSPEEDR<<(2*POS));
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	7e39      	ldrb	r1, [r7, #24]
 80019be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	4619      	mov	r1, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
	gpio->port->PUPDR &= ~(PUPDR<<(2*POS));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	7f39      	ldrb	r1, [r7, #28]
 80019da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	400a      	ands	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]
	gpio->port->PUPDR |= (PUPDR<<(2*POS));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	7f39      	ldrb	r1, [r7, #28]
 80019f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	60da      	str	r2, [r3, #12]

	//so if I write 0x00:0x0F->PA[x]->PA[
	switch(POS){
 8001a0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	f202 8499 	bhi.w	8004348 <GPIO_init_interrupt+0x2a5c>
 8001a16:	a201      	add	r2, pc, #4	@ (adr r2, 8001a1c <GPIO_init_interrupt+0x130>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a5d 	.word	0x08001a5d
 8001a20:	08001cf1 	.word	0x08001cf1
 8001a24:	08001f85 	.word	0x08001f85
 8001a28:	08002219 	.word	0x08002219
 8001a2c:	080024ad 	.word	0x080024ad
 8001a30:	08002741 	.word	0x08002741
 8001a34:	080029d5 	.word	0x080029d5
 8001a38:	08002c69 	.word	0x08002c69
 8001a3c:	08002efd 	.word	0x08002efd
 8001a40:	08003191 	.word	0x08003191
 8001a44:	08003425 	.word	0x08003425
 8001a48:	080036b9 	.word	0x080036b9
 8001a4c:	0800394d 	.word	0x0800394d
 8001a50:	08003bdd 	.word	0x08003bdd
 8001a54:	08003e61 	.word	0x08003e61
 8001a58:	080040e5 	.word	0x080040e5
		case 0:
		//this is for PA/B/C...0:3
			if(&port == (GPIO_TypeDef*)GPIOA)
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	4a9b      	ldr	r2, [pc, #620]	@ (8001cd0 <GPIO_init_interrupt+0x3e4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d124      	bne.n	8001ab0 <GPIO_init_interrupt+0x1c4>
			{
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_PA;
 8001a66:	4b9b      	ldr	r3, [pc, #620]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001a68:	4a9a      	ldr	r2, [pc, #616]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8001a6e:	4b99      	ldr	r3, [pc, #612]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001a70:	4a98      	ldr	r2, [pc, #608]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR0_Msk;
 8001a76:	4b98      	ldr	r3, [pc, #608]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4a97      	ldr	r2, [pc, #604]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6093      	str	r3, [r2, #8]
				EXTI->RTSR |= EXTI_RTSR_TR0;
 8001a82:	4b95      	ldr	r3, [pc, #596]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4a94      	ldr	r2, [pc, #592]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6093      	str	r3, [r2, #8]
				EXTI->IMR &= ~EXTI_IMR_IM0;
 8001a8e:	4b92      	ldr	r3, [pc, #584]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a91      	ldr	r2, [pc, #580]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6013      	str	r3, [r2, #0]
				EXTI->IMR |= EXTI_IMR_IM0;
 8001a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a8e      	ldr	r2, [pc, #568]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
			NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupt channel
 8001aa6:	2006      	movs	r0, #6
 8001aa8:	f7ff fe6c 	bl	8001784 <__NVIC_EnableIRQ>
							EXTI->RTSR |= EXTI_RTSR_TR0;
							EXTI->IMR &= ~EXTI_IMR_IM0;
							EXTI->IMR |= EXTI_IMR_IM0;
							NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupt channel
			}
		break;
 8001aac:	f002 bc4c 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOB)
 8001ab0:	f107 0308 	add.w	r3, r7, #8
 8001ab4:	4a89      	ldr	r2, [pc, #548]	@ (8001cdc <GPIO_init_interrupt+0x3f0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d128      	bne.n	8001b0c <GPIO_init_interrupt+0x220>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_PB;
 8001aba:	4b86      	ldr	r3, [pc, #536]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	4a85      	ldr	r2, [pc, #532]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PB;
 8001ac6:	4b83      	ldr	r3, [pc, #524]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4a82      	ldr	r2, [pc, #520]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR0_Msk;
 8001ad2:	4b81      	ldr	r3, [pc, #516]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4a80      	ldr	r2, [pc, #512]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR0;
 8001ade:	4b7e      	ldr	r3, [pc, #504]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM0;
 8001aea:	4b7b      	ldr	r3, [pc, #492]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7a      	ldr	r2, [pc, #488]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM0;
 8001af6:	4b78      	ldr	r3, [pc, #480]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a77      	ldr	r2, [pc, #476]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupt channel
 8001b02:	2006      	movs	r0, #6
 8001b04:	f7ff fe3e 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001b08:	f002 bc1e 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOC)
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4a73      	ldr	r2, [pc, #460]	@ (8001ce0 <GPIO_init_interrupt+0x3f4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d128      	bne.n	8001b68 <GPIO_init_interrupt+0x27c>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_PC;
 8001b16:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PC;
 8001b22:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4a6b      	ldr	r2, [pc, #428]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR0_Msk;
 8001b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4a69      	ldr	r2, [pc, #420]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR0;
 8001b3a:	4b67      	ldr	r3, [pc, #412]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	4a66      	ldr	r2, [pc, #408]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM0;
 8001b46:	4b64      	ldr	r3, [pc, #400]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a63      	ldr	r2, [pc, #396]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM0;
 8001b52:	4b61      	ldr	r3, [pc, #388]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a60      	ldr	r2, [pc, #384]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupt channel
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f7ff fe10 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001b64:	f002 bbf0 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOD)
 8001b68:	f107 0308 	add.w	r3, r7, #8
 8001b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce4 <GPIO_init_interrupt+0x3f8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d128      	bne.n	8001bc4 <GPIO_init_interrupt+0x2d8>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_PD;
 8001b72:	4b58      	ldr	r3, [pc, #352]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4a57      	ldr	r2, [pc, #348]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001b78:	f023 0303 	bic.w	r3, r3, #3
 8001b7c:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PD;
 8001b7e:	4b55      	ldr	r3, [pc, #340]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4a54      	ldr	r2, [pc, #336]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001b84:	f043 0303 	orr.w	r3, r3, #3
 8001b88:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR0_Msk;
 8001b8a:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4a52      	ldr	r2, [pc, #328]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR0;
 8001b96:	4b50      	ldr	r3, [pc, #320]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM0;
 8001ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM0;
 8001bae:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a49      	ldr	r2, [pc, #292]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupt channel
 8001bba:	2006      	movs	r0, #6
 8001bbc:	f7ff fde2 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001bc0:	f002 bbc2 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOE)
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	4a47      	ldr	r2, [pc, #284]	@ (8001ce8 <GPIO_init_interrupt+0x3fc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d128      	bne.n	8001c20 <GPIO_init_interrupt+0x334>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_PE;
 8001bce:	4b41      	ldr	r3, [pc, #260]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a40      	ldr	r2, [pc, #256]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PE;
 8001bda:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4a3d      	ldr	r2, [pc, #244]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR0_Msk;
 8001be6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR0;
 8001bf2:	4b39      	ldr	r3, [pc, #228]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	4a38      	ldr	r2, [pc, #224]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM0;
 8001bfe:	4b36      	ldr	r3, [pc, #216]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a35      	ldr	r2, [pc, #212]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM0;
 8001c0a:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a32      	ldr	r2, [pc, #200]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupt channel
 8001c16:	2006      	movs	r0, #6
 8001c18:	f7ff fdb4 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001c1c:	f002 bb94 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOF)
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4a31      	ldr	r2, [pc, #196]	@ (8001cec <GPIO_init_interrupt+0x400>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d128      	bne.n	8001c7c <GPIO_init_interrupt+0x390>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_PF;
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	4a29      	ldr	r2, [pc, #164]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001c30:	f023 0305 	bic.w	r3, r3, #5
 8001c34:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PF;
 8001c36:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	4a26      	ldr	r2, [pc, #152]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001c3c:	f043 0305 	orr.w	r3, r3, #5
 8001c40:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR0_Msk;
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4a24      	ldr	r2, [pc, #144]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR0;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4a21      	ldr	r2, [pc, #132]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM0;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM0;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupt channel
 8001c72:	2006      	movs	r0, #6
 8001c74:	f7ff fd86 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001c78:	f002 bb66 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_PG;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001c82:	f023 0306 	bic.w	r3, r3, #6
 8001c86:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PG;
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <GPIO_init_interrupt+0x3e8>)
 8001c8e:	f043 0306 	orr.w	r3, r3, #6
 8001c92:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR0_Msk;
 8001c94:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR0;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM0;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a09      	ldr	r2, [pc, #36]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM0;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <GPIO_init_interrupt+0x3ec>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupt channel
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff fd5d 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001cca:	f002 bb3d 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 8001cce:	bf00      	nop
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40013c00 	.word	0x40013c00
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40021400 	.word	0x40021400
		case 1:
		//this is for PA/B/C...0:3
			if(&port == (GPIO_TypeDef*)GPIOA)
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	4a9b      	ldr	r2, [pc, #620]	@ (8001f64 <GPIO_init_interrupt+0x678>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d124      	bne.n	8001d44 <GPIO_init_interrupt+0x458>
			{
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1_PA;
 8001cfa:	4b9b      	ldr	r3, [pc, #620]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001cfc:	4a9a      	ldr	r2, [pc, #616]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PA;
 8001d02:	4b99      	ldr	r3, [pc, #612]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001d04:	4a98      	ldr	r2, [pc, #608]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR1_Msk;
 8001d0a:	4b98      	ldr	r3, [pc, #608]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4a97      	ldr	r2, [pc, #604]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d10:	f023 0302 	bic.w	r3, r3, #2
 8001d14:	6093      	str	r3, [r2, #8]
				EXTI->RTSR |= EXTI_RTSR_TR1;
 8001d16:	4b95      	ldr	r3, [pc, #596]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4a94      	ldr	r2, [pc, #592]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6093      	str	r3, [r2, #8]
				EXTI->IMR &= ~EXTI_IMR_IM1;
 8001d22:	4b92      	ldr	r3, [pc, #584]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a91      	ldr	r2, [pc, #580]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d28:	f023 0302 	bic.w	r3, r3, #2
 8001d2c:	6013      	str	r3, [r2, #0]
				EXTI->IMR |= EXTI_IMR_IM1;
 8001d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a8e      	ldr	r2, [pc, #568]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupt channel
 8001d3a:	2007      	movs	r0, #7
 8001d3c:	f7ff fd22 	bl	8001784 <__NVIC_EnableIRQ>
							EXTI->IMR &= ~EXTI_IMR_IM1;
							EXTI->IMR |= EXTI_IMR_IM1;
							NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupt channel

			}
		break;
 8001d40:	f002 bb02 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOB)
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4a89      	ldr	r2, [pc, #548]	@ (8001f70 <GPIO_init_interrupt+0x684>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d128      	bne.n	8001da0 <GPIO_init_interrupt+0x4b4>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1_PB;
 8001d4e:	4b86      	ldr	r3, [pc, #536]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4a85      	ldr	r2, [pc, #532]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001d54:	f023 0310 	bic.w	r3, r3, #16
 8001d58:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PB;
 8001d5a:	4b83      	ldr	r3, [pc, #524]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4a82      	ldr	r2, [pc, #520]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001d60:	f043 0310 	orr.w	r3, r3, #16
 8001d64:	6093      	str	r3, [r2, #8]
				EXTI->FTSR &= ~EXTI_RTSR_TR1_Msk;
 8001d66:	4b81      	ldr	r3, [pc, #516]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	4a80      	ldr	r2, [pc, #512]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d6c:	f023 0302 	bic.w	r3, r3, #2
 8001d70:	60d3      	str	r3, [r2, #12]
							EXTI->FTSR |= EXTI_RTSR_TR1;
 8001d72:	4b7e      	ldr	r3, [pc, #504]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4a7d      	ldr	r2, [pc, #500]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	60d3      	str	r3, [r2, #12]
							EXTI->IMR &= ~EXTI_IMR_IM1;
 8001d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7a      	ldr	r2, [pc, #488]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d84:	f023 0302 	bic.w	r3, r3, #2
 8001d88:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM1;
 8001d8a:	4b78      	ldr	r3, [pc, #480]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a77      	ldr	r2, [pc, #476]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupt channel
 8001d96:	2007      	movs	r0, #7
 8001d98:	f7ff fcf4 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001d9c:	f002 bad4 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOC)
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	4a73      	ldr	r2, [pc, #460]	@ (8001f74 <GPIO_init_interrupt+0x688>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d128      	bne.n	8001dfc <GPIO_init_interrupt+0x510>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1_PC;
 8001daa:	4b6f      	ldr	r3, [pc, #444]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4a6e      	ldr	r2, [pc, #440]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001db0:	f023 0320 	bic.w	r3, r3, #32
 8001db4:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PC;
 8001db6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	4a6b      	ldr	r2, [pc, #428]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR1_Msk;
 8001dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4a69      	ldr	r2, [pc, #420]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001dc8:	f023 0302 	bic.w	r3, r3, #2
 8001dcc:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR1;
 8001dce:	4b67      	ldr	r3, [pc, #412]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4a66      	ldr	r2, [pc, #408]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM1;
 8001dda:	4b64      	ldr	r3, [pc, #400]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a63      	ldr	r2, [pc, #396]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001de0:	f023 0302 	bic.w	r3, r3, #2
 8001de4:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM1;
 8001de6:	4b61      	ldr	r3, [pc, #388]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a60      	ldr	r2, [pc, #384]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupt channel
 8001df2:	2007      	movs	r0, #7
 8001df4:	f7ff fcc6 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001df8:	f002 baa6 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOD)
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	4a5d      	ldr	r2, [pc, #372]	@ (8001f78 <GPIO_init_interrupt+0x68c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d128      	bne.n	8001e58 <GPIO_init_interrupt+0x56c>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1_PD;
 8001e06:	4b58      	ldr	r3, [pc, #352]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4a57      	ldr	r2, [pc, #348]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001e0c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001e10:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PD;
 8001e12:	4b55      	ldr	r3, [pc, #340]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4a54      	ldr	r2, [pc, #336]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001e18:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001e1c:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR1_Msk;
 8001e1e:	4b53      	ldr	r3, [pc, #332]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4a52      	ldr	r2, [pc, #328]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e24:	f023 0302 	bic.w	r3, r3, #2
 8001e28:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR1;
 8001e2a:	4b50      	ldr	r3, [pc, #320]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4a4f      	ldr	r2, [pc, #316]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM1;
 8001e36:	4b4d      	ldr	r3, [pc, #308]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e3c:	f023 0302 	bic.w	r3, r3, #2
 8001e40:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM1;
 8001e42:	4b4a      	ldr	r3, [pc, #296]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a49      	ldr	r2, [pc, #292]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupt channel
 8001e4e:	2007      	movs	r0, #7
 8001e50:	f7ff fc98 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001e54:	f002 ba78 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOE)
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	4a47      	ldr	r2, [pc, #284]	@ (8001f7c <GPIO_init_interrupt+0x690>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d128      	bne.n	8001eb4 <GPIO_init_interrupt+0x5c8>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1_PE;
 8001e62:	4b41      	ldr	r3, [pc, #260]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4a40      	ldr	r2, [pc, #256]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e6c:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PE;
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a3d      	ldr	r2, [pc, #244]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e78:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR1_Msk;
 8001e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e80:	f023 0302 	bic.w	r3, r3, #2
 8001e84:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR1;
 8001e86:	4b39      	ldr	r3, [pc, #228]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4a38      	ldr	r2, [pc, #224]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM1;
 8001e92:	4b36      	ldr	r3, [pc, #216]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a35      	ldr	r2, [pc, #212]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001e98:	f023 0302 	bic.w	r3, r3, #2
 8001e9c:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM1;
 8001e9e:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a32      	ldr	r2, [pc, #200]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupt channel
 8001eaa:	2007      	movs	r0, #7
 8001eac:	f7ff fc6a 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001eb0:	f002 ba4a 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOF)
 8001eb4:	f107 0308 	add.w	r3, r7, #8
 8001eb8:	4a31      	ldr	r2, [pc, #196]	@ (8001f80 <GPIO_init_interrupt+0x694>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d128      	bne.n	8001f10 <GPIO_init_interrupt+0x624>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1_PF;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001ec4:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8001ec8:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PF;
 8001eca:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4a26      	ldr	r2, [pc, #152]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001ed0:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001ed4:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR1_Msk;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4a24      	ldr	r2, [pc, #144]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR1;
 8001ee2:	4b22      	ldr	r3, [pc, #136]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	4a21      	ldr	r2, [pc, #132]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM1;
 8001eee:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001ef4:	f023 0302 	bic.w	r3, r3, #2
 8001ef8:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM1;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupt channel
 8001f06:	2007      	movs	r0, #7
 8001f08:	f7ff fc3c 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001f0c:	f002 ba1c 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1_PG;
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001f16:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001f1a:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PG;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a11      	ldr	r2, [pc, #68]	@ (8001f68 <GPIO_init_interrupt+0x67c>)
 8001f22:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f26:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR1_Msk;
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f2e:	f023 0302 	bic.w	r3, r3, #2
 8001f32:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR1;
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a0c      	ldr	r2, [pc, #48]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM1;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f46:	f023 0302 	bic.w	r3, r3, #2
 8001f4a:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM1;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a06      	ldr	r2, [pc, #24]	@ (8001f6c <GPIO_init_interrupt+0x680>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupt channel
 8001f58:	2007      	movs	r0, #7
 8001f5a:	f7ff fc13 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8001f5e:	f002 b9f3 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 8001f62:	bf00      	nop
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40013c00 	.word	0x40013c00
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40021400 	.word	0x40021400
		case 2:
		//this is for PA/B/C...0:3
			if(&port == (GPIO_TypeDef*)GPIOA)
 8001f84:	f107 0308 	add.w	r3, r7, #8
 8001f88:	4a9b      	ldr	r2, [pc, #620]	@ (80021f8 <GPIO_init_interrupt+0x90c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d124      	bne.n	8001fd8 <GPIO_init_interrupt+0x6ec>
			{
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2_PA;
 8001f8e:	4b9b      	ldr	r3, [pc, #620]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8001f90:	4a9a      	ldr	r2, [pc, #616]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PA;
 8001f96:	4b99      	ldr	r3, [pc, #612]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8001f98:	4a98      	ldr	r2, [pc, #608]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR2_Msk;
 8001f9e:	4b98      	ldr	r3, [pc, #608]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4a97      	ldr	r2, [pc, #604]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	6093      	str	r3, [r2, #8]
				EXTI->RTSR |= EXTI_RTSR_TR2;
 8001faa:	4b95      	ldr	r3, [pc, #596]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4a94      	ldr	r2, [pc, #592]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6093      	str	r3, [r2, #8]
				EXTI->IMR &= ~EXTI_IMR_IM2;
 8001fb6:	4b92      	ldr	r3, [pc, #584]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a91      	ldr	r2, [pc, #580]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6013      	str	r3, [r2, #0]
				EXTI->IMR |= EXTI_IMR_IM2;
 8001fc2:	4b8f      	ldr	r3, [pc, #572]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a8e      	ldr	r2, [pc, #568]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(EXTI2_IRQn); //enable interrupt channel
 8001fce:	2008      	movs	r0, #8
 8001fd0:	f7ff fbd8 	bl	8001784 <__NVIC_EnableIRQ>
							EXTI->IMR &= ~EXTI_IMR_IM2;
							EXTI->IMR |= EXTI_IMR_IM2;
							NVIC_EnableIRQ(EXTI2_IRQn); //enable interrupt channel

			}
		break;
 8001fd4:	f002 b9b8 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOB)
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	4a89      	ldr	r2, [pc, #548]	@ (8002204 <GPIO_init_interrupt+0x918>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d128      	bne.n	8002034 <GPIO_init_interrupt+0x748>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2_PB;
 8001fe2:	4b86      	ldr	r3, [pc, #536]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4a85      	ldr	r2, [pc, #532]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8001fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fec:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PB;
 8001fee:	4b83      	ldr	r3, [pc, #524]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4a82      	ldr	r2, [pc, #520]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff8:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR2_Msk;
 8001ffa:	4b81      	ldr	r3, [pc, #516]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4a80      	ldr	r2, [pc, #512]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR2;
 8002006:	4b7e      	ldr	r3, [pc, #504]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4a7d      	ldr	r2, [pc, #500]	@ (8002200 <GPIO_init_interrupt+0x914>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM2;
 8002012:	4b7b      	ldr	r3, [pc, #492]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7a      	ldr	r2, [pc, #488]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM2;
 800201e:	4b78      	ldr	r3, [pc, #480]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a77      	ldr	r2, [pc, #476]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI2_IRQn); //enable interrupt channel
 800202a:	2008      	movs	r0, #8
 800202c:	f7ff fbaa 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8002030:	f002 b98a 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOC)
 8002034:	f107 0308 	add.w	r3, r7, #8
 8002038:	4a73      	ldr	r2, [pc, #460]	@ (8002208 <GPIO_init_interrupt+0x91c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d128      	bne.n	8002090 <GPIO_init_interrupt+0x7a4>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2_PC;
 800203e:	4b6f      	ldr	r3, [pc, #444]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4a6e      	ldr	r2, [pc, #440]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002044:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002048:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PC;
 800204a:	4b6c      	ldr	r3, [pc, #432]	@ (80021fc <GPIO_init_interrupt+0x910>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4a6b      	ldr	r2, [pc, #428]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002050:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002054:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR2_Msk;
 8002056:	4b6a      	ldr	r3, [pc, #424]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a69      	ldr	r2, [pc, #420]	@ (8002200 <GPIO_init_interrupt+0x914>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR2;
 8002062:	4b67      	ldr	r3, [pc, #412]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4a66      	ldr	r2, [pc, #408]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM2;
 800206e:	4b64      	ldr	r3, [pc, #400]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a63      	ldr	r2, [pc, #396]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM2;
 800207a:	4b61      	ldr	r3, [pc, #388]	@ (8002200 <GPIO_init_interrupt+0x914>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a60      	ldr	r2, [pc, #384]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI2_IRQn); //enable interrupt channel
 8002086:	2008      	movs	r0, #8
 8002088:	f7ff fb7c 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 800208c:	f002 b95c 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOD)
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	4a5d      	ldr	r2, [pc, #372]	@ (800220c <GPIO_init_interrupt+0x920>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d128      	bne.n	80020ec <GPIO_init_interrupt+0x800>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2_PD;
 800209a:	4b58      	ldr	r3, [pc, #352]	@ (80021fc <GPIO_init_interrupt+0x910>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a57      	ldr	r2, [pc, #348]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80020a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a4:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PD;
 80020a6:	4b55      	ldr	r3, [pc, #340]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a54      	ldr	r2, [pc, #336]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80020ac:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80020b0:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR2_Msk;
 80020b2:	4b53      	ldr	r3, [pc, #332]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a52      	ldr	r2, [pc, #328]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR2;
 80020be:	4b50      	ldr	r3, [pc, #320]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4a4f      	ldr	r2, [pc, #316]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM2;
 80020ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM2;
 80020d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a49      	ldr	r2, [pc, #292]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI2_IRQn); //enable interrupt channel
 80020e2:	2008      	movs	r0, #8
 80020e4:	f7ff fb4e 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 80020e8:	f002 b92e 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port ==(GPIO_TypeDef*) GPIOE)
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	4a47      	ldr	r2, [pc, #284]	@ (8002210 <GPIO_init_interrupt+0x924>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d128      	bne.n	8002148 <GPIO_init_interrupt+0x85c>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2_PE;
 80020f6:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4a40      	ldr	r2, [pc, #256]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80020fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002100:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PE;
 8002102:	4b3e      	ldr	r3, [pc, #248]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4a3d      	ldr	r2, [pc, #244]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002108:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210c:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR2_Msk;
 800210e:	4b3c      	ldr	r3, [pc, #240]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4a3b      	ldr	r2, [pc, #236]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR2;
 800211a:	4b39      	ldr	r3, [pc, #228]	@ (8002200 <GPIO_init_interrupt+0x914>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4a38      	ldr	r2, [pc, #224]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM2;
 8002126:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a35      	ldr	r2, [pc, #212]	@ (8002200 <GPIO_init_interrupt+0x914>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM2;
 8002132:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a32      	ldr	r2, [pc, #200]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI2_IRQn); //enable interrupt channel
 800213e:	2008      	movs	r0, #8
 8002140:	f7ff fb20 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 8002144:	f002 b900 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
			else if(&port == (GPIO_TypeDef*)GPIOF)
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	4a31      	ldr	r2, [pc, #196]	@ (8002214 <GPIO_init_interrupt+0x928>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d128      	bne.n	80021a4 <GPIO_init_interrupt+0x8b8>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2_PF;
 8002152:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4a29      	ldr	r2, [pc, #164]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002158:	f423 63a0 	bic.w	r3, r3, #1280	@ 0x500
 800215c:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PF;
 800215e:	4b27      	ldr	r3, [pc, #156]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <GPIO_init_interrupt+0x910>)
 8002164:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002168:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR2_Msk;
 800216a:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <GPIO_init_interrupt+0x914>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4a24      	ldr	r2, [pc, #144]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR2;
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <GPIO_init_interrupt+0x914>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM2;
 8002182:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM2;
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <GPIO_init_interrupt+0x914>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI2_IRQn); //enable interrupt channel
 800219a:	2008      	movs	r0, #8
 800219c:	f7ff faf2 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 80021a0:	f002 b8d2 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI2_PG;
 80021a4:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a14      	ldr	r2, [pc, #80]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80021aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ae:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PG;
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a11      	ldr	r2, [pc, #68]	@ (80021fc <GPIO_init_interrupt+0x910>)
 80021b6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80021ba:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR2_Msk;
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80021c2:	f023 0304 	bic.w	r3, r3, #4
 80021c6:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR2;
 80021c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM2;
 80021d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a09      	ldr	r2, [pc, #36]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80021da:	f023 0304 	bic.w	r3, r3, #4
 80021de:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM2;
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a06      	ldr	r2, [pc, #24]	@ (8002200 <GPIO_init_interrupt+0x914>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI2_IRQn); //enable interrupt channel
 80021ec:	2008      	movs	r0, #8
 80021ee:	f7ff fac9 	bl	8001784 <__NVIC_EnableIRQ>
		break;
 80021f2:	f002 b8a9 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 80021f6:	bf00      	nop
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40013800 	.word	0x40013800
 8002200:	40013c00 	.word	0x40013c00
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40021400 	.word	0x40021400
		case 3:
			//this is for PA/B/C...0:3
				if(&port == (GPIO_TypeDef*)GPIOA)
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	4a9b      	ldr	r2, [pc, #620]	@ (800248c <GPIO_init_interrupt+0xba0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d124      	bne.n	800226c <GPIO_init_interrupt+0x980>
				{
				SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3_PA;
 8002222:	4b9b      	ldr	r3, [pc, #620]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002224:	4a9a      	ldr	r2, [pc, #616]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	6093      	str	r3, [r2, #8]
				SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;
 800222a:	4b99      	ldr	r3, [pc, #612]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800222c:	4a98      	ldr	r2, [pc, #608]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	6093      	str	r3, [r2, #8]
				EXTI->RTSR &= ~EXTI_RTSR_TR3_Msk;
 8002232:	4b98      	ldr	r3, [pc, #608]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4a97      	ldr	r2, [pc, #604]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002238:	f023 0308 	bic.w	r3, r3, #8
 800223c:	6093      	str	r3, [r2, #8]
				EXTI->RTSR |= EXTI_RTSR_TR3;
 800223e:	4b95      	ldr	r3, [pc, #596]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4a94      	ldr	r2, [pc, #592]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	6093      	str	r3, [r2, #8]
				EXTI->IMR &= ~EXTI_IMR_IM3;
 800224a:	4b92      	ldr	r3, [pc, #584]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a91      	ldr	r2, [pc, #580]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002250:	f023 0308 	bic.w	r3, r3, #8
 8002254:	6013      	str	r3, [r2, #0]
				EXTI->IMR |= EXTI_IMR_IM3;
 8002256:	4b8f      	ldr	r3, [pc, #572]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a8e      	ldr	r2, [pc, #568]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(EXTI3_IRQn); //enable interrupt channel
 8002262:	2009      	movs	r0, #9
 8002264:	f7ff fa8e 	bl	8001784 <__NVIC_EnableIRQ>
								EXTI->IMR &= ~EXTI_IMR_IM3;
								EXTI->IMR |= EXTI_IMR_IM3;
								NVIC_EnableIRQ(EXTI3_IRQn); //enable interrupt channel

				}
			break;
 8002268:	f002 b86e 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port ==(GPIO_TypeDef*) GPIOB)
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	4a89      	ldr	r2, [pc, #548]	@ (8002498 <GPIO_init_interrupt+0xbac>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d128      	bne.n	80022c8 <GPIO_init_interrupt+0x9dc>
					SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3_PB;
 8002276:	4b86      	ldr	r3, [pc, #536]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	4a85      	ldr	r2, [pc, #532]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800227c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002280:	6093      	str	r3, [r2, #8]
					SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PB;
 8002282:	4b83      	ldr	r3, [pc, #524]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4a82      	ldr	r2, [pc, #520]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002288:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800228c:	6093      	str	r3, [r2, #8]
					EXTI->RTSR &= ~EXTI_RTSR_TR3_Msk;
 800228e:	4b81      	ldr	r3, [pc, #516]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4a80      	ldr	r2, [pc, #512]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002294:	f023 0308 	bic.w	r3, r3, #8
 8002298:	6093      	str	r3, [r2, #8]
								EXTI->RTSR |= EXTI_RTSR_TR3;
 800229a:	4b7e      	ldr	r3, [pc, #504]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4a7d      	ldr	r2, [pc, #500]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6093      	str	r3, [r2, #8]
								EXTI->IMR &= ~EXTI_IMR_IM3;
 80022a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7a      	ldr	r2, [pc, #488]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022ac:	f023 0308 	bic.w	r3, r3, #8
 80022b0:	6013      	str	r3, [r2, #0]
								EXTI->IMR |= EXTI_IMR_IM3;
 80022b2:	4b78      	ldr	r3, [pc, #480]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a77      	ldr	r2, [pc, #476]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	6013      	str	r3, [r2, #0]
								NVIC_EnableIRQ(EXTI3_IRQn); //enable interrupt channel
 80022be:	2009      	movs	r0, #9
 80022c0:	f7ff fa60 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 80022c4:	f002 b840 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOC)
 80022c8:	f107 0308 	add.w	r3, r7, #8
 80022cc:	4a73      	ldr	r2, [pc, #460]	@ (800249c <GPIO_init_interrupt+0xbb0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d128      	bne.n	8002324 <GPIO_init_interrupt+0xa38>
					SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3_PC;
 80022d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 80022d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022dc:	6093      	str	r3, [r2, #8]
					SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PC;
 80022de:	4b6c      	ldr	r3, [pc, #432]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4a6b      	ldr	r2, [pc, #428]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 80022e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022e8:	6093      	str	r3, [r2, #8]
					EXTI->RTSR &= ~EXTI_RTSR_TR3_Msk;
 80022ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4a69      	ldr	r2, [pc, #420]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022f0:	f023 0308 	bic.w	r3, r3, #8
 80022f4:	6093      	str	r3, [r2, #8]
								EXTI->RTSR |= EXTI_RTSR_TR3;
 80022f6:	4b67      	ldr	r3, [pc, #412]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4a66      	ldr	r2, [pc, #408]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	6093      	str	r3, [r2, #8]
								EXTI->IMR &= ~EXTI_IMR_IM3;
 8002302:	4b64      	ldr	r3, [pc, #400]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a63      	ldr	r2, [pc, #396]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002308:	f023 0308 	bic.w	r3, r3, #8
 800230c:	6013      	str	r3, [r2, #0]
								EXTI->IMR |= EXTI_IMR_IM3;
 800230e:	4b61      	ldr	r3, [pc, #388]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a60      	ldr	r2, [pc, #384]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	6013      	str	r3, [r2, #0]
								NVIC_EnableIRQ(EXTI3_IRQn); //enable interrupt channel
 800231a:	2009      	movs	r0, #9
 800231c:	f7ff fa32 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002320:	f002 b812 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port ==(GPIO_TypeDef*) GPIOD)
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	4a5d      	ldr	r2, [pc, #372]	@ (80024a0 <GPIO_init_interrupt+0xbb4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d128      	bne.n	8002380 <GPIO_init_interrupt+0xa94>
					SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 800232e:	4b58      	ldr	r3, [pc, #352]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4a57      	ldr	r2, [pc, #348]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002334:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002338:	6093      	str	r3, [r2, #8]
					SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PD;
 800233a:	4b55      	ldr	r3, [pc, #340]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4a54      	ldr	r2, [pc, #336]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002340:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8002344:	6093      	str	r3, [r2, #8]
					EXTI->RTSR &= ~EXTI_RTSR_TR3_Msk;
 8002346:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800234c:	f023 0308 	bic.w	r3, r3, #8
 8002350:	6093      	str	r3, [r2, #8]
								EXTI->RTSR |= EXTI_RTSR_TR3;
 8002352:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	6093      	str	r3, [r2, #8]
								EXTI->IMR &= ~EXTI_IMR_IM3;
 800235e:	4b4d      	ldr	r3, [pc, #308]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a4c      	ldr	r2, [pc, #304]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002364:	f023 0308 	bic.w	r3, r3, #8
 8002368:	6013      	str	r3, [r2, #0]
								EXTI->IMR |= EXTI_IMR_IM3;
 800236a:	4b4a      	ldr	r3, [pc, #296]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a49      	ldr	r2, [pc, #292]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	6013      	str	r3, [r2, #0]
								NVIC_EnableIRQ(EXTI3_IRQn); //enable interrupt channel
 8002376:	2009      	movs	r0, #9
 8002378:	f7ff fa04 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 800237c:	f001 bfe4 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOE)
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	4a47      	ldr	r2, [pc, #284]	@ (80024a4 <GPIO_init_interrupt+0xbb8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d128      	bne.n	80023dc <GPIO_init_interrupt+0xaf0>
					SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3_PE;
 800238a:	4b41      	ldr	r3, [pc, #260]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4a40      	ldr	r2, [pc, #256]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002390:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002394:	6093      	str	r3, [r2, #8]
					SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PE;
 8002396:	4b3e      	ldr	r3, [pc, #248]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4a3d      	ldr	r2, [pc, #244]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800239c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a0:	6093      	str	r3, [r2, #8]
					EXTI->RTSR &= ~EXTI_RTSR_TR3_Msk;
 80023a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80023a8:	f023 0308 	bic.w	r3, r3, #8
 80023ac:	6093      	str	r3, [r2, #8]
								EXTI->RTSR |= EXTI_RTSR_TR3;
 80023ae:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4a38      	ldr	r2, [pc, #224]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	6093      	str	r3, [r2, #8]
								EXTI->IMR &= ~EXTI_IMR_IM3;
 80023ba:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a35      	ldr	r2, [pc, #212]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80023c0:	f023 0308 	bic.w	r3, r3, #8
 80023c4:	6013      	str	r3, [r2, #0]
								EXTI->IMR |= EXTI_IMR_IM3;
 80023c6:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a32      	ldr	r2, [pc, #200]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6013      	str	r3, [r2, #0]
								NVIC_EnableIRQ(EXTI3_IRQn); //enable interrupt channel
 80023d2:	2009      	movs	r0, #9
 80023d4:	f7ff f9d6 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 80023d8:	f001 bfb6 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOF)
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	4a31      	ldr	r2, [pc, #196]	@ (80024a8 <GPIO_init_interrupt+0xbbc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d128      	bne.n	8002438 <GPIO_init_interrupt+0xb4c>
					SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3_PF;
 80023e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4a29      	ldr	r2, [pc, #164]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 80023ec:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 80023f0:	6093      	str	r3, [r2, #8]
					SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PF;
 80023f2:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4a26      	ldr	r2, [pc, #152]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 80023f8:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 80023fc:	6093      	str	r3, [r2, #8]
					EXTI->RTSR &= ~EXTI_RTSR_TR3_Msk;
 80023fe:	4b25      	ldr	r3, [pc, #148]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4a24      	ldr	r2, [pc, #144]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002404:	f023 0308 	bic.w	r3, r3, #8
 8002408:	6093      	str	r3, [r2, #8]
								EXTI->RTSR |= EXTI_RTSR_TR3;
 800240a:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4a21      	ldr	r2, [pc, #132]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002410:	f043 0308 	orr.w	r3, r3, #8
 8002414:	6093      	str	r3, [r2, #8]
								EXTI->IMR &= ~EXTI_IMR_IM3;
 8002416:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1e      	ldr	r2, [pc, #120]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800241c:	f023 0308 	bic.w	r3, r3, #8
 8002420:	6013      	str	r3, [r2, #0]
								EXTI->IMR |= EXTI_IMR_IM3;
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1b      	ldr	r2, [pc, #108]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6013      	str	r3, [r2, #0]
								NVIC_EnableIRQ(EXTI3_IRQn); //enable interrupt channel
 800242e:	2009      	movs	r0, #9
 8002430:	f7ff f9a8 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002434:	f001 bf88 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3_PG;
 8002438:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a14      	ldr	r2, [pc, #80]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800243e:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8002442:	6093      	str	r3, [r2, #8]
					SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PG;
 8002444:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a11      	ldr	r2, [pc, #68]	@ (8002490 <GPIO_init_interrupt+0xba4>)
 800244a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800244e:	6093      	str	r3, [r2, #8]
					EXTI->RTSR &= ~EXTI_RTSR_TR3_Msk;
 8002450:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a0f      	ldr	r2, [pc, #60]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002456:	f023 0308 	bic.w	r3, r3, #8
 800245a:	6093      	str	r3, [r2, #8]
								EXTI->RTSR |= EXTI_RTSR_TR3;
 800245c:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a0c      	ldr	r2, [pc, #48]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002462:	f043 0308 	orr.w	r3, r3, #8
 8002466:	6093      	str	r3, [r2, #8]
								EXTI->IMR &= ~EXTI_IMR_IM3;
 8002468:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a09      	ldr	r2, [pc, #36]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800246e:	f023 0308 	bic.w	r3, r3, #8
 8002472:	6013      	str	r3, [r2, #0]
								EXTI->IMR |= EXTI_IMR_IM3;
 8002474:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a06      	ldr	r2, [pc, #24]	@ (8002494 <GPIO_init_interrupt+0xba8>)
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	6013      	str	r3, [r2, #0]
								NVIC_EnableIRQ(EXTI3_IRQn); //enable interrupt channel
 8002480:	2009      	movs	r0, #9
 8002482:	f7ff f97f 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002486:	f001 bf5f 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 800248a:	bf00      	nop
 800248c:	40020000 	.word	0x40020000
 8002490:	40013800 	.word	0x40013800
 8002494:	40013c00 	.word	0x40013c00
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40021400 	.word	0x40021400



		case 4:
			//this is for PA/B/C...0:3
				if(&port == (GPIO_TypeDef*)GPIOA)
 80024ac:	f107 0308 	add.w	r3, r7, #8
 80024b0:	4a9b      	ldr	r2, [pc, #620]	@ (8002720 <GPIO_init_interrupt+0xe34>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d124      	bne.n	8002500 <GPIO_init_interrupt+0xc14>
				{
				SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI0_PA;
 80024b6:	4b9b      	ldr	r3, [pc, #620]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80024b8:	4a9a      	ldr	r2, [pc, #616]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60d3      	str	r3, [r2, #12]
				SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI0_PA;
 80024be:	4b99      	ldr	r3, [pc, #612]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80024c0:	4a98      	ldr	r2, [pc, #608]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~EXTI_RTSR_TR4_Msk;
 80024c6:	4b98      	ldr	r3, [pc, #608]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4a97      	ldr	r2, [pc, #604]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80024cc:	f023 0310 	bic.w	r3, r3, #16
 80024d0:	6093      	str	r3, [r2, #8]
				EXTI->RTSR |= EXTI_RTSR_TR4;
 80024d2:	4b95      	ldr	r3, [pc, #596]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4a94      	ldr	r2, [pc, #592]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80024d8:	f043 0310 	orr.w	r3, r3, #16
 80024dc:	6093      	str	r3, [r2, #8]
				EXTI->IMR &= ~EXTI_IMR_IM4;
 80024de:	4b92      	ldr	r3, [pc, #584]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a91      	ldr	r2, [pc, #580]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80024e4:	f023 0310 	bic.w	r3, r3, #16
 80024e8:	6013      	str	r3, [r2, #0]
				EXTI->IMR |= EXTI_IMR_IM4;
 80024ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a8e      	ldr	r2, [pc, #568]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80024f0:	f043 0310 	orr.w	r3, r3, #16
 80024f4:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel
 80024f6:	200a      	movs	r0, #10
 80024f8:	f7ff f944 	bl	8001784 <__NVIC_EnableIRQ>
									EXTI->IMR &= ~EXTI_IMR_IM4;
									EXTI->IMR |= EXTI_IMR_IM4;
									NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel

				}
			break;
 80024fc:	f001 bf24 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOB)
 8002500:	f107 0308 	add.w	r3, r7, #8
 8002504:	4a89      	ldr	r2, [pc, #548]	@ (800272c <GPIO_init_interrupt+0xe40>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d128      	bne.n	800255c <GPIO_init_interrupt+0xc70>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI0_PB;
 800250a:	4b86      	ldr	r3, [pc, #536]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	4a85      	ldr	r2, [pc, #532]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI0_PB;
 8002516:	4b83      	ldr	r3, [pc, #524]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4a82      	ldr	r2, [pc, #520]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR4_Msk;
 8002522:	4b81      	ldr	r3, [pc, #516]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4a80      	ldr	r2, [pc, #512]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002528:	f023 0310 	bic.w	r3, r3, #16
 800252c:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR4;
 800252e:	4b7e      	ldr	r3, [pc, #504]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4a7d      	ldr	r2, [pc, #500]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002534:	f043 0310 	orr.w	r3, r3, #16
 8002538:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM4;
 800253a:	4b7b      	ldr	r3, [pc, #492]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7a      	ldr	r2, [pc, #488]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002540:	f023 0310 	bic.w	r3, r3, #16
 8002544:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM4;
 8002546:	4b78      	ldr	r3, [pc, #480]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a77      	ldr	r2, [pc, #476]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 800254c:	f043 0310 	orr.w	r3, r3, #16
 8002550:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel
 8002552:	200a      	movs	r0, #10
 8002554:	f7ff f916 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002558:	f001 bef6 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOC)
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	4a73      	ldr	r2, [pc, #460]	@ (8002730 <GPIO_init_interrupt+0xe44>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d128      	bne.n	80025b8 <GPIO_init_interrupt+0xccc>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI0_PC;
 8002566:	4b6f      	ldr	r3, [pc, #444]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a6e      	ldr	r2, [pc, #440]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 800256c:	f023 0302 	bic.w	r3, r3, #2
 8002570:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI0_PC;
 8002572:	4b6c      	ldr	r3, [pc, #432]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a6b      	ldr	r2, [pc, #428]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR4_Msk;
 800257e:	4b6a      	ldr	r3, [pc, #424]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4a69      	ldr	r2, [pc, #420]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002584:	f023 0310 	bic.w	r3, r3, #16
 8002588:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR4;
 800258a:	4b67      	ldr	r3, [pc, #412]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4a66      	ldr	r2, [pc, #408]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM4;
 8002596:	4b64      	ldr	r3, [pc, #400]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a63      	ldr	r2, [pc, #396]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 800259c:	f023 0310 	bic.w	r3, r3, #16
 80025a0:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM4;
 80025a2:	4b61      	ldr	r3, [pc, #388]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a60      	ldr	r2, [pc, #384]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80025a8:	f043 0310 	orr.w	r3, r3, #16
 80025ac:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel
 80025ae:	200a      	movs	r0, #10
 80025b0:	f7ff f8e8 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 80025b4:	f001 bec8 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOD)
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002734 <GPIO_init_interrupt+0xe48>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d128      	bne.n	8002614 <GPIO_init_interrupt+0xd28>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI0_PD;
 80025c2:	4b58      	ldr	r3, [pc, #352]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a57      	ldr	r2, [pc, #348]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80025c8:	f023 0303 	bic.w	r3, r3, #3
 80025cc:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI0_PD;
 80025ce:	4b55      	ldr	r3, [pc, #340]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4a54      	ldr	r2, [pc, #336]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80025d4:	f043 0303 	orr.w	r3, r3, #3
 80025d8:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR4_Msk;
 80025da:	4b53      	ldr	r3, [pc, #332]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4a52      	ldr	r2, [pc, #328]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80025e0:	f023 0310 	bic.w	r3, r3, #16
 80025e4:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR4;
 80025e6:	4b50      	ldr	r3, [pc, #320]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80025ec:	f043 0310 	orr.w	r3, r3, #16
 80025f0:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM4;
 80025f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80025f8:	f023 0310 	bic.w	r3, r3, #16
 80025fc:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM4;
 80025fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a49      	ldr	r2, [pc, #292]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002604:	f043 0310 	orr.w	r3, r3, #16
 8002608:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel
 800260a:	200a      	movs	r0, #10
 800260c:	f7ff f8ba 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002610:	f001 be9a 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOE)
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4a47      	ldr	r2, [pc, #284]	@ (8002738 <GPIO_init_interrupt+0xe4c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d128      	bne.n	8002670 <GPIO_init_interrupt+0xd84>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI0_PE;
 800261e:	4b41      	ldr	r3, [pc, #260]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a40      	ldr	r2, [pc, #256]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI0_PE;
 800262a:	4b3e      	ldr	r3, [pc, #248]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4a3d      	ldr	r2, [pc, #244]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR4_Msk;
 8002636:	4b3c      	ldr	r3, [pc, #240]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4a3b      	ldr	r2, [pc, #236]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 800263c:	f023 0310 	bic.w	r3, r3, #16
 8002640:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR4;
 8002642:	4b39      	ldr	r3, [pc, #228]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4a38      	ldr	r2, [pc, #224]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002648:	f043 0310 	orr.w	r3, r3, #16
 800264c:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM4;
 800264e:	4b36      	ldr	r3, [pc, #216]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a35      	ldr	r2, [pc, #212]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002654:	f023 0310 	bic.w	r3, r3, #16
 8002658:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM4;
 800265a:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a32      	ldr	r2, [pc, #200]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002660:	f043 0310 	orr.w	r3, r3, #16
 8002664:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel
 8002666:	200a      	movs	r0, #10
 8002668:	f7ff f88c 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 800266c:	f001 be6c 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOF)
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	4a31      	ldr	r2, [pc, #196]	@ (800273c <GPIO_init_interrupt+0xe50>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d128      	bne.n	80026cc <GPIO_init_interrupt+0xde0>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI0_PF;
 800267a:	4b2a      	ldr	r3, [pc, #168]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4a29      	ldr	r2, [pc, #164]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002680:	f023 0305 	bic.w	r3, r3, #5
 8002684:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI0_PF;
 8002686:	4b27      	ldr	r3, [pc, #156]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4a26      	ldr	r2, [pc, #152]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 800268c:	f043 0305 	orr.w	r3, r3, #5
 8002690:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR4_Msk;
 8002692:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4a24      	ldr	r2, [pc, #144]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002698:	f023 0310 	bic.w	r3, r3, #16
 800269c:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR4;
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4a21      	ldr	r2, [pc, #132]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026a4:	f043 0310 	orr.w	r3, r3, #16
 80026a8:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM4;
 80026aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026b0:	f023 0310 	bic.w	r3, r3, #16
 80026b4:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM4;
 80026b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026bc:	f043 0310 	orr.w	r3, r3, #16
 80026c0:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel
 80026c2:	200a      	movs	r0, #10
 80026c4:	f7ff f85e 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 80026c8:	f001 be3e 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI0_PG;
 80026cc:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a14      	ldr	r2, [pc, #80]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80026d2:	f023 0306 	bic.w	r3, r3, #6
 80026d6:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI0_PG;
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a11      	ldr	r2, [pc, #68]	@ (8002724 <GPIO_init_interrupt+0xe38>)
 80026de:	f043 0306 	orr.w	r3, r3, #6
 80026e2:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR4_Msk;
 80026e4:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026ea:	f023 0310 	bic.w	r3, r3, #16
 80026ee:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR4;
 80026f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026f6:	f043 0310 	orr.w	r3, r3, #16
 80026fa:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM4;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a09      	ldr	r2, [pc, #36]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 8002702:	f023 0310 	bic.w	r3, r3, #16
 8002706:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM4;
 8002708:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a06      	ldr	r2, [pc, #24]	@ (8002728 <GPIO_init_interrupt+0xe3c>)
 800270e:	f043 0310 	orr.w	r3, r3, #16
 8002712:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel
 8002714:	200a      	movs	r0, #10
 8002716:	f7ff f835 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 800271a:	f001 be15 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 800271e:	bf00      	nop
 8002720:	40020000 	.word	0x40020000
 8002724:	40013800 	.word	0x40013800
 8002728:	40013c00 	.word	0x40013c00
 800272c:	40020400 	.word	0x40020400
 8002730:	40020800 	.word	0x40020800
 8002734:	40020c00 	.word	0x40020c00
 8002738:	40021000 	.word	0x40021000
 800273c:	40021400 	.word	0x40021400
			case 5:
			//this is for PA/B/C...0:3
				if(&port == (GPIO_TypeDef*)GPIOA)
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	4a9b      	ldr	r2, [pc, #620]	@ (80029b4 <GPIO_init_interrupt+0x10c8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d124      	bne.n	8002794 <GPIO_init_interrupt+0xea8>
				{
				SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI1_PA;
 800274a:	4b9b      	ldr	r3, [pc, #620]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 800274c:	4a9a      	ldr	r2, [pc, #616]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60d3      	str	r3, [r2, #12]
				SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI1_PA;
 8002752:	4b99      	ldr	r3, [pc, #612]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002754:	4a98      	ldr	r2, [pc, #608]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR &= ~EXTI_RTSR_TR5_Msk;
 800275a:	4b98      	ldr	r3, [pc, #608]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	4a97      	ldr	r2, [pc, #604]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002760:	f023 0320 	bic.w	r3, r3, #32
 8002764:	6093      	str	r3, [r2, #8]
				EXTI->RTSR |= EXTI_RTSR_TR5;
 8002766:	4b95      	ldr	r3, [pc, #596]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4a94      	ldr	r2, [pc, #592]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800276c:	f043 0320 	orr.w	r3, r3, #32
 8002770:	6093      	str	r3, [r2, #8]
				EXTI->IMR &= ~EXTI_IMR_IM5;
 8002772:	4b92      	ldr	r3, [pc, #584]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a91      	ldr	r2, [pc, #580]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002778:	f023 0320 	bic.w	r3, r3, #32
 800277c:	6013      	str	r3, [r2, #0]
				EXTI->IMR |= EXTI_IMR_IM5;
 800277e:	4b8f      	ldr	r3, [pc, #572]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a8e      	ldr	r2, [pc, #568]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002784:	f043 0320 	orr.w	r3, r3, #32
 8002788:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(EXTI4_IRQn); //enable interrupt channel
 800278a:	200a      	movs	r0, #10
 800278c:	f7fe fffa 	bl	8001784 <__NVIC_EnableIRQ>
									EXTI->IMR &= ~EXTI_IMR_IM5;
									EXTI->IMR |= EXTI_IMR_IM5;
									NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel

				}
			break;
 8002790:	f001 bdda 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOB)
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	4a89      	ldr	r2, [pc, #548]	@ (80029c0 <GPIO_init_interrupt+0x10d4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d128      	bne.n	80027f0 <GPIO_init_interrupt+0xf04>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI1_PB;
 800279e:	4b86      	ldr	r3, [pc, #536]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a85      	ldr	r2, [pc, #532]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80027a4:	f023 0310 	bic.w	r3, r3, #16
 80027a8:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI1_PB;
 80027aa:	4b83      	ldr	r3, [pc, #524]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a82      	ldr	r2, [pc, #520]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80027b0:	f043 0310 	orr.w	r3, r3, #16
 80027b4:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR5_Msk;
 80027b6:	4b81      	ldr	r3, [pc, #516]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4a80      	ldr	r2, [pc, #512]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80027bc:	f023 0320 	bic.w	r3, r3, #32
 80027c0:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR5;
 80027c2:	4b7e      	ldr	r3, [pc, #504]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4a7d      	ldr	r2, [pc, #500]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80027c8:	f043 0320 	orr.w	r3, r3, #32
 80027cc:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM5;
 80027ce:	4b7b      	ldr	r3, [pc, #492]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a7a      	ldr	r2, [pc, #488]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80027d4:	f023 0320 	bic.w	r3, r3, #32
 80027d8:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM5;
 80027da:	4b78      	ldr	r3, [pc, #480]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a77      	ldr	r2, [pc, #476]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80027e0:	f043 0320 	orr.w	r3, r3, #32
 80027e4:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 80027e6:	2017      	movs	r0, #23
 80027e8:	f7fe ffcc 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 80027ec:	f001 bdac 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOC)
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	4a73      	ldr	r2, [pc, #460]	@ (80029c4 <GPIO_init_interrupt+0x10d8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d128      	bne.n	800284c <GPIO_init_interrupt+0xf60>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI1_PC;
 80027fa:	4b6f      	ldr	r3, [pc, #444]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a6e      	ldr	r2, [pc, #440]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002800:	f023 0320 	bic.w	r3, r3, #32
 8002804:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI1_PC;
 8002806:	4b6c      	ldr	r3, [pc, #432]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	4a6b      	ldr	r2, [pc, #428]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 800280c:	f043 0320 	orr.w	r3, r3, #32
 8002810:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR5_Msk;
 8002812:	4b6a      	ldr	r3, [pc, #424]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	4a69      	ldr	r2, [pc, #420]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002818:	f023 0320 	bic.w	r3, r3, #32
 800281c:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR5;
 800281e:	4b67      	ldr	r3, [pc, #412]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	4a66      	ldr	r2, [pc, #408]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002824:	f043 0320 	orr.w	r3, r3, #32
 8002828:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM5;
 800282a:	4b64      	ldr	r3, [pc, #400]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a63      	ldr	r2, [pc, #396]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002830:	f023 0320 	bic.w	r3, r3, #32
 8002834:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM5;
 8002836:	4b61      	ldr	r3, [pc, #388]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a60      	ldr	r2, [pc, #384]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800283c:	f043 0320 	orr.w	r3, r3, #32
 8002840:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002842:	2017      	movs	r0, #23
 8002844:	f7fe ff9e 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002848:	f001 bd7e 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOD)
 800284c:	f107 0308 	add.w	r3, r7, #8
 8002850:	4a5d      	ldr	r2, [pc, #372]	@ (80029c8 <GPIO_init_interrupt+0x10dc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d128      	bne.n	80028a8 <GPIO_init_interrupt+0xfbc>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI1_PD;
 8002856:	4b58      	ldr	r3, [pc, #352]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a57      	ldr	r2, [pc, #348]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 800285c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002860:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI1_PD;
 8002862:	4b55      	ldr	r3, [pc, #340]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4a54      	ldr	r2, [pc, #336]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002868:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800286c:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR5_Msk;
 800286e:	4b53      	ldr	r3, [pc, #332]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002874:	f023 0320 	bic.w	r3, r3, #32
 8002878:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR5;
 800287a:	4b50      	ldr	r3, [pc, #320]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4a4f      	ldr	r2, [pc, #316]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002880:	f043 0320 	orr.w	r3, r3, #32
 8002884:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM5;
 8002886:	4b4d      	ldr	r3, [pc, #308]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a4c      	ldr	r2, [pc, #304]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800288c:	f023 0320 	bic.w	r3, r3, #32
 8002890:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM5;
 8002892:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a49      	ldr	r2, [pc, #292]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002898:	f043 0320 	orr.w	r3, r3, #32
 800289c:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 800289e:	2017      	movs	r0, #23
 80028a0:	f7fe ff70 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 80028a4:	f001 bd50 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOE)
 80028a8:	f107 0308 	add.w	r3, r7, #8
 80028ac:	4a47      	ldr	r2, [pc, #284]	@ (80029cc <GPIO_init_interrupt+0x10e0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d128      	bne.n	8002904 <GPIO_init_interrupt+0x1018>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI1_PE;
 80028b2:	4b41      	ldr	r3, [pc, #260]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a40      	ldr	r2, [pc, #256]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80028b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028bc:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI1_PE;
 80028be:	4b3e      	ldr	r3, [pc, #248]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4a3d      	ldr	r2, [pc, #244]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 80028c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c8:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR5_Msk;
 80028ca:	4b3c      	ldr	r3, [pc, #240]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	4a3b      	ldr	r2, [pc, #236]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80028d0:	f023 0320 	bic.w	r3, r3, #32
 80028d4:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR5;
 80028d6:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a38      	ldr	r2, [pc, #224]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80028dc:	f043 0320 	orr.w	r3, r3, #32
 80028e0:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM5;
 80028e2:	4b36      	ldr	r3, [pc, #216]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a35      	ldr	r2, [pc, #212]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80028e8:	f023 0320 	bic.w	r3, r3, #32
 80028ec:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM5;
 80028ee:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a32      	ldr	r2, [pc, #200]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80028f4:	f043 0320 	orr.w	r3, r3, #32
 80028f8:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 80028fa:	2017      	movs	r0, #23
 80028fc:	f7fe ff42 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002900:	f001 bd22 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOF)
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	4a31      	ldr	r2, [pc, #196]	@ (80029d0 <GPIO_init_interrupt+0x10e4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d128      	bne.n	8002960 <GPIO_init_interrupt+0x1074>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI1_PF;
 800290e:	4b2a      	ldr	r3, [pc, #168]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4a29      	ldr	r2, [pc, #164]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002914:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8002918:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI1_PF;
 800291a:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4a26      	ldr	r2, [pc, #152]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002920:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8002924:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR5_Msk;
 8002926:	4b25      	ldr	r3, [pc, #148]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a24      	ldr	r2, [pc, #144]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800292c:	f023 0320 	bic.w	r3, r3, #32
 8002930:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR5;
 8002932:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002938:	f043 0320 	orr.w	r3, r3, #32
 800293c:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM5;
 800293e:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1e      	ldr	r2, [pc, #120]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002944:	f023 0320 	bic.w	r3, r3, #32
 8002948:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM5;
 800294a:	4b1c      	ldr	r3, [pc, #112]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1b      	ldr	r2, [pc, #108]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002950:	f043 0320 	orr.w	r3, r3, #32
 8002954:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002956:	2017      	movs	r0, #23
 8002958:	f7fe ff14 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 800295c:	f001 bcf4 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI1_PG;
 8002960:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a14      	ldr	r2, [pc, #80]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002966:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800296a:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI1_PG;
 800296c:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a11      	ldr	r2, [pc, #68]	@ (80029b8 <GPIO_init_interrupt+0x10cc>)
 8002972:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002976:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR5_Msk;
 8002978:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a0f      	ldr	r2, [pc, #60]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800297e:	f023 0320 	bic.w	r3, r3, #32
 8002982:	6093      	str	r3, [r2, #8]
									EXTI->RTSR |= EXTI_RTSR_TR5;
 8002984:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	6093      	str	r3, [r2, #8]
									EXTI->IMR &= ~EXTI_IMR_IM5;
 8002990:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a09      	ldr	r2, [pc, #36]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 8002996:	f023 0320 	bic.w	r3, r3, #32
 800299a:	6013      	str	r3, [r2, #0]
									EXTI->IMR |= EXTI_IMR_IM5;
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a06      	ldr	r2, [pc, #24]	@ (80029bc <GPIO_init_interrupt+0x10d0>)
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	6013      	str	r3, [r2, #0]
									NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 80029a8:	2017      	movs	r0, #23
 80029aa:	f7fe feeb 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 80029ae:	f001 bccb 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 80029b2:	bf00      	nop
 80029b4:	40020000 	.word	0x40020000
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40013c00 	.word	0x40013c00
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40021400 	.word	0x40021400
			case 6:
			//this is for PA/B/C...0:3
				if(&port == (GPIO_TypeDef*)GPIOA)
 80029d4:	f107 0308 	add.w	r3, r7, #8
 80029d8:	4a9b      	ldr	r2, [pc, #620]	@ (8002c48 <GPIO_init_interrupt+0x135c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d124      	bne.n	8002a28 <GPIO_init_interrupt+0x113c>
				{
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI2_PA;
 80029de:	4b9b      	ldr	r3, [pc, #620]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 80029e0:	4a9a      	ldr	r2, [pc, #616]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI2_PA;
 80029e6:	4b99      	ldr	r3, [pc, #612]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 80029e8:	4a98      	ldr	r2, [pc, #608]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR6_Msk;
 80029ee:	4b98      	ldr	r3, [pc, #608]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4a97      	ldr	r2, [pc, #604]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 80029f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029f8:	6093      	str	r3, [r2, #8]
					EXTI->RTSR |= EXTI_RTSR_TR6;
 80029fa:	4b95      	ldr	r3, [pc, #596]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4a94      	ldr	r2, [pc, #592]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a04:	6093      	str	r3, [r2, #8]
					EXTI->IMR &= ~EXTI_IMR_IM6;
 8002a06:	4b92      	ldr	r3, [pc, #584]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a91      	ldr	r2, [pc, #580]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a10:	6013      	str	r3, [r2, #0]
					EXTI->IMR |= EXTI_IMR_IM6;
 8002a12:	4b8f      	ldr	r3, [pc, #572]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a8e      	ldr	r2, [pc, #568]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a1c:	6013      	str	r3, [r2, #0]
					NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002a1e:	2017      	movs	r0, #23
 8002a20:	f7fe feb0 	bl	8001784 <__NVIC_EnableIRQ>
										EXTI->IMR &= ~EXTI_IMR_IM6;
										EXTI->IMR |= EXTI_IMR_IM6;
										NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel

				}
			break;
 8002a24:	f001 bc90 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOB)
 8002a28:	f107 0308 	add.w	r3, r7, #8
 8002a2c:	4a89      	ldr	r2, [pc, #548]	@ (8002c54 <GPIO_init_interrupt+0x1368>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d128      	bne.n	8002a84 <GPIO_init_interrupt+0x1198>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI2_PB;
 8002a32:	4b86      	ldr	r3, [pc, #536]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a85      	ldr	r2, [pc, #532]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a3c:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI2_PB;
 8002a3e:	4b83      	ldr	r3, [pc, #524]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a82      	ldr	r2, [pc, #520]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a48:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR6_Msk;
 8002a4a:	4b81      	ldr	r3, [pc, #516]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4a80      	ldr	r2, [pc, #512]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a54:	6093      	str	r3, [r2, #8]
										EXTI->RTSR |= EXTI_RTSR_TR6;
 8002a56:	4b7e      	ldr	r3, [pc, #504]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a60:	6093      	str	r3, [r2, #8]
										EXTI->IMR &= ~EXTI_IMR_IM6;
 8002a62:	4b7b      	ldr	r3, [pc, #492]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7a      	ldr	r2, [pc, #488]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a6c:	6013      	str	r3, [r2, #0]
										EXTI->IMR |= EXTI_IMR_IM6;
 8002a6e:	4b78      	ldr	r3, [pc, #480]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a77      	ldr	r2, [pc, #476]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a78:	6013      	str	r3, [r2, #0]
										NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002a7a:	2017      	movs	r0, #23
 8002a7c:	f7fe fe82 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002a80:	f001 bc62 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOC)
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	4a73      	ldr	r2, [pc, #460]	@ (8002c58 <GPIO_init_interrupt+0x136c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d128      	bne.n	8002ae0 <GPIO_init_interrupt+0x11f4>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI2_PC;
 8002a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4a6e      	ldr	r2, [pc, #440]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002a94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a98:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI2_PC;
 8002a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002aa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa4:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR6_Msk;
 8002aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4a69      	ldr	r2, [pc, #420]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ab0:	6093      	str	r3, [r2, #8]
										EXTI->RTSR |= EXTI_RTSR_TR6;
 8002ab2:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4a66      	ldr	r2, [pc, #408]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002abc:	6093      	str	r3, [r2, #8]
										EXTI->IMR &= ~EXTI_IMR_IM6;
 8002abe:	4b64      	ldr	r3, [pc, #400]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a63      	ldr	r2, [pc, #396]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ac8:	6013      	str	r3, [r2, #0]
										EXTI->IMR |= EXTI_IMR_IM6;
 8002aca:	4b61      	ldr	r3, [pc, #388]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a60      	ldr	r2, [pc, #384]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ad4:	6013      	str	r3, [r2, #0]
										NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002ad6:	2017      	movs	r0, #23
 8002ad8:	f7fe fe54 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002adc:	f001 bc34 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOD)
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	4a5d      	ldr	r2, [pc, #372]	@ (8002c5c <GPIO_init_interrupt+0x1370>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d128      	bne.n	8002b3c <GPIO_init_interrupt+0x1250>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI2_PD;
 8002aea:	4b58      	ldr	r3, [pc, #352]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	4a57      	ldr	r2, [pc, #348]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af4:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI2_PD;
 8002af6:	4b55      	ldr	r3, [pc, #340]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a54      	ldr	r2, [pc, #336]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002afc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002b00:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR6_Msk;
 8002b02:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b0c:	6093      	str	r3, [r2, #8]
										EXTI->RTSR |= EXTI_RTSR_TR6;
 8002b0e:	4b50      	ldr	r3, [pc, #320]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4a4f      	ldr	r2, [pc, #316]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b18:	6093      	str	r3, [r2, #8]
										EXTI->IMR &= ~EXTI_IMR_IM6;
 8002b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b24:	6013      	str	r3, [r2, #0]
										EXTI->IMR |= EXTI_IMR_IM6;
 8002b26:	4b4a      	ldr	r3, [pc, #296]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a49      	ldr	r2, [pc, #292]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b30:	6013      	str	r3, [r2, #0]
										NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002b32:	2017      	movs	r0, #23
 8002b34:	f7fe fe26 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002b38:	f001 bc06 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOE)
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	4a47      	ldr	r2, [pc, #284]	@ (8002c60 <GPIO_init_interrupt+0x1374>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d128      	bne.n	8002b98 <GPIO_init_interrupt+0x12ac>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI2_PE;
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a40      	ldr	r2, [pc, #256]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002b4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b50:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI2_PE;
 8002b52:	4b3e      	ldr	r3, [pc, #248]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4a3d      	ldr	r2, [pc, #244]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002b58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b5c:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR6_Msk;
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4a3b      	ldr	r2, [pc, #236]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b68:	6093      	str	r3, [r2, #8]
										EXTI->RTSR |= EXTI_RTSR_TR6;
 8002b6a:	4b39      	ldr	r3, [pc, #228]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4a38      	ldr	r2, [pc, #224]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b74:	6093      	str	r3, [r2, #8]
										EXTI->IMR &= ~EXTI_IMR_IM6;
 8002b76:	4b36      	ldr	r3, [pc, #216]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a35      	ldr	r2, [pc, #212]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b80:	6013      	str	r3, [r2, #0]
										EXTI->IMR |= EXTI_IMR_IM6;
 8002b82:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a32      	ldr	r2, [pc, #200]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b8c:	6013      	str	r3, [r2, #0]
										NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002b8e:	2017      	movs	r0, #23
 8002b90:	f7fe fdf8 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002b94:	f001 bbd8 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
				else if(&port == (GPIO_TypeDef*)GPIOF)
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	4a31      	ldr	r2, [pc, #196]	@ (8002c64 <GPIO_init_interrupt+0x1378>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d128      	bne.n	8002bf4 <GPIO_init_interrupt+0x1308>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI2_PF;
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	4a29      	ldr	r2, [pc, #164]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002ba8:	f423 63a0 	bic.w	r3, r3, #1280	@ 0x500
 8002bac:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI2_PF;
 8002bae:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4a26      	ldr	r2, [pc, #152]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002bb4:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002bb8:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR6_Msk;
 8002bba:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4a24      	ldr	r2, [pc, #144]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc4:	6093      	str	r3, [r2, #8]
										EXTI->RTSR |= EXTI_RTSR_TR6;
 8002bc6:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4a21      	ldr	r2, [pc, #132]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bd0:	6093      	str	r3, [r2, #8]
										EXTI->IMR &= ~EXTI_IMR_IM6;
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bdc:	6013      	str	r3, [r2, #0]
										EXTI->IMR |= EXTI_IMR_IM6;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002be8:	6013      	str	r3, [r2, #0]
										NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002bea:	2017      	movs	r0, #23
 8002bec:	f7fe fdca 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002bf0:	f001 bbaa 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI2_PG;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a14      	ldr	r2, [pc, #80]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002bfa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bfe:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI2_PG;
 8002c00:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a11      	ldr	r2, [pc, #68]	@ (8002c4c <GPIO_init_interrupt+0x1360>)
 8002c06:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002c0a:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR6_Msk;
 8002c0c:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a0f      	ldr	r2, [pc, #60]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c16:	6093      	str	r3, [r2, #8]
										EXTI->RTSR |= EXTI_RTSR_TR6;
 8002c18:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c22:	6093      	str	r3, [r2, #8]
										EXTI->IMR &= ~EXTI_IMR_IM6;
 8002c24:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c2e:	6013      	str	r3, [r2, #0]
										EXTI->IMR |= EXTI_IMR_IM6;
 8002c30:	4b07      	ldr	r3, [pc, #28]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a06      	ldr	r2, [pc, #24]	@ (8002c50 <GPIO_init_interrupt+0x1364>)
 8002c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c3a:	6013      	str	r3, [r2, #0]
										NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002c3c:	2017      	movs	r0, #23
 8002c3e:	f7fe fda1 	bl	8001784 <__NVIC_EnableIRQ>
			break;
 8002c42:	f001 bb81 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 8002c46:	bf00      	nop
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40013c00 	.word	0x40013c00
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40021400 	.word	0x40021400
			case 7:
				//this is for PA/B/C...0:3
					if(&port == (GPIO_TypeDef*)GPIOA)
 8002c68:	f107 0308 	add.w	r3, r7, #8
 8002c6c:	4a9b      	ldr	r2, [pc, #620]	@ (8002edc <GPIO_init_interrupt+0x15f0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d124      	bne.n	8002cbc <GPIO_init_interrupt+0x13d0>
					{
					SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PA;
 8002c72:	4b9b      	ldr	r3, [pc, #620]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002c74:	4a9a      	ldr	r2, [pc, #616]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60d3      	str	r3, [r2, #12]
					SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PA;
 8002c7a:	4b99      	ldr	r3, [pc, #612]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002c7c:	4a98      	ldr	r2, [pc, #608]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8002c82:	4b98      	ldr	r3, [pc, #608]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	4a97      	ldr	r2, [pc, #604]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c8c:	6093      	str	r3, [r2, #8]
					EXTI->RTSR |= EXTI_RTSR_TR7;
 8002c8e:	4b95      	ldr	r3, [pc, #596]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4a94      	ldr	r2, [pc, #592]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c98:	6093      	str	r3, [r2, #8]
					EXTI->IMR &= ~EXTI_IMR_IM7;
 8002c9a:	4b92      	ldr	r3, [pc, #584]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a91      	ldr	r2, [pc, #580]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ca4:	6013      	str	r3, [r2, #0]
					EXTI->IMR |= EXTI_IMR_IM7;
 8002ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a8e      	ldr	r2, [pc, #568]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb0:	6013      	str	r3, [r2, #0]
					NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002cb2:	2017      	movs	r0, #23
 8002cb4:	f7fe fd66 	bl	8001784 <__NVIC_EnableIRQ>
											EXTI->RTSR |= EXTI_RTSR_TR7;
											EXTI->IMR &= ~EXTI_IMR_IM7;
											EXTI->IMR |= EXTI_IMR_IM7;
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
					}
				break;
 8002cb8:	f001 bb46 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOB)
 8002cbc:	f107 0308 	add.w	r3, r7, #8
 8002cc0:	4a89      	ldr	r2, [pc, #548]	@ (8002ee8 <GPIO_init_interrupt+0x15fc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d128      	bne.n	8002d18 <GPIO_init_interrupt+0x142c>
						SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PB;
 8002cc6:	4b86      	ldr	r3, [pc, #536]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	4a85      	ldr	r2, [pc, #532]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002ccc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cd0:	60d3      	str	r3, [r2, #12]
						SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PB;
 8002cd2:	4b83      	ldr	r3, [pc, #524]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4a82      	ldr	r2, [pc, #520]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002cd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cdc:	60d3      	str	r3, [r2, #12]
						EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8002cde:	4b81      	ldr	r3, [pc, #516]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4a80      	ldr	r2, [pc, #512]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002ce4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ce8:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR7;
 8002cea:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4a7d      	ldr	r2, [pc, #500]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf4:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM7;
 8002cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7a      	ldr	r2, [pc, #488]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d00:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM7;
 8002d02:	4b78      	ldr	r3, [pc, #480]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a77      	ldr	r2, [pc, #476]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d0c:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002d0e:	2017      	movs	r0, #23
 8002d10:	f7fe fd38 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8002d14:	f001 bb18 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOC)
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	4a73      	ldr	r2, [pc, #460]	@ (8002eec <GPIO_init_interrupt+0x1600>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d128      	bne.n	8002d74 <GPIO_init_interrupt+0x1488>
						SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PC;
 8002d22:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002d28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d2c:	60d3      	str	r3, [r2, #12]
						SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PC;
 8002d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4a6b      	ldr	r2, [pc, #428]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002d34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d38:	60d3      	str	r3, [r2, #12]
						EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4a69      	ldr	r2, [pc, #420]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d44:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR7;
 8002d46:	4b67      	ldr	r3, [pc, #412]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	4a66      	ldr	r2, [pc, #408]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d50:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM7;
 8002d52:	4b64      	ldr	r3, [pc, #400]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a63      	ldr	r2, [pc, #396]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d5c:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM7;
 8002d5e:	4b61      	ldr	r3, [pc, #388]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a60      	ldr	r2, [pc, #384]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d68:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002d6a:	2017      	movs	r0, #23
 8002d6c:	f7fe fd0a 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8002d70:	f001 baea 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOD)
 8002d74:	f107 0308 	add.w	r3, r7, #8
 8002d78:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef0 <GPIO_init_interrupt+0x1604>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d128      	bne.n	8002dd0 <GPIO_init_interrupt+0x14e4>
						SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 8002d7e:	4b58      	ldr	r3, [pc, #352]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4a57      	ldr	r2, [pc, #348]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002d84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d88:	60d3      	str	r3, [r2, #12]
						SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PD;
 8002d8a:	4b55      	ldr	r3, [pc, #340]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a54      	ldr	r2, [pc, #336]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002d90:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8002d94:	60d3      	str	r3, [r2, #12]
						EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8002d96:	4b53      	ldr	r3, [pc, #332]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4a52      	ldr	r2, [pc, #328]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da0:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR7;
 8002da2:	4b50      	ldr	r3, [pc, #320]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dac:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM7;
 8002dae:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002db8:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM7;
 8002dba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a49      	ldr	r2, [pc, #292]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dc4:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002dc6:	2017      	movs	r0, #23
 8002dc8:	f7fe fcdc 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8002dcc:	f001 babc 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOE)
 8002dd0:	f107 0308 	add.w	r3, r7, #8
 8002dd4:	4a47      	ldr	r2, [pc, #284]	@ (8002ef4 <GPIO_init_interrupt+0x1608>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d128      	bne.n	8002e2c <GPIO_init_interrupt+0x1540>
						SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PE;
 8002dda:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	4a40      	ldr	r2, [pc, #256]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002de0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002de4:	60d3      	str	r3, [r2, #12]
						SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PE;
 8002de6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df0:	60d3      	str	r3, [r2, #12]
						EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8002df2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dfc:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR7;
 8002dfe:	4b39      	ldr	r3, [pc, #228]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4a38      	ldr	r2, [pc, #224]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e08:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM7;
 8002e0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a35      	ldr	r2, [pc, #212]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e14:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM7;
 8002e16:	4b33      	ldr	r3, [pc, #204]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e20:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002e22:	2017      	movs	r0, #23
 8002e24:	f7fe fcae 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8002e28:	f001 ba8e 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOF)
 8002e2c:	f107 0308 	add.w	r3, r7, #8
 8002e30:	4a31      	ldr	r2, [pc, #196]	@ (8002ef8 <GPIO_init_interrupt+0x160c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d128      	bne.n	8002e88 <GPIO_init_interrupt+0x159c>
						SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PF;
 8002e36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4a29      	ldr	r2, [pc, #164]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002e3c:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8002e40:	60d3      	str	r3, [r2, #12]
						SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PF;
 8002e42:	4b27      	ldr	r3, [pc, #156]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4a26      	ldr	r2, [pc, #152]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002e48:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8002e4c:	60d3      	str	r3, [r2, #12]
						EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8002e4e:	4b25      	ldr	r3, [pc, #148]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4a24      	ldr	r2, [pc, #144]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e58:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR7;
 8002e5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e64:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM7;
 8002e66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e70:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM7;
 8002e72:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e7c:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002e7e:	2017      	movs	r0, #23
 8002e80:	f7fe fc80 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8002e84:	f001 ba60 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR1_EXTI3_PG;
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002e8e:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8002e92:	60d3      	str	r3, [r2, #12]
						SYSCFG->EXTICR[1] |= SYSCFG_EXTICR1_EXTI3_PG;
 8002e94:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a11      	ldr	r2, [pc, #68]	@ (8002ee0 <GPIO_init_interrupt+0x15f4>)
 8002e9a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8002e9e:	60d3      	str	r3, [r2, #12]
						EXTI->RTSR &= ~EXTI_RTSR_TR7_Msk;
 8002ea0:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eaa:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR7;
 8002eac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb6:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM7;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a09      	ldr	r2, [pc, #36]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ec2:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM7;
 8002ec4:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a06      	ldr	r2, [pc, #24]	@ (8002ee4 <GPIO_init_interrupt+0x15f8>)
 8002eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ece:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002ed0:	2017      	movs	r0, #23
 8002ed2:	f7fe fc57 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8002ed6:	f001 ba37 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 8002eda:	bf00      	nop
 8002edc:	40020000 	.word	0x40020000
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	40013c00 	.word	0x40013c00
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	40020800 	.word	0x40020800
 8002ef0:	40020c00 	.word	0x40020c00
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40021400 	.word	0x40021400



			case 8:
				//this is for PA/B/C...0:3
					if(&port == (GPIO_TypeDef*)GPIOA)
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	4a9b      	ldr	r2, [pc, #620]	@ (8003170 <GPIO_init_interrupt+0x1884>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d124      	bne.n	8002f50 <GPIO_init_interrupt+0x1664>
					{
					SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI0_PA;
 8002f06:	4b9b      	ldr	r3, [pc, #620]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002f08:	4a9a      	ldr	r2, [pc, #616]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	6113      	str	r3, [r2, #16]
					SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI0_PA;
 8002f0e:	4b99      	ldr	r3, [pc, #612]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002f10:	4a98      	ldr	r2, [pc, #608]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	6113      	str	r3, [r2, #16]
					EXTI->RTSR &= ~EXTI_RTSR_TR8_Msk;
 8002f16:	4b98      	ldr	r3, [pc, #608]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a97      	ldr	r2, [pc, #604]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f20:	6093      	str	r3, [r2, #8]
					EXTI->RTSR |= EXTI_RTSR_TR8;
 8002f22:	4b95      	ldr	r3, [pc, #596]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4a94      	ldr	r2, [pc, #592]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2c:	6093      	str	r3, [r2, #8]
					EXTI->IMR &= ~EXTI_IMR_IM8;
 8002f2e:	4b92      	ldr	r3, [pc, #584]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a91      	ldr	r2, [pc, #580]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f38:	6013      	str	r3, [r2, #0]
					EXTI->IMR |= EXTI_IMR_IM8;
 8002f3a:	4b8f      	ldr	r3, [pc, #572]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a8e      	ldr	r2, [pc, #568]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f44:	6013      	str	r3, [r2, #0]
					NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002f46:	2017      	movs	r0, #23
 8002f48:	f7fe fc1c 	bl	8001784 <__NVIC_EnableIRQ>
											EXTI->IMR &= ~EXTI_IMR_IM8;
											EXTI->IMR |= EXTI_IMR_IM8;
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel

					}
				break;
 8002f4c:	f001 b9fc 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOB)
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	4a89      	ldr	r2, [pc, #548]	@ (800317c <GPIO_init_interrupt+0x1890>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d128      	bne.n	8002fac <GPIO_init_interrupt+0x16c0>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI0_PB;
 8002f5a:	4b86      	ldr	r3, [pc, #536]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	4a85      	ldr	r2, [pc, #532]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI0_PB;
 8002f66:	4b83      	ldr	r3, [pc, #524]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	4a82      	ldr	r2, [pc, #520]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR8_Msk;
 8002f72:	4b81      	ldr	r3, [pc, #516]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4a80      	ldr	r2, [pc, #512]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f7c:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR8;
 8002f7e:	4b7e      	ldr	r3, [pc, #504]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4a7d      	ldr	r2, [pc, #500]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f88:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM8;
 8002f8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7a      	ldr	r2, [pc, #488]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f94:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM8;
 8002f96:	4b78      	ldr	r3, [pc, #480]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a77      	ldr	r2, [pc, #476]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa0:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002fa2:	2017      	movs	r0, #23
 8002fa4:	f7fe fbee 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8002fa8:	f001 b9ce 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOC)
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	4a73      	ldr	r2, [pc, #460]	@ (8003180 <GPIO_init_interrupt+0x1894>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d128      	bne.n	8003008 <GPIO_init_interrupt+0x171c>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI0_PC;
 8002fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	4a6e      	ldr	r2, [pc, #440]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002fbc:	f023 0302 	bic.w	r3, r3, #2
 8002fc0:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI0_PC;
 8002fc2:	4b6c      	ldr	r3, [pc, #432]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	4a6b      	ldr	r2, [pc, #428]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR8_Msk;
 8002fce:	4b6a      	ldr	r3, [pc, #424]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4a69      	ldr	r2, [pc, #420]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd8:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR8;
 8002fda:	4b67      	ldr	r3, [pc, #412]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4a66      	ldr	r2, [pc, #408]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe4:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM8;
 8002fe6:	4b64      	ldr	r3, [pc, #400]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a63      	ldr	r2, [pc, #396]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff0:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM8;
 8002ff2:	4b61      	ldr	r3, [pc, #388]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a60      	ldr	r2, [pc, #384]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffc:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8002ffe:	2017      	movs	r0, #23
 8003000:	f7fe fbc0 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8003004:	f001 b9a0 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOD)
 8003008:	f107 0308 	add.w	r3, r7, #8
 800300c:	4a5d      	ldr	r2, [pc, #372]	@ (8003184 <GPIO_init_interrupt+0x1898>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d128      	bne.n	8003064 <GPIO_init_interrupt+0x1778>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI0_PD;
 8003012:	4b58      	ldr	r3, [pc, #352]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	4a57      	ldr	r2, [pc, #348]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8003018:	f023 0303 	bic.w	r3, r3, #3
 800301c:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI0_PD;
 800301e:	4b55      	ldr	r3, [pc, #340]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	4a54      	ldr	r2, [pc, #336]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8003024:	f043 0303 	orr.w	r3, r3, #3
 8003028:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR8_Msk;
 800302a:	4b53      	ldr	r3, [pc, #332]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4a52      	ldr	r2, [pc, #328]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003034:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR8;
 8003036:	4b50      	ldr	r3, [pc, #320]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4a4f      	ldr	r2, [pc, #316]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 800303c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003040:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM8;
 8003042:	4b4d      	ldr	r3, [pc, #308]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4c      	ldr	r2, [pc, #304]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800304c:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM8;
 800304e:	4b4a      	ldr	r3, [pc, #296]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a49      	ldr	r2, [pc, #292]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003058:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 800305a:	2017      	movs	r0, #23
 800305c:	f7fe fb92 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8003060:	f001 b972 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOE)
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	4a47      	ldr	r2, [pc, #284]	@ (8003188 <GPIO_init_interrupt+0x189c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d128      	bne.n	80030c0 <GPIO_init_interrupt+0x17d4>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI0_PE;
 800306e:	4b41      	ldr	r3, [pc, #260]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	4a40      	ldr	r2, [pc, #256]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI0_PE;
 800307a:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	4a3d      	ldr	r2, [pc, #244]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR8_Msk;
 8003086:	4b3c      	ldr	r3, [pc, #240]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4a3b      	ldr	r2, [pc, #236]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 800308c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003090:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR8;
 8003092:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4a38      	ldr	r2, [pc, #224]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309c:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM8;
 800309e:	4b36      	ldr	r3, [pc, #216]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a35      	ldr	r2, [pc, #212]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a8:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM8;
 80030aa:	4b33      	ldr	r3, [pc, #204]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a32      	ldr	r2, [pc, #200]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 80030b6:	2017      	movs	r0, #23
 80030b8:	f7fe fb64 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 80030bc:	f001 b944 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOF)
 80030c0:	f107 0308 	add.w	r3, r7, #8
 80030c4:	4a31      	ldr	r2, [pc, #196]	@ (800318c <GPIO_init_interrupt+0x18a0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d128      	bne.n	800311c <GPIO_init_interrupt+0x1830>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI0_PF;
 80030ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	4a29      	ldr	r2, [pc, #164]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 80030d0:	f023 0305 	bic.w	r3, r3, #5
 80030d4:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI0_PF;
 80030d6:	4b27      	ldr	r3, [pc, #156]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	4a26      	ldr	r2, [pc, #152]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 80030dc:	f043 0305 	orr.w	r3, r3, #5
 80030e0:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR8_Msk;
 80030e2:	4b25      	ldr	r3, [pc, #148]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	4a24      	ldr	r2, [pc, #144]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030ec:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR8;
 80030ee:	4b22      	ldr	r3, [pc, #136]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4a21      	ldr	r2, [pc, #132]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f8:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM8;
 80030fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003104:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM8;
 8003106:	4b1c      	ldr	r3, [pc, #112]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1b      	ldr	r2, [pc, #108]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003110:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8003112:	2017      	movs	r0, #23
 8003114:	f7fe fb36 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8003118:	f001 b916 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI0_PG;
 800311c:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	4a14      	ldr	r2, [pc, #80]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 8003122:	f023 0306 	bic.w	r3, r3, #6
 8003126:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI0_PG;
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	4a11      	ldr	r2, [pc, #68]	@ (8003174 <GPIO_init_interrupt+0x1888>)
 800312e:	f043 0306 	orr.w	r3, r3, #6
 8003132:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR8_Msk;
 8003134:	4b10      	ldr	r3, [pc, #64]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a0f      	ldr	r2, [pc, #60]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 800313a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800313e:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR8;
 8003140:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a0c      	ldr	r2, [pc, #48]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314a:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM8;
 800314c:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a09      	ldr	r2, [pc, #36]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 8003152:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003156:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM8;
 8003158:	4b07      	ldr	r3, [pc, #28]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a06      	ldr	r2, [pc, #24]	@ (8003178 <GPIO_init_interrupt+0x188c>)
 800315e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003162:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8003164:	2017      	movs	r0, #23
 8003166:	f7fe fb0d 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 800316a:	f001 b8ed 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 800316e:	bf00      	nop
 8003170:	40020000 	.word	0x40020000
 8003174:	40013800 	.word	0x40013800
 8003178:	40013c00 	.word	0x40013c00
 800317c:	40020400 	.word	0x40020400
 8003180:	40020800 	.word	0x40020800
 8003184:	40020c00 	.word	0x40020c00
 8003188:	40021000 	.word	0x40021000
 800318c:	40021400 	.word	0x40021400
				case 9:
				//this is for PA/B/C...0:3
					if(&port == (GPIO_TypeDef*)GPIOA)
 8003190:	f107 0308 	add.w	r3, r7, #8
 8003194:	4a9b      	ldr	r2, [pc, #620]	@ (8003404 <GPIO_init_interrupt+0x1b18>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d124      	bne.n	80031e4 <GPIO_init_interrupt+0x18f8>
					{
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI1_PA;
 800319a:	4b9b      	ldr	r3, [pc, #620]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 800319c:	4a9a      	ldr	r2, [pc, #616]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI1_PA;
 80031a2:	4b99      	ldr	r3, [pc, #612]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80031a4:	4a98      	ldr	r2, [pc, #608]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR9_Msk;
 80031aa:	4b98      	ldr	r3, [pc, #608]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4a97      	ldr	r2, [pc, #604]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80031b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031b4:	6093      	str	r3, [r2, #8]
						EXTI->RTSR |= EXTI_RTSR_TR9;
 80031b6:	4b95      	ldr	r3, [pc, #596]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a94      	ldr	r2, [pc, #592]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80031bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031c0:	6093      	str	r3, [r2, #8]
						EXTI->IMR &= ~EXTI_IMR_IM9;
 80031c2:	4b92      	ldr	r3, [pc, #584]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a91      	ldr	r2, [pc, #580]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80031c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031cc:	6013      	str	r3, [r2, #0]
						EXTI->IMR |= EXTI_IMR_IM9;
 80031ce:	4b8f      	ldr	r3, [pc, #572]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a8e      	ldr	r2, [pc, #568]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80031d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031d8:	6013      	str	r3, [r2, #0]
						NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 80031da:	2017      	movs	r0, #23
 80031dc:	f7fe fad2 	bl	8001784 <__NVIC_EnableIRQ>
											EXTI->IMR &= ~EXTI_IMR_IM9;
											EXTI->IMR |= EXTI_IMR_IM9;
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel

					}
				break;
 80031e0:	f001 b8b2 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOB)
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	4a89      	ldr	r2, [pc, #548]	@ (8003410 <GPIO_init_interrupt+0x1b24>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d128      	bne.n	8003240 <GPIO_init_interrupt+0x1954>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI1_PB;
 80031ee:	4b86      	ldr	r3, [pc, #536]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	4a85      	ldr	r2, [pc, #532]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80031f4:	f023 0310 	bic.w	r3, r3, #16
 80031f8:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI1_PB;
 80031fa:	4b83      	ldr	r3, [pc, #524]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	4a82      	ldr	r2, [pc, #520]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003200:	f043 0310 	orr.w	r3, r3, #16
 8003204:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR9_Msk;
 8003206:	4b81      	ldr	r3, [pc, #516]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4a80      	ldr	r2, [pc, #512]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 800320c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003210:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR9;
 8003212:	4b7e      	ldr	r3, [pc, #504]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4a7d      	ldr	r2, [pc, #500]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003218:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800321c:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM9;
 800321e:	4b7b      	ldr	r3, [pc, #492]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7a      	ldr	r2, [pc, #488]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003228:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM9;
 800322a:	4b78      	ldr	r3, [pc, #480]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a77      	ldr	r2, [pc, #476]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003230:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003234:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8003236:	2017      	movs	r0, #23
 8003238:	f7fe faa4 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 800323c:	f001 b884 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOC)
 8003240:	f107 0308 	add.w	r3, r7, #8
 8003244:	4a73      	ldr	r2, [pc, #460]	@ (8003414 <GPIO_init_interrupt+0x1b28>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d128      	bne.n	800329c <GPIO_init_interrupt+0x19b0>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI1_PC;
 800324a:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	4a6e      	ldr	r2, [pc, #440]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003250:	f023 0320 	bic.w	r3, r3, #32
 8003254:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI1_PC;
 8003256:	4b6c      	ldr	r3, [pc, #432]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	4a6b      	ldr	r2, [pc, #428]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 800325c:	f043 0320 	orr.w	r3, r3, #32
 8003260:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR9_Msk;
 8003262:	4b6a      	ldr	r3, [pc, #424]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4a69      	ldr	r2, [pc, #420]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800326c:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR9;
 800326e:	4b67      	ldr	r3, [pc, #412]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4a66      	ldr	r2, [pc, #408]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003274:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003278:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM9;
 800327a:	4b64      	ldr	r3, [pc, #400]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a63      	ldr	r2, [pc, #396]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003284:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM9;
 8003286:	4b61      	ldr	r3, [pc, #388]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a60      	ldr	r2, [pc, #384]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 800328c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003290:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 8003292:	2017      	movs	r0, #23
 8003294:	f7fe fa76 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8003298:	f001 b856 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOD)
 800329c:	f107 0308 	add.w	r3, r7, #8
 80032a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003418 <GPIO_init_interrupt+0x1b2c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d128      	bne.n	80032f8 <GPIO_init_interrupt+0x1a0c>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI1_PD;
 80032a6:	4b58      	ldr	r3, [pc, #352]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	4a57      	ldr	r2, [pc, #348]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80032ac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80032b0:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI1_PD;
 80032b2:	4b55      	ldr	r3, [pc, #340]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4a54      	ldr	r2, [pc, #336]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80032b8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80032bc:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR9_Msk;
 80032be:	4b53      	ldr	r3, [pc, #332]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	4a52      	ldr	r2, [pc, #328]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80032c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032c8:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR9;
 80032ca:	4b50      	ldr	r3, [pc, #320]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4a4f      	ldr	r2, [pc, #316]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80032d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d4:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM9;
 80032d6:	4b4d      	ldr	r3, [pc, #308]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4c      	ldr	r2, [pc, #304]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80032dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032e0:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM9;
 80032e2:	4b4a      	ldr	r3, [pc, #296]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a49      	ldr	r2, [pc, #292]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80032e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ec:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 80032ee:	2017      	movs	r0, #23
 80032f0:	f7fe fa48 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 80032f4:	f001 b828 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOE)
 80032f8:	f107 0308 	add.w	r3, r7, #8
 80032fc:	4a47      	ldr	r2, [pc, #284]	@ (800341c <GPIO_init_interrupt+0x1b30>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d128      	bne.n	8003354 <GPIO_init_interrupt+0x1a68>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI1_PE;
 8003302:	4b41      	ldr	r3, [pc, #260]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	4a40      	ldr	r2, [pc, #256]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800330c:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI1_PE;
 800330e:	4b3e      	ldr	r3, [pc, #248]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	4a3d      	ldr	r2, [pc, #244]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003318:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR9_Msk;
 800331a:	4b3c      	ldr	r3, [pc, #240]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4a3b      	ldr	r2, [pc, #236]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003324:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR9;
 8003326:	4b39      	ldr	r3, [pc, #228]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4a38      	ldr	r2, [pc, #224]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 800332c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003330:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM9;
 8003332:	4b36      	ldr	r3, [pc, #216]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a35      	ldr	r2, [pc, #212]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800333c:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM9;
 800333e:	4b33      	ldr	r3, [pc, #204]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a32      	ldr	r2, [pc, #200]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003344:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003348:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 800334a:	2017      	movs	r0, #23
 800334c:	f7fe fa1a 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8003350:	f000 bffa 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOF)
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	4a31      	ldr	r2, [pc, #196]	@ (8003420 <GPIO_init_interrupt+0x1b34>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d128      	bne.n	80033b0 <GPIO_init_interrupt+0x1ac4>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI1_PF;
 800335e:	4b2a      	ldr	r3, [pc, #168]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	4a29      	ldr	r2, [pc, #164]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003364:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8003368:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI1_PF;
 800336a:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	4a26      	ldr	r2, [pc, #152]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 8003370:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003374:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR9_Msk;
 8003376:	4b25      	ldr	r3, [pc, #148]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	4a24      	ldr	r2, [pc, #144]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 800337c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003380:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR9;
 8003382:	4b22      	ldr	r3, [pc, #136]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4a21      	ldr	r2, [pc, #132]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003388:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800338c:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM9;
 800338e:	4b1f      	ldr	r3, [pc, #124]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1e      	ldr	r2, [pc, #120]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 8003394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003398:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM9;
 800339a:	4b1c      	ldr	r3, [pc, #112]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033a4:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 80033a6:	2017      	movs	r0, #23
 80033a8:	f7fe f9ec 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 80033ac:	f000 bfcc 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI1_PG;
 80033b0:	4b15      	ldr	r3, [pc, #84]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80033b6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80033ba:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI1_PG;
 80033bc:	4b12      	ldr	r3, [pc, #72]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	4a11      	ldr	r2, [pc, #68]	@ (8003408 <GPIO_init_interrupt+0x1b1c>)
 80033c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033c6:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR9_Msk;
 80033c8:	4b10      	ldr	r3, [pc, #64]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a0f      	ldr	r2, [pc, #60]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033ce:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033d2:	6093      	str	r3, [r2, #8]
											EXTI->RTSR |= EXTI_RTSR_TR9;
 80033d4:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033de:	6093      	str	r3, [r2, #8]
											EXTI->IMR &= ~EXTI_IMR_IM9;
 80033e0:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a09      	ldr	r2, [pc, #36]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033e6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033ea:	6013      	str	r3, [r2, #0]
											EXTI->IMR |= EXTI_IMR_IM9;
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a06      	ldr	r2, [pc, #24]	@ (800340c <GPIO_init_interrupt+0x1b20>)
 80033f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033f6:	6013      	str	r3, [r2, #0]
											NVIC_EnableIRQ(EXTI9_5_IRQn); //enable interrupt channel
 80033f8:	2017      	movs	r0, #23
 80033fa:	f7fe f9c3 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 80033fe:	f000 bfa3 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 8003402:	bf00      	nop
 8003404:	40020000 	.word	0x40020000
 8003408:	40013800 	.word	0x40013800
 800340c:	40013c00 	.word	0x40013c00
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40021400 	.word	0x40021400
				case 10:
				//this is for PA/B/C...0:3
					if(&port == (GPIO_TypeDef*)GPIOA)
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	4a9b      	ldr	r2, [pc, #620]	@ (8003698 <GPIO_init_interrupt+0x1dac>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d124      	bne.n	8003478 <GPIO_init_interrupt+0x1b8c>
					{
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI2_PA;
 800342e:	4b9b      	ldr	r3, [pc, #620]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003430:	4a9a      	ldr	r2, [pc, #616]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI2_PA;
 8003436:	4b99      	ldr	r3, [pc, #612]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003438:	4a98      	ldr	r2, [pc, #608]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR10_Msk;
 800343e:	4b98      	ldr	r3, [pc, #608]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4a97      	ldr	r2, [pc, #604]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003444:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003448:	6093      	str	r3, [r2, #8]
						EXTI->RTSR |= EXTI_RTSR_TR10;
 800344a:	4b95      	ldr	r3, [pc, #596]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	4a94      	ldr	r2, [pc, #592]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003450:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003454:	6093      	str	r3, [r2, #8]
						EXTI->IMR &= ~EXTI_IMR_IM10;
 8003456:	4b92      	ldr	r3, [pc, #584]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a91      	ldr	r2, [pc, #580]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800345c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003460:	6013      	str	r3, [r2, #0]
						EXTI->IMR |= EXTI_IMR_IM10;
 8003462:	4b8f      	ldr	r3, [pc, #572]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a8e      	ldr	r2, [pc, #568]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003468:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800346c:	6013      	str	r3, [r2, #0]
						NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 800346e:	2028      	movs	r0, #40	@ 0x28
 8003470:	f7fe f988 	bl	8001784 <__NVIC_EnableIRQ>
												EXTI->IMR &= ~EXTI_IMR_IM10;
												EXTI->IMR |= EXTI_IMR_IM10;
												NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel

					}
				break;
 8003474:	f000 bf68 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOB)
 8003478:	f107 0308 	add.w	r3, r7, #8
 800347c:	4a89      	ldr	r2, [pc, #548]	@ (80036a4 <GPIO_init_interrupt+0x1db8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d128      	bne.n	80034d4 <GPIO_init_interrupt+0x1be8>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI2_PB;
 8003482:	4b86      	ldr	r3, [pc, #536]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	4a85      	ldr	r2, [pc, #532]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800348c:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI2_PB;
 800348e:	4b83      	ldr	r3, [pc, #524]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4a82      	ldr	r2, [pc, #520]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003498:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR10_Msk;
 800349a:	4b81      	ldr	r3, [pc, #516]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4a80      	ldr	r2, [pc, #512]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034a4:	6093      	str	r3, [r2, #8]
												EXTI->RTSR |= EXTI_RTSR_TR10;
 80034a6:	4b7e      	ldr	r3, [pc, #504]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	4a7d      	ldr	r2, [pc, #500]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034b0:	6093      	str	r3, [r2, #8]
												EXTI->IMR &= ~EXTI_IMR_IM10;
 80034b2:	4b7b      	ldr	r3, [pc, #492]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7a      	ldr	r2, [pc, #488]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034bc:	6013      	str	r3, [r2, #0]
												EXTI->IMR |= EXTI_IMR_IM10;
 80034be:	4b78      	ldr	r3, [pc, #480]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a77      	ldr	r2, [pc, #476]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034c8:	6013      	str	r3, [r2, #0]
												NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 80034ca:	2028      	movs	r0, #40	@ 0x28
 80034cc:	f7fe f95a 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 80034d0:	f000 bf3a 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOC)
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	4a73      	ldr	r2, [pc, #460]	@ (80036a8 <GPIO_init_interrupt+0x1dbc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d128      	bne.n	8003530 <GPIO_init_interrupt+0x1c44>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI2_PC;
 80034de:	4b6f      	ldr	r3, [pc, #444]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	4a6e      	ldr	r2, [pc, #440]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 80034e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034e8:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI2_PC;
 80034ea:	4b6c      	ldr	r3, [pc, #432]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	4a6b      	ldr	r2, [pc, #428]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 80034f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034f4:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR10_Msk;
 80034f6:	4b6a      	ldr	r3, [pc, #424]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	4a69      	ldr	r2, [pc, #420]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80034fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003500:	6093      	str	r3, [r2, #8]
												EXTI->RTSR |= EXTI_RTSR_TR10;
 8003502:	4b67      	ldr	r3, [pc, #412]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a66      	ldr	r2, [pc, #408]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003508:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800350c:	6093      	str	r3, [r2, #8]
												EXTI->IMR &= ~EXTI_IMR_IM10;
 800350e:	4b64      	ldr	r3, [pc, #400]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a63      	ldr	r2, [pc, #396]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003518:	6013      	str	r3, [r2, #0]
												EXTI->IMR |= EXTI_IMR_IM10;
 800351a:	4b61      	ldr	r3, [pc, #388]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a60      	ldr	r2, [pc, #384]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003520:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003524:	6013      	str	r3, [r2, #0]
												NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003526:	2028      	movs	r0, #40	@ 0x28
 8003528:	f7fe f92c 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 800352c:	f000 bf0c 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOD)
 8003530:	f107 0308 	add.w	r3, r7, #8
 8003534:	4a5d      	ldr	r2, [pc, #372]	@ (80036ac <GPIO_init_interrupt+0x1dc0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d128      	bne.n	800358c <GPIO_init_interrupt+0x1ca0>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI2_PD;
 800353a:	4b58      	ldr	r3, [pc, #352]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	4a57      	ldr	r2, [pc, #348]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003544:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI2_PD;
 8003546:	4b55      	ldr	r3, [pc, #340]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	4a54      	ldr	r2, [pc, #336]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 800354c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003550:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR10_Msk;
 8003552:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	4a52      	ldr	r2, [pc, #328]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003558:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800355c:	6093      	str	r3, [r2, #8]
												EXTI->RTSR |= EXTI_RTSR_TR10;
 800355e:	4b50      	ldr	r3, [pc, #320]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4a4f      	ldr	r2, [pc, #316]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003564:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003568:	6093      	str	r3, [r2, #8]
												EXTI->IMR &= ~EXTI_IMR_IM10;
 800356a:	4b4d      	ldr	r3, [pc, #308]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a4c      	ldr	r2, [pc, #304]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003574:	6013      	str	r3, [r2, #0]
												EXTI->IMR |= EXTI_IMR_IM10;
 8003576:	4b4a      	ldr	r3, [pc, #296]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a49      	ldr	r2, [pc, #292]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800357c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003580:	6013      	str	r3, [r2, #0]
												NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003582:	2028      	movs	r0, #40	@ 0x28
 8003584:	f7fe f8fe 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8003588:	f000 bede 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOE)
 800358c:	f107 0308 	add.w	r3, r7, #8
 8003590:	4a47      	ldr	r2, [pc, #284]	@ (80036b0 <GPIO_init_interrupt+0x1dc4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d128      	bne.n	80035e8 <GPIO_init_interrupt+0x1cfc>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI2_PE;
 8003596:	4b41      	ldr	r3, [pc, #260]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	4a40      	ldr	r2, [pc, #256]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 800359c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035a0:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI2_PE;
 80035a2:	4b3e      	ldr	r3, [pc, #248]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	4a3d      	ldr	r2, [pc, #244]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 80035a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ac:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR10_Msk;
 80035ae:	4b3c      	ldr	r3, [pc, #240]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4a3b      	ldr	r2, [pc, #236]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80035b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035b8:	6093      	str	r3, [r2, #8]
												EXTI->RTSR |= EXTI_RTSR_TR10;
 80035ba:	4b39      	ldr	r3, [pc, #228]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	4a38      	ldr	r2, [pc, #224]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80035c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035c4:	6093      	str	r3, [r2, #8]
												EXTI->IMR &= ~EXTI_IMR_IM10;
 80035c6:	4b36      	ldr	r3, [pc, #216]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a35      	ldr	r2, [pc, #212]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80035cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035d0:	6013      	str	r3, [r2, #0]
												EXTI->IMR |= EXTI_IMR_IM10;
 80035d2:	4b33      	ldr	r3, [pc, #204]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a32      	ldr	r2, [pc, #200]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 80035d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035dc:	6013      	str	r3, [r2, #0]
												NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 80035de:	2028      	movs	r0, #40	@ 0x28
 80035e0:	f7fe f8d0 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 80035e4:	f000 beb0 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
					else if(&port == (GPIO_TypeDef*)GPIOF)
 80035e8:	f107 0308 	add.w	r3, r7, #8
 80035ec:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <GPIO_init_interrupt+0x1dc8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d128      	bne.n	8003644 <GPIO_init_interrupt+0x1d58>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI2_PF;
 80035f2:	4b2a      	ldr	r3, [pc, #168]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	4a29      	ldr	r2, [pc, #164]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 80035f8:	f423 63a0 	bic.w	r3, r3, #1280	@ 0x500
 80035fc:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI2_PF;
 80035fe:	4b27      	ldr	r3, [pc, #156]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	4a26      	ldr	r2, [pc, #152]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003604:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003608:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR10_Msk;
 800360a:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	4a24      	ldr	r2, [pc, #144]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003610:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003614:	6093      	str	r3, [r2, #8]
												EXTI->RTSR |= EXTI_RTSR_TR10;
 8003616:	4b22      	ldr	r3, [pc, #136]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	4a21      	ldr	r2, [pc, #132]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800361c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003620:	6093      	str	r3, [r2, #8]
												EXTI->IMR &= ~EXTI_IMR_IM10;
 8003622:	4b1f      	ldr	r3, [pc, #124]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1e      	ldr	r2, [pc, #120]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003628:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800362c:	6013      	str	r3, [r2, #0]
												EXTI->IMR |= EXTI_IMR_IM10;
 800362e:	4b1c      	ldr	r3, [pc, #112]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1b      	ldr	r2, [pc, #108]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003634:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003638:	6013      	str	r3, [r2, #0]
												NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 800363a:	2028      	movs	r0, #40	@ 0x28
 800363c:	f7fe f8a2 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8003640:	f000 be82 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI2_PG;
 8003644:	4b15      	ldr	r3, [pc, #84]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	4a14      	ldr	r2, [pc, #80]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 800364a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800364e:	6113      	str	r3, [r2, #16]
						SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI2_PG;
 8003650:	4b12      	ldr	r3, [pc, #72]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a11      	ldr	r2, [pc, #68]	@ (800369c <GPIO_init_interrupt+0x1db0>)
 8003656:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800365a:	6113      	str	r3, [r2, #16]
						EXTI->RTSR &= ~EXTI_RTSR_TR10_Msk;
 800365c:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a0f      	ldr	r2, [pc, #60]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003662:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003666:	6093      	str	r3, [r2, #8]
												EXTI->RTSR |= EXTI_RTSR_TR10;
 8003668:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a0c      	ldr	r2, [pc, #48]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800366e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003672:	6093      	str	r3, [r2, #8]
												EXTI->IMR &= ~EXTI_IMR_IM10;
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a09      	ldr	r2, [pc, #36]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 800367a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800367e:	6013      	str	r3, [r2, #0]
												EXTI->IMR |= EXTI_IMR_IM10;
 8003680:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a06      	ldr	r2, [pc, #24]	@ (80036a0 <GPIO_init_interrupt+0x1db4>)
 8003686:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800368a:	6013      	str	r3, [r2, #0]
												NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 800368c:	2028      	movs	r0, #40	@ 0x28
 800368e:	f7fe f879 	bl	8001784 <__NVIC_EnableIRQ>
				break;
 8003692:	f000 be59 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 8003696:	bf00      	nop
 8003698:	40020000 	.word	0x40020000
 800369c:	40013800 	.word	0x40013800
 80036a0:	40013c00 	.word	0x40013c00
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40021400 	.word	0x40021400
				case 11:
					//this is for PA/B/C...0:3
						if(&port == (GPIO_TypeDef*)GPIOA)
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4a9b      	ldr	r2, [pc, #620]	@ (800392c <GPIO_init_interrupt+0x2040>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d124      	bne.n	800370c <GPIO_init_interrupt+0x1e20>
						{
							SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI3_PA;
 80036c2:	4b9b      	ldr	r3, [pc, #620]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80036c4:	4a9a      	ldr	r2, [pc, #616]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	6113      	str	r3, [r2, #16]
							SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI3_PA;
 80036ca:	4b99      	ldr	r3, [pc, #612]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80036cc:	4a98      	ldr	r2, [pc, #608]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	6113      	str	r3, [r2, #16]
							EXTI->RTSR &= ~EXTI_RTSR_TR11_Msk;
 80036d2:	4b98      	ldr	r3, [pc, #608]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4a97      	ldr	r2, [pc, #604]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80036d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036dc:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR11;
 80036de:	4b95      	ldr	r3, [pc, #596]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4a94      	ldr	r2, [pc, #592]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80036e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036e8:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM11;
 80036ea:	4b92      	ldr	r3, [pc, #584]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a91      	ldr	r2, [pc, #580]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80036f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036f4:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM11;
 80036f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a8e      	ldr	r2, [pc, #568]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80036fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003700:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003702:	2028      	movs	r0, #40	@ 0x28
 8003704:	f7fe f83e 	bl	8001784 <__NVIC_EnableIRQ>
														EXTI->IMR &= ~EXTI_IMR_IM11;
														EXTI->IMR |= EXTI_IMR_IM11;
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel

						}
					break;
 8003708:	f000 be1e 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOB)
 800370c:	f107 0308 	add.w	r3, r7, #8
 8003710:	4a89      	ldr	r2, [pc, #548]	@ (8003938 <GPIO_init_interrupt+0x204c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d128      	bne.n	8003768 <GPIO_init_interrupt+0x1e7c>
							SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI3_PB;
 8003716:	4b86      	ldr	r3, [pc, #536]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	4a85      	ldr	r2, [pc, #532]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 800371c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003720:	6113      	str	r3, [r2, #16]
							SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI3_PB;
 8003722:	4b83      	ldr	r3, [pc, #524]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	4a82      	ldr	r2, [pc, #520]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003728:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800372c:	6113      	str	r3, [r2, #16]
							EXTI->RTSR &= ~EXTI_RTSR_TR11_Msk;
 800372e:	4b81      	ldr	r3, [pc, #516]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4a80      	ldr	r2, [pc, #512]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003734:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003738:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR11;
 800373a:	4b7e      	ldr	r3, [pc, #504]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	4a7d      	ldr	r2, [pc, #500]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003740:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003744:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM11;
 8003746:	4b7b      	ldr	r3, [pc, #492]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a7a      	ldr	r2, [pc, #488]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800374c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003750:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM11;
 8003752:	4b78      	ldr	r3, [pc, #480]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a77      	ldr	r2, [pc, #476]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003758:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800375c:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 800375e:	2028      	movs	r0, #40	@ 0x28
 8003760:	f7fe f810 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003764:	f000 bdf0 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOC)
 8003768:	f107 0308 	add.w	r3, r7, #8
 800376c:	4a73      	ldr	r2, [pc, #460]	@ (800393c <GPIO_init_interrupt+0x2050>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d128      	bne.n	80037c4 <GPIO_init_interrupt+0x1ed8>
							SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI3_PC;
 8003772:	4b6f      	ldr	r3, [pc, #444]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	4a6e      	ldr	r2, [pc, #440]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800377c:	6113      	str	r3, [r2, #16]
							SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI3_PC;
 800377e:	4b6c      	ldr	r3, [pc, #432]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	4a6b      	ldr	r2, [pc, #428]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003784:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003788:	6113      	str	r3, [r2, #16]
							EXTI->RTSR &= ~EXTI_RTSR_TR11_Msk;
 800378a:	4b6a      	ldr	r3, [pc, #424]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4a69      	ldr	r2, [pc, #420]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003794:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR11;
 8003796:	4b67      	ldr	r3, [pc, #412]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4a66      	ldr	r2, [pc, #408]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800379c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037a0:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM11;
 80037a2:	4b64      	ldr	r3, [pc, #400]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a63      	ldr	r2, [pc, #396]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80037a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037ac:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM11;
 80037ae:	4b61      	ldr	r3, [pc, #388]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a60      	ldr	r2, [pc, #384]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80037b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037b8:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 80037ba:	2028      	movs	r0, #40	@ 0x28
 80037bc:	f7fd ffe2 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 80037c0:	f000 bdc2 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOD)
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003940 <GPIO_init_interrupt+0x2054>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d128      	bne.n	8003820 <GPIO_init_interrupt+0x1f34>
							SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 80037ce:	4b58      	ldr	r3, [pc, #352]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4a57      	ldr	r2, [pc, #348]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80037d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037d8:	6113      	str	r3, [r2, #16]
							SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI3_PD;
 80037da:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	4a54      	ldr	r2, [pc, #336]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80037e0:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80037e4:	6113      	str	r3, [r2, #16]
							EXTI->RTSR &= ~EXTI_RTSR_TR11_Msk;
 80037e6:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4a52      	ldr	r2, [pc, #328]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80037ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037f0:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR11;
 80037f2:	4b50      	ldr	r3, [pc, #320]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80037f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037fc:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM11;
 80037fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a4c      	ldr	r2, [pc, #304]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003808:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM11;
 800380a:	4b4a      	ldr	r3, [pc, #296]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a49      	ldr	r2, [pc, #292]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003810:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003814:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003816:	2028      	movs	r0, #40	@ 0x28
 8003818:	f7fd ffb4 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 800381c:	f000 bd94 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOE)
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	4a47      	ldr	r2, [pc, #284]	@ (8003944 <GPIO_init_interrupt+0x2058>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d128      	bne.n	800387c <GPIO_init_interrupt+0x1f90>
							SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI3_PE;
 800382a:	4b41      	ldr	r3, [pc, #260]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	4a40      	ldr	r2, [pc, #256]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003830:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003834:	6113      	str	r3, [r2, #16]
							SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI3_PE;
 8003836:	4b3e      	ldr	r3, [pc, #248]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	4a3d      	ldr	r2, [pc, #244]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 800383c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003840:	6113      	str	r3, [r2, #16]
							EXTI->RTSR &= ~EXTI_RTSR_TR11_Msk;
 8003842:	4b3c      	ldr	r3, [pc, #240]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	4a3b      	ldr	r2, [pc, #236]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003848:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800384c:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR11;
 800384e:	4b39      	ldr	r3, [pc, #228]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4a38      	ldr	r2, [pc, #224]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003854:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003858:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM11;
 800385a:	4b36      	ldr	r3, [pc, #216]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a35      	ldr	r2, [pc, #212]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003860:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003864:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM11;
 8003866:	4b33      	ldr	r3, [pc, #204]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a32      	ldr	r2, [pc, #200]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800386c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003870:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003872:	2028      	movs	r0, #40	@ 0x28
 8003874:	f7fd ff86 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003878:	f000 bd66 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOF)
 800387c:	f107 0308 	add.w	r3, r7, #8
 8003880:	4a31      	ldr	r2, [pc, #196]	@ (8003948 <GPIO_init_interrupt+0x205c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d128      	bne.n	80038d8 <GPIO_init_interrupt+0x1fec>
							SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI3_PF;
 8003886:	4b2a      	ldr	r3, [pc, #168]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	4a29      	ldr	r2, [pc, #164]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 800388c:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8003890:	6113      	str	r3, [r2, #16]
							SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI3_PF;
 8003892:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 8003898:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 800389c:	6113      	str	r3, [r2, #16]
							EXTI->RTSR &= ~EXTI_RTSR_TR11_Msk;
 800389e:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038a8:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR11;
 80038aa:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	4a21      	ldr	r2, [pc, #132]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038b4:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM11;
 80038b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038c0:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM11;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038cc:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 80038ce:	2028      	movs	r0, #40	@ 0x28
 80038d0:	f7fd ff58 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 80038d4:	f000 bd38 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
							SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR1_EXTI3_PG;
 80038d8:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	4a14      	ldr	r2, [pc, #80]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80038de:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80038e2:	6113      	str	r3, [r2, #16]
							SYSCFG->EXTICR[2] |= SYSCFG_EXTICR1_EXTI3_PG;
 80038e4:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	4a11      	ldr	r2, [pc, #68]	@ (8003930 <GPIO_init_interrupt+0x2044>)
 80038ea:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80038ee:	6113      	str	r3, [r2, #16]
							EXTI->RTSR &= ~EXTI_RTSR_TR11_Msk;
 80038f0:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038fa:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR11;
 80038fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a0c      	ldr	r2, [pc, #48]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003902:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003906:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM11;
 8003908:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a09      	ldr	r2, [pc, #36]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800390e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003912:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM11;
 8003914:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a06      	ldr	r2, [pc, #24]	@ (8003934 <GPIO_init_interrupt+0x2048>)
 800391a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800391e:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003920:	2028      	movs	r0, #40	@ 0x28
 8003922:	f7fd ff2f 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003926:	f000 bd0f 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
 800392a:	bf00      	nop
 800392c:	40020000 	.word	0x40020000
 8003930:	40013800 	.word	0x40013800
 8003934:	40013c00 	.word	0x40013c00
 8003938:	40020400 	.word	0x40020400
 800393c:	40020800 	.word	0x40020800
 8003940:	40020c00 	.word	0x40020c00
 8003944:	40021000 	.word	0x40021000
 8003948:	40021400 	.word	0x40021400



				case 12:
					//this is for PA/B/C...0:3
						if(&port == (GPIO_TypeDef*)GPIOA)
 800394c:	f107 0308 	add.w	r3, r7, #8
 8003950:	4a9a      	ldr	r2, [pc, #616]	@ (8003bbc <GPIO_init_interrupt+0x22d0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d124      	bne.n	80039a0 <GPIO_init_interrupt+0x20b4>
						{
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI0_PA;
 8003956:	4b9a      	ldr	r3, [pc, #616]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003958:	4a99      	ldr	r2, [pc, #612]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI0_PA;
 800395e:	4b98      	ldr	r3, [pc, #608]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003960:	4a97      	ldr	r2, [pc, #604]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR12_Msk;
 8003966:	4b97      	ldr	r3, [pc, #604]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4a96      	ldr	r2, [pc, #600]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 800396c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003970:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR12;
 8003972:	4b94      	ldr	r3, [pc, #592]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4a93      	ldr	r2, [pc, #588]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003978:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800397c:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM12;
 800397e:	4b91      	ldr	r3, [pc, #580]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a90      	ldr	r2, [pc, #576]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003984:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003988:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM12;
 800398a:	4b8e      	ldr	r3, [pc, #568]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a8d      	ldr	r2, [pc, #564]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003990:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003994:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003996:	2028      	movs	r0, #40	@ 0x28
 8003998:	f7fd fef4 	bl	8001784 <__NVIC_EnableIRQ>
														EXTI->IMR &= ~EXTI_IMR_IM12;
														EXTI->IMR |= EXTI_IMR_IM12;
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel

						}
					break;
 800399c:	f000 bcd4 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOB)
 80039a0:	f107 0308 	add.w	r3, r7, #8
 80039a4:	4a88      	ldr	r2, [pc, #544]	@ (8003bc8 <GPIO_init_interrupt+0x22dc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d128      	bne.n	80039fc <GPIO_init_interrupt+0x2110>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI0_PB;
 80039aa:	4b85      	ldr	r3, [pc, #532]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4a84      	ldr	r2, [pc, #528]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI0_PB;
 80039b6:	4b82      	ldr	r3, [pc, #520]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	4a81      	ldr	r2, [pc, #516]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR12_Msk;
 80039c2:	4b80      	ldr	r3, [pc, #512]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4a7f      	ldr	r2, [pc, #508]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 80039c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039cc:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR12;
 80039ce:	4b7d      	ldr	r3, [pc, #500]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 80039d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039d8:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM12;
 80039da:	4b7a      	ldr	r3, [pc, #488]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a79      	ldr	r2, [pc, #484]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 80039e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039e4:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM12;
 80039e6:	4b77      	ldr	r3, [pc, #476]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a76      	ldr	r2, [pc, #472]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 80039ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039f0:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 80039f2:	2028      	movs	r0, #40	@ 0x28
 80039f4:	f7fd fec6 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 80039f8:	f000 bca6 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOC)
 80039fc:	f107 0308 	add.w	r3, r7, #8
 8003a00:	4a72      	ldr	r2, [pc, #456]	@ (8003bcc <GPIO_init_interrupt+0x22e0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d128      	bne.n	8003a58 <GPIO_init_interrupt+0x216c>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI0_PC;
 8003a06:	4b6e      	ldr	r3, [pc, #440]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI0_PC;
 8003a12:	4b6b      	ldr	r3, [pc, #428]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4a6a      	ldr	r2, [pc, #424]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR12_Msk;
 8003a1e:	4b69      	ldr	r3, [pc, #420]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4a68      	ldr	r2, [pc, #416]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a28:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR12;
 8003a2a:	4b66      	ldr	r3, [pc, #408]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4a65      	ldr	r2, [pc, #404]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a34:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM12;
 8003a36:	4b63      	ldr	r3, [pc, #396]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a62      	ldr	r2, [pc, #392]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a40:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM12;
 8003a42:	4b60      	ldr	r3, [pc, #384]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a4c:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003a4e:	2028      	movs	r0, #40	@ 0x28
 8003a50:	f7fd fe98 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003a54:	f000 bc78 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOD)
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd0 <GPIO_init_interrupt+0x22e4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d128      	bne.n	8003ab4 <GPIO_init_interrupt+0x21c8>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI0_PD;
 8003a62:	4b57      	ldr	r3, [pc, #348]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	4a56      	ldr	r2, [pc, #344]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003a68:	f023 0303 	bic.w	r3, r3, #3
 8003a6c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI0_PD;
 8003a6e:	4b54      	ldr	r3, [pc, #336]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4a53      	ldr	r2, [pc, #332]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003a74:	f043 0303 	orr.w	r3, r3, #3
 8003a78:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR12_Msk;
 8003a7a:	4b52      	ldr	r3, [pc, #328]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	4a51      	ldr	r2, [pc, #324]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a84:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR12;
 8003a86:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a90:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM12;
 8003a92:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a9c:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM12;
 8003a9e:	4b49      	ldr	r3, [pc, #292]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a48      	ldr	r2, [pc, #288]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003aa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003aa8:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003aaa:	2028      	movs	r0, #40	@ 0x28
 8003aac:	f7fd fe6a 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003ab0:	f000 bc4a 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOE)
 8003ab4:	f107 0308 	add.w	r3, r7, #8
 8003ab8:	4a46      	ldr	r2, [pc, #280]	@ (8003bd4 <GPIO_init_interrupt+0x22e8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d128      	bne.n	8003b10 <GPIO_init_interrupt+0x2224>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI0_PE;
 8003abe:	4b40      	ldr	r3, [pc, #256]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI0_PE;
 8003aca:	4b3d      	ldr	r3, [pc, #244]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR12_Msk;
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003adc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ae0:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR12;
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4a37      	ldr	r2, [pc, #220]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003aec:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM12;
 8003aee:	4b35      	ldr	r3, [pc, #212]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a34      	ldr	r2, [pc, #208]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003af4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003af8:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM12;
 8003afa:	4b32      	ldr	r3, [pc, #200]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a31      	ldr	r2, [pc, #196]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b04:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003b06:	2028      	movs	r0, #40	@ 0x28
 8003b08:	f7fd fe3c 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003b0c:	f000 bc1c 	b.w	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOF)
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	4a30      	ldr	r2, [pc, #192]	@ (8003bd8 <GPIO_init_interrupt+0x22ec>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d127      	bne.n	8003b6a <GPIO_init_interrupt+0x227e>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI0_PF;
 8003b1a:	4b29      	ldr	r3, [pc, #164]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4a28      	ldr	r2, [pc, #160]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003b20:	f023 0305 	bic.w	r3, r3, #5
 8003b24:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI0_PF;
 8003b26:	4b26      	ldr	r3, [pc, #152]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	4a25      	ldr	r2, [pc, #148]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003b2c:	f043 0305 	orr.w	r3, r3, #5
 8003b30:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR12_Msk;
 8003b32:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b3c:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR12;
 8003b3e:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4a20      	ldr	r2, [pc, #128]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b48:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM12;
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b54:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM12;
 8003b56:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b60:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003b62:	2028      	movs	r0, #40	@ 0x28
 8003b64:	f7fd fe0e 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003b68:	e3ee      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI0_PG;
 8003b6a:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4a14      	ldr	r2, [pc, #80]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003b70:	f023 0306 	bic.w	r3, r3, #6
 8003b74:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI0_PG;
 8003b76:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4a11      	ldr	r2, [pc, #68]	@ (8003bc0 <GPIO_init_interrupt+0x22d4>)
 8003b7c:	f043 0306 	orr.w	r3, r3, #6
 8003b80:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR12_Msk;
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4a0f      	ldr	r2, [pc, #60]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b8c:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR12;
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4a0c      	ldr	r2, [pc, #48]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b98:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM12;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a09      	ldr	r2, [pc, #36]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003ba0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ba4:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM12;
 8003ba6:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a06      	ldr	r2, [pc, #24]	@ (8003bc4 <GPIO_init_interrupt+0x22d8>)
 8003bac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bb0:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003bb2:	2028      	movs	r0, #40	@ 0x28
 8003bb4:	f7fd fde6 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003bb8:	e3c6      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
 8003bba:	bf00      	nop
 8003bbc:	40020000 	.word	0x40020000
 8003bc0:	40013800 	.word	0x40013800
 8003bc4:	40013c00 	.word	0x40013c00
 8003bc8:	40020400 	.word	0x40020400
 8003bcc:	40020800 	.word	0x40020800
 8003bd0:	40020c00 	.word	0x40020c00
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40021400 	.word	0x40021400
					case 13:
					//this is for PA/B/C...0:3
						if(&port == (GPIO_TypeDef*)GPIOA)
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	4a97      	ldr	r2, [pc, #604]	@ (8003e40 <GPIO_init_interrupt+0x2554>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d123      	bne.n	8003c2e <GPIO_init_interrupt+0x2342>
						{
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI1_PA;
 8003be6:	4b97      	ldr	r3, [pc, #604]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003be8:	4a96      	ldr	r2, [pc, #600]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI1_PA;
 8003bee:	4b95      	ldr	r3, [pc, #596]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003bf0:	4a94      	ldr	r2, [pc, #592]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR13_Msk;
 8003bf6:	4b94      	ldr	r3, [pc, #592]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4a93      	ldr	r2, [pc, #588]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003bfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c00:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR13;
 8003c02:	4b91      	ldr	r3, [pc, #580]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4a90      	ldr	r2, [pc, #576]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c0c:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM13;
 8003c0e:	4b8e      	ldr	r3, [pc, #568]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a8d      	ldr	r2, [pc, #564]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c18:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM13;
 8003c1a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a8a      	ldr	r2, [pc, #552]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c24:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003c26:	2028      	movs	r0, #40	@ 0x28
 8003c28:	f7fd fdac 	bl	8001784 <__NVIC_EnableIRQ>
														EXTI->IMR &= ~EXTI_IMR_IM13;
														EXTI->IMR |= EXTI_IMR_IM13;
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel

						}
					break;
 8003c2c:	e38c      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOB)
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	4a86      	ldr	r2, [pc, #536]	@ (8003e4c <GPIO_init_interrupt+0x2560>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d127      	bne.n	8003c88 <GPIO_init_interrupt+0x239c>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI1_PB;
 8003c38:	4b82      	ldr	r3, [pc, #520]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	4a81      	ldr	r2, [pc, #516]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003c3e:	f023 0310 	bic.w	r3, r3, #16
 8003c42:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI1_PB;
 8003c44:	4b7f      	ldr	r3, [pc, #508]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	4a7e      	ldr	r2, [pc, #504]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003c4a:	f043 0310 	orr.w	r3, r3, #16
 8003c4e:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR13_Msk;
 8003c50:	4b7d      	ldr	r3, [pc, #500]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a7c      	ldr	r2, [pc, #496]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c5a:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR13;
 8003c5c:	4b7a      	ldr	r3, [pc, #488]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a79      	ldr	r2, [pc, #484]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c66:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM13;
 8003c68:	4b77      	ldr	r3, [pc, #476]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a76      	ldr	r2, [pc, #472]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c72:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM13;
 8003c74:	4b74      	ldr	r3, [pc, #464]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a73      	ldr	r2, [pc, #460]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003c7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c7e:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003c80:	2028      	movs	r0, #40	@ 0x28
 8003c82:	f7fd fd7f 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003c86:	e35f      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOC)
 8003c88:	f107 0308 	add.w	r3, r7, #8
 8003c8c:	4a70      	ldr	r2, [pc, #448]	@ (8003e50 <GPIO_init_interrupt+0x2564>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d127      	bne.n	8003ce2 <GPIO_init_interrupt+0x23f6>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI1_PC;
 8003c92:	4b6c      	ldr	r3, [pc, #432]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4a6b      	ldr	r2, [pc, #428]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003c98:	f023 0320 	bic.w	r3, r3, #32
 8003c9c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI1_PC;
 8003c9e:	4b69      	ldr	r3, [pc, #420]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4a68      	ldr	r2, [pc, #416]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003ca4:	f043 0320 	orr.w	r3, r3, #32
 8003ca8:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR13_Msk;
 8003caa:	4b67      	ldr	r3, [pc, #412]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4a66      	ldr	r2, [pc, #408]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003cb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cb4:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR13;
 8003cb6:	4b64      	ldr	r3, [pc, #400]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4a63      	ldr	r2, [pc, #396]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cc0:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM13;
 8003cc2:	4b61      	ldr	r3, [pc, #388]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a60      	ldr	r2, [pc, #384]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003cc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ccc:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM13;
 8003cce:	4b5e      	ldr	r3, [pc, #376]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003cd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cd8:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003cda:	2028      	movs	r0, #40	@ 0x28
 8003cdc:	f7fd fd52 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003ce0:	e332      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOD)
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e54 <GPIO_init_interrupt+0x2568>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d127      	bne.n	8003d3c <GPIO_init_interrupt+0x2450>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI1_PD;
 8003cec:	4b55      	ldr	r3, [pc, #340]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	4a54      	ldr	r2, [pc, #336]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003cf2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003cf6:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI1_PD;
 8003cf8:	4b52      	ldr	r3, [pc, #328]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4a51      	ldr	r2, [pc, #324]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003cfe:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d02:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR13_Msk;
 8003d04:	4b50      	ldr	r3, [pc, #320]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a4f      	ldr	r2, [pc, #316]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d0e:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR13;
 8003d10:	4b4d      	ldr	r3, [pc, #308]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a4c      	ldr	r2, [pc, #304]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d1a:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM13;
 8003d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a49      	ldr	r2, [pc, #292]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d26:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM13;
 8003d28:	4b47      	ldr	r3, [pc, #284]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a46      	ldr	r2, [pc, #280]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d32:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003d34:	2028      	movs	r0, #40	@ 0x28
 8003d36:	f7fd fd25 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003d3a:	e305      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOE)
 8003d3c:	f107 0308 	add.w	r3, r7, #8
 8003d40:	4a45      	ldr	r2, [pc, #276]	@ (8003e58 <GPIO_init_interrupt+0x256c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d127      	bne.n	8003d96 <GPIO_init_interrupt+0x24aa>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI1_PE;
 8003d46:	4b3f      	ldr	r3, [pc, #252]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d50:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI1_PE;
 8003d52:	4b3c      	ldr	r3, [pc, #240]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	4a3b      	ldr	r2, [pc, #236]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d5c:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR13_Msk;
 8003d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4a39      	ldr	r2, [pc, #228]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d68:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR13;
 8003d6a:	4b37      	ldr	r3, [pc, #220]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	4a36      	ldr	r2, [pc, #216]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d74:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM13;
 8003d76:	4b34      	ldr	r3, [pc, #208]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a33      	ldr	r2, [pc, #204]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d80:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM13;
 8003d82:	4b31      	ldr	r3, [pc, #196]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a30      	ldr	r2, [pc, #192]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003d88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d8c:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003d8e:	2028      	movs	r0, #40	@ 0x28
 8003d90:	f7fd fcf8 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003d94:	e2d8      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOF)
 8003d96:	f107 0308 	add.w	r3, r7, #8
 8003d9a:	4a30      	ldr	r2, [pc, #192]	@ (8003e5c <GPIO_init_interrupt+0x2570>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d127      	bne.n	8003df0 <GPIO_init_interrupt+0x2504>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI1_PF;
 8003da0:	4b28      	ldr	r3, [pc, #160]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	4a27      	ldr	r2, [pc, #156]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003da6:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8003daa:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI1_PF;
 8003dac:	4b25      	ldr	r3, [pc, #148]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	4a24      	ldr	r2, [pc, #144]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003db2:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8003db6:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR13_Msk;
 8003db8:	4b23      	ldr	r3, [pc, #140]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003dbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc2:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR13;
 8003dc4:	4b20      	ldr	r3, [pc, #128]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003dca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dce:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM13;
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003dd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dda:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM13;
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a19      	ldr	r2, [pc, #100]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003de2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003de6:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003de8:	2028      	movs	r0, #40	@ 0x28
 8003dea:	f7fd fccb 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003dee:	e2ab      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI1_PG;
 8003df0:	4b14      	ldr	r3, [pc, #80]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	4a13      	ldr	r2, [pc, #76]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003df6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8003dfa:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI1_PG;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	4a10      	ldr	r2, [pc, #64]	@ (8003e44 <GPIO_init_interrupt+0x2558>)
 8003e02:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003e06:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR13_Msk;
 8003e08:	4b0f      	ldr	r3, [pc, #60]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003e0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e12:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR13;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a0b      	ldr	r2, [pc, #44]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003e1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e1e:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM13;
 8003e20:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003e26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e2a:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM13;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a05      	ldr	r2, [pc, #20]	@ (8003e48 <GPIO_init_interrupt+0x255c>)
 8003e32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e36:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003e38:	2028      	movs	r0, #40	@ 0x28
 8003e3a:	f7fd fca3 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003e3e:	e283      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
 8003e40:	40020000 	.word	0x40020000
 8003e44:	40013800 	.word	0x40013800
 8003e48:	40013c00 	.word	0x40013c00
 8003e4c:	40020400 	.word	0x40020400
 8003e50:	40020800 	.word	0x40020800
 8003e54:	40020c00 	.word	0x40020c00
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40021400 	.word	0x40021400
					case 14:
					//this is for PA/B/C...0:3
						if(&port == (GPIO_TypeDef*)GPIOA)
 8003e60:	f107 0308 	add.w	r3, r7, #8
 8003e64:	4a97      	ldr	r2, [pc, #604]	@ (80040c4 <GPIO_init_interrupt+0x27d8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d123      	bne.n	8003eb2 <GPIO_init_interrupt+0x25c6>
						{
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI2_PA;
 8003e6a:	4b97      	ldr	r3, [pc, #604]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003e6c:	4a96      	ldr	r2, [pc, #600]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI2_PA;
 8003e72:	4b95      	ldr	r3, [pc, #596]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003e74:	4a94      	ldr	r2, [pc, #592]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR14_Msk;
 8003e7a:	4b94      	ldr	r3, [pc, #592]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4a93      	ldr	r2, [pc, #588]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003e80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e84:	6093      	str	r3, [r2, #8]
							EXTI->RTSR |= EXTI_RTSR_TR14;
 8003e86:	4b91      	ldr	r3, [pc, #580]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4a90      	ldr	r2, [pc, #576]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e90:	6093      	str	r3, [r2, #8]
							EXTI->IMR &= ~EXTI_IMR_IM14;
 8003e92:	4b8e      	ldr	r3, [pc, #568]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a8d      	ldr	r2, [pc, #564]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003e98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e9c:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_IMR_IM14;
 8003e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a8a      	ldr	r2, [pc, #552]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ea8:	6013      	str	r3, [r2, #0]
							NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003eaa:	2028      	movs	r0, #40	@ 0x28
 8003eac:	f7fd fc6a 	bl	8001784 <__NVIC_EnableIRQ>
														EXTI->IMR &= ~EXTI_IMR_IM14;
														EXTI->IMR |= EXTI_IMR_IM14;
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel

						}
					break;
 8003eb0:	e24a      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOB)
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	4a86      	ldr	r2, [pc, #536]	@ (80040d0 <GPIO_init_interrupt+0x27e4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d127      	bne.n	8003f0c <GPIO_init_interrupt+0x2620>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI2_PB;
 8003ebc:	4b82      	ldr	r3, [pc, #520]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	4a81      	ldr	r2, [pc, #516]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003ec2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec6:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI2_PB;
 8003ec8:	4b7f      	ldr	r3, [pc, #508]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	4a7e      	ldr	r2, [pc, #504]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed2:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR14_Msk;
 8003ed4:	4b7d      	ldr	r3, [pc, #500]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a7c      	ldr	r2, [pc, #496]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ede:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR14;
 8003ee0:	4b7a      	ldr	r3, [pc, #488]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a79      	ldr	r2, [pc, #484]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eea:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM14;
 8003eec:	4b77      	ldr	r3, [pc, #476]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a76      	ldr	r2, [pc, #472]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ef2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ef6:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM14;
 8003ef8:	4b74      	ldr	r3, [pc, #464]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a73      	ldr	r2, [pc, #460]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f02:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003f04:	2028      	movs	r0, #40	@ 0x28
 8003f06:	f7fd fc3d 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003f0a:	e21d      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOC)
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	4a70      	ldr	r2, [pc, #448]	@ (80040d4 <GPIO_init_interrupt+0x27e8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d127      	bne.n	8003f66 <GPIO_init_interrupt+0x267a>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI2_PC;
 8003f16:	4b6c      	ldr	r3, [pc, #432]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	4a6b      	ldr	r2, [pc, #428]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f20:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI2_PC;
 8003f22:	4b69      	ldr	r3, [pc, #420]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4a68      	ldr	r2, [pc, #416]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003f28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f2c:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR14_Msk;
 8003f2e:	4b67      	ldr	r3, [pc, #412]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4a66      	ldr	r2, [pc, #408]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f38:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR14;
 8003f3a:	4b64      	ldr	r3, [pc, #400]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4a63      	ldr	r2, [pc, #396]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f44:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM14;
 8003f46:	4b61      	ldr	r3, [pc, #388]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a60      	ldr	r2, [pc, #384]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f50:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM14;
 8003f52:	4b5e      	ldr	r3, [pc, #376]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a5d      	ldr	r2, [pc, #372]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f5c:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003f5e:	2028      	movs	r0, #40	@ 0x28
 8003f60:	f7fd fc10 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003f64:	e1f0      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOD)
 8003f66:	f107 0308 	add.w	r3, r7, #8
 8003f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80040d8 <GPIO_init_interrupt+0x27ec>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d127      	bne.n	8003fc0 <GPIO_init_interrupt+0x26d4>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI2_PD;
 8003f70:	4b55      	ldr	r3, [pc, #340]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	4a54      	ldr	r2, [pc, #336]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7a:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI2_PD;
 8003f7c:	4b52      	ldr	r3, [pc, #328]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	4a51      	ldr	r2, [pc, #324]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003f82:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003f86:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR14_Msk;
 8003f88:	4b50      	ldr	r3, [pc, #320]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f92:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR14;
 8003f94:	4b4d      	ldr	r3, [pc, #308]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a4c      	ldr	r2, [pc, #304]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003f9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f9e:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM14;
 8003fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a49      	ldr	r2, [pc, #292]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003faa:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM14;
 8003fac:	4b47      	ldr	r3, [pc, #284]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a46      	ldr	r2, [pc, #280]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb6:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8003fb8:	2028      	movs	r0, #40	@ 0x28
 8003fba:	f7fd fbe3 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8003fbe:	e1c3      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOE)
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	4a45      	ldr	r2, [pc, #276]	@ (80040dc <GPIO_init_interrupt+0x27f0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d127      	bne.n	800401a <GPIO_init_interrupt+0x272e>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI2_PE;
 8003fca:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	4a3e      	ldr	r2, [pc, #248]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fd4:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI2_PE;
 8003fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	4a3b      	ldr	r2, [pc, #236]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8003fdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fe0:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR14_Msk;
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	4a39      	ldr	r2, [pc, #228]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003fe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fec:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR14;
 8003fee:	4b37      	ldr	r3, [pc, #220]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4a36      	ldr	r2, [pc, #216]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ff8:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM14;
 8003ffa:	4b34      	ldr	r3, [pc, #208]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a33      	ldr	r2, [pc, #204]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8004000:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004004:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM14;
 8004006:	4b31      	ldr	r3, [pc, #196]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a30      	ldr	r2, [pc, #192]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 800400c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004010:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8004012:	2028      	movs	r0, #40	@ 0x28
 8004014:	f7fd fbb6 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8004018:	e196      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
						else if(&port == (GPIO_TypeDef*)GPIOF)
 800401a:	f107 0308 	add.w	r3, r7, #8
 800401e:	4a30      	ldr	r2, [pc, #192]	@ (80040e0 <GPIO_init_interrupt+0x27f4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d127      	bne.n	8004074 <GPIO_init_interrupt+0x2788>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI2_PF;
 8004024:	4b28      	ldr	r3, [pc, #160]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	4a27      	ldr	r2, [pc, #156]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 800402a:	f423 63a0 	bic.w	r3, r3, #1280	@ 0x500
 800402e:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI2_PF;
 8004030:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	4a24      	ldr	r2, [pc, #144]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8004036:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800403a:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR14_Msk;
 800403c:	4b23      	ldr	r3, [pc, #140]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a22      	ldr	r2, [pc, #136]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8004042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004046:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR14;
 8004048:	4b20      	ldr	r3, [pc, #128]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 800404e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004052:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM14;
 8004054:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 800405a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800405e:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM14;
 8004060:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a19      	ldr	r2, [pc, #100]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8004066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800406a:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 800406c:	2028      	movs	r0, #40	@ 0x28
 800406e:	f7fd fb89 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 8004072:	e169      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
							SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI2_PG;
 8004074:	4b14      	ldr	r3, [pc, #80]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 800407a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800407e:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI2_PG;
 8004080:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	4a10      	ldr	r2, [pc, #64]	@ (80040c8 <GPIO_init_interrupt+0x27dc>)
 8004086:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800408a:	6153      	str	r3, [r2, #20]
							EXTI->RTSR &= ~EXTI_RTSR_TR14_Msk;
 800408c:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a0e      	ldr	r2, [pc, #56]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 8004092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004096:	6093      	str	r3, [r2, #8]
														EXTI->RTSR |= EXTI_RTSR_TR14;
 8004098:	4b0c      	ldr	r3, [pc, #48]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a0b      	ldr	r2, [pc, #44]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 800409e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040a2:	6093      	str	r3, [r2, #8]
														EXTI->IMR &= ~EXTI_IMR_IM14;
 80040a4:	4b09      	ldr	r3, [pc, #36]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a08      	ldr	r2, [pc, #32]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 80040aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ae:	6013      	str	r3, [r2, #0]
														EXTI->IMR |= EXTI_IMR_IM14;
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a05      	ldr	r2, [pc, #20]	@ (80040cc <GPIO_init_interrupt+0x27e0>)
 80040b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040ba:	6013      	str	r3, [r2, #0]
														NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 80040bc:	2028      	movs	r0, #40	@ 0x28
 80040be:	f7fd fb61 	bl	8001784 <__NVIC_EnableIRQ>
					break;
 80040c2:	e141      	b.n	8004348 <GPIO_init_interrupt+0x2a5c>
 80040c4:	40020000 	.word	0x40020000
 80040c8:	40013800 	.word	0x40013800
 80040cc:	40013c00 	.word	0x40013c00
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40020800 	.word	0x40020800
 80040d8:	40020c00 	.word	0x40020c00
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40021400 	.word	0x40021400
					case 15:
						//this is for PA/B/C...0:3
							if(&port == (GPIO_TypeDef*)GPIOA)
 80040e4:	f107 0308 	add.w	r3, r7, #8
 80040e8:	4a99      	ldr	r2, [pc, #612]	@ (8004350 <GPIO_init_interrupt+0x2a64>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d123      	bne.n	8004136 <GPIO_init_interrupt+0x284a>
							{
								SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3_PA;
 80040ee:	4b99      	ldr	r3, [pc, #612]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80040f0:	4a98      	ldr	r2, [pc, #608]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	6153      	str	r3, [r2, #20]
								SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI3_PA;
 80040f6:	4b97      	ldr	r3, [pc, #604]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80040f8:	4a96      	ldr	r2, [pc, #600]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	6153      	str	r3, [r2, #20]
								EXTI->RTSR &= ~EXTI_RTSR_TR15_Msk;
 80040fe:	4b96      	ldr	r3, [pc, #600]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	4a95      	ldr	r2, [pc, #596]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004104:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004108:	6093      	str	r3, [r2, #8]
								EXTI->RTSR |= EXTI_RTSR_TR15;
 800410a:	4b93      	ldr	r3, [pc, #588]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	4a92      	ldr	r2, [pc, #584]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004114:	6093      	str	r3, [r2, #8]
								EXTI->IMR &= ~EXTI_IMR_IM15;
 8004116:	4b90      	ldr	r3, [pc, #576]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a8f      	ldr	r2, [pc, #572]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800411c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004120:	6013      	str	r3, [r2, #0]
								EXTI->IMR |= EXTI_IMR_IM15;
 8004122:	4b8d      	ldr	r3, [pc, #564]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a8c      	ldr	r2, [pc, #560]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800412c:	6013      	str	r3, [r2, #0]
								NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 800412e:	2028      	movs	r0, #40	@ 0x28
 8004130:	f7fd fb28 	bl	8001784 <__NVIC_EnableIRQ>
																EXTI->IMR &= ~EXTI_IMR_IM15;
																EXTI->IMR |= EXTI_IMR_IM15;
																NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel

							}
						break;
 8004134:	e107      	b.n	8004346 <GPIO_init_interrupt+0x2a5a>
							else if(&port == (GPIO_TypeDef*)GPIOB)
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	4a88      	ldr	r2, [pc, #544]	@ (800435c <GPIO_init_interrupt+0x2a70>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d127      	bne.n	8004190 <GPIO_init_interrupt+0x28a4>
								SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3_PB;
 8004140:	4b84      	ldr	r3, [pc, #528]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	4a83      	ldr	r2, [pc, #524]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004146:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800414a:	6153      	str	r3, [r2, #20]
								SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI3_PB;
 800414c:	4b81      	ldr	r3, [pc, #516]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	4a80      	ldr	r2, [pc, #512]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004152:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004156:	6153      	str	r3, [r2, #20]
								EXTI->RTSR &= ~EXTI_RTSR_TR15_Msk;
 8004158:	4b7f      	ldr	r3, [pc, #508]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a7e      	ldr	r2, [pc, #504]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800415e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004162:	6093      	str	r3, [r2, #8]
																EXTI->RTSR |= EXTI_RTSR_TR15;
 8004164:	4b7c      	ldr	r3, [pc, #496]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4a7b      	ldr	r2, [pc, #492]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800416a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800416e:	6093      	str	r3, [r2, #8]
																EXTI->IMR &= ~EXTI_IMR_IM15;
 8004170:	4b79      	ldr	r3, [pc, #484]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a78      	ldr	r2, [pc, #480]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004176:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800417a:	6013      	str	r3, [r2, #0]
																EXTI->IMR |= EXTI_IMR_IM15;
 800417c:	4b76      	ldr	r3, [pc, #472]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a75      	ldr	r2, [pc, #468]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004186:	6013      	str	r3, [r2, #0]
																NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8004188:	2028      	movs	r0, #40	@ 0x28
 800418a:	f7fd fafb 	bl	8001784 <__NVIC_EnableIRQ>
						break;
 800418e:	e0da      	b.n	8004346 <GPIO_init_interrupt+0x2a5a>
							else if(&port == (GPIO_TypeDef*)GPIOC)
 8004190:	f107 0308 	add.w	r3, r7, #8
 8004194:	4a72      	ldr	r2, [pc, #456]	@ (8004360 <GPIO_init_interrupt+0x2a74>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d127      	bne.n	80041ea <GPIO_init_interrupt+0x28fe>
								SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3_PC;
 800419a:	4b6e      	ldr	r3, [pc, #440]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	4a6d      	ldr	r2, [pc, #436]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80041a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041a4:	6153      	str	r3, [r2, #20]
								SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI3_PC;
 80041a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80041ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80041b0:	6153      	str	r3, [r2, #20]
								EXTI->RTSR &= ~EXTI_RTSR_TR15_Msk;
 80041b2:	4b69      	ldr	r3, [pc, #420]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4a68      	ldr	r2, [pc, #416]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80041b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041bc:	6093      	str	r3, [r2, #8]
																EXTI->RTSR |= EXTI_RTSR_TR15;
 80041be:	4b66      	ldr	r3, [pc, #408]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4a65      	ldr	r2, [pc, #404]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80041c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c8:	6093      	str	r3, [r2, #8]
																EXTI->IMR &= ~EXTI_IMR_IM15;
 80041ca:	4b63      	ldr	r3, [pc, #396]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a62      	ldr	r2, [pc, #392]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80041d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041d4:	6013      	str	r3, [r2, #0]
																EXTI->IMR |= EXTI_IMR_IM15;
 80041d6:	4b60      	ldr	r3, [pc, #384]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a5f      	ldr	r2, [pc, #380]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80041dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e0:	6013      	str	r3, [r2, #0]
																NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 80041e2:	2028      	movs	r0, #40	@ 0x28
 80041e4:	f7fd face 	bl	8001784 <__NVIC_EnableIRQ>
						break;
 80041e8:	e0ad      	b.n	8004346 <GPIO_init_interrupt+0x2a5a>
							else if(&port == (GPIO_TypeDef*)GPIOD)
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	4a5d      	ldr	r2, [pc, #372]	@ (8004364 <GPIO_init_interrupt+0x2a78>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d127      	bne.n	8004244 <GPIO_init_interrupt+0x2958>
								SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3_PD;
 80041f4:	4b57      	ldr	r3, [pc, #348]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	4a56      	ldr	r2, [pc, #344]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80041fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80041fe:	6153      	str	r3, [r2, #20]
								SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI3_PD;
 8004200:	4b54      	ldr	r3, [pc, #336]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	4a53      	ldr	r2, [pc, #332]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004206:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800420a:	6153      	str	r3, [r2, #20]
								EXTI->RTSR &= ~EXTI_RTSR_TR15_Msk;
 800420c:	4b52      	ldr	r3, [pc, #328]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a51      	ldr	r2, [pc, #324]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004216:	6093      	str	r3, [r2, #8]
																EXTI->RTSR |= EXTI_RTSR_TR15;
 8004218:	4b4f      	ldr	r3, [pc, #316]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a4e      	ldr	r2, [pc, #312]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800421e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004222:	6093      	str	r3, [r2, #8]
																EXTI->IMR &= ~EXTI_IMR_IM15;
 8004224:	4b4c      	ldr	r3, [pc, #304]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a4b      	ldr	r2, [pc, #300]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800422a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800422e:	6013      	str	r3, [r2, #0]
																EXTI->IMR |= EXTI_IMR_IM15;
 8004230:	4b49      	ldr	r3, [pc, #292]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a48      	ldr	r2, [pc, #288]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800423a:	6013      	str	r3, [r2, #0]
																NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 800423c:	2028      	movs	r0, #40	@ 0x28
 800423e:	f7fd faa1 	bl	8001784 <__NVIC_EnableIRQ>
						break;
 8004242:	e080      	b.n	8004346 <GPIO_init_interrupt+0x2a5a>
							else if(&port == (GPIO_TypeDef*)GPIOE)
 8004244:	f107 0308 	add.w	r3, r7, #8
 8004248:	4a47      	ldr	r2, [pc, #284]	@ (8004368 <GPIO_init_interrupt+0x2a7c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d127      	bne.n	800429e <GPIO_init_interrupt+0x29b2>
								SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3_PE;
 800424e:	4b41      	ldr	r3, [pc, #260]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	4a40      	ldr	r2, [pc, #256]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004254:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004258:	6153      	str	r3, [r2, #20]
								SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI3_PE;
 800425a:	4b3e      	ldr	r3, [pc, #248]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	4a3d      	ldr	r2, [pc, #244]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004264:	6153      	str	r3, [r2, #20]
								EXTI->RTSR &= ~EXTI_RTSR_TR15_Msk;
 8004266:	4b3c      	ldr	r3, [pc, #240]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	4a3b      	ldr	r2, [pc, #236]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800426c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004270:	6093      	str	r3, [r2, #8]
																EXTI->RTSR |= EXTI_RTSR_TR15;
 8004272:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4a38      	ldr	r2, [pc, #224]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800427c:	6093      	str	r3, [r2, #8]
																EXTI->IMR &= ~EXTI_IMR_IM15;
 800427e:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a35      	ldr	r2, [pc, #212]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004284:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004288:	6013      	str	r3, [r2, #0]
																EXTI->IMR |= EXTI_IMR_IM15;
 800428a:	4b33      	ldr	r3, [pc, #204]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a32      	ldr	r2, [pc, #200]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004294:	6013      	str	r3, [r2, #0]
																NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8004296:	2028      	movs	r0, #40	@ 0x28
 8004298:	f7fd fa74 	bl	8001784 <__NVIC_EnableIRQ>
						break;
 800429c:	e053      	b.n	8004346 <GPIO_init_interrupt+0x2a5a>
							else if(&port == (GPIO_TypeDef*)GPIOF)
 800429e:	f107 0308 	add.w	r3, r7, #8
 80042a2:	4a32      	ldr	r2, [pc, #200]	@ (800436c <GPIO_init_interrupt+0x2a80>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d127      	bne.n	80042f8 <GPIO_init_interrupt+0x2a0c>
								SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3_PF;
 80042a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4a29      	ldr	r2, [pc, #164]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80042ae:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 80042b2:	6153      	str	r3, [r2, #20]
								SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI3_PF;
 80042b4:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	4a26      	ldr	r2, [pc, #152]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80042ba:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 80042be:	6153      	str	r3, [r2, #20]
								EXTI->RTSR &= ~EXTI_RTSR_TR15_Msk;
 80042c0:	4b25      	ldr	r3, [pc, #148]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a24      	ldr	r2, [pc, #144]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80042c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042ca:	6093      	str	r3, [r2, #8]
																EXTI->RTSR |= EXTI_RTSR_TR15;
 80042cc:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a21      	ldr	r2, [pc, #132]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80042d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042d6:	6093      	str	r3, [r2, #8]
																EXTI->IMR &= ~EXTI_IMR_IM15;
 80042d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80042de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042e2:	6013      	str	r3, [r2, #0]
																EXTI->IMR |= EXTI_IMR_IM15;
 80042e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 80042ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ee:	6013      	str	r3, [r2, #0]
																NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 80042f0:	2028      	movs	r0, #40	@ 0x28
 80042f2:	f7fd fa47 	bl	8001784 <__NVIC_EnableIRQ>
						break;
 80042f6:	e026      	b.n	8004346 <GPIO_init_interrupt+0x2a5a>
								SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR1_EXTI3_PG;
 80042f8:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	4a15      	ldr	r2, [pc, #84]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 80042fe:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8004302:	6153      	str	r3, [r2, #20]
								SYSCFG->EXTICR[3] |= SYSCFG_EXTICR1_EXTI3_PG;
 8004304:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	4a12      	ldr	r2, [pc, #72]	@ (8004354 <GPIO_init_interrupt+0x2a68>)
 800430a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800430e:	6153      	str	r3, [r2, #20]
								EXTI->RTSR &= ~EXTI_RTSR_TR15_Msk;
 8004310:	4b11      	ldr	r3, [pc, #68]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a10      	ldr	r2, [pc, #64]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004316:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800431a:	6093      	str	r3, [r2, #8]
																EXTI->RTSR |= EXTI_RTSR_TR15;
 800431c:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004326:	6093      	str	r3, [r2, #8]
																EXTI->IMR &= ~EXTI_IMR_IM15;
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0a      	ldr	r2, [pc, #40]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800432e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004332:	6013      	str	r3, [r2, #0]
																EXTI->IMR |= EXTI_IMR_IM15;
 8004334:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a07      	ldr	r2, [pc, #28]	@ (8004358 <GPIO_init_interrupt+0x2a6c>)
 800433a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800433e:	6013      	str	r3, [r2, #0]
																NVIC_EnableIRQ(EXTI15_10_IRQn); //enable interrupt channel
 8004340:	2028      	movs	r0, #40	@ 0x28
 8004342:	f7fd fa1f 	bl	8001784 <__NVIC_EnableIRQ>
						break;
 8004346:	bf00      	nop
	}

}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40020000 	.word	0x40020000
 8004354:	40013800 	.word	0x40013800
 8004358:	40013c00 	.word	0x40013c00
 800435c:	40020400 	.word	0x40020400
 8004360:	40020800 	.word	0x40020800
 8004364:	40020c00 	.word	0x40020c00
 8004368:	40021000 	.word	0x40021000
 800436c:	40021400 	.word	0x40021400

08004370 <SX1272_init>:
    GPIO_TypeDef *port,
    unsigned long cs,
    SX1272_Bandwidth bw,
    SX1272_SpreadingFactor sf,
    SX1272_CodingRate cr
) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  SPI_init(&lora->base, COMM_LORA, SPI3, MODE8, port, cs);
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2300      	movs	r3, #0
 800438a:	4a27      	ldr	r2, [pc, #156]	@ (8004428 <SX1272_init+0xb8>)
 800438c:	2101      	movs	r1, #1
 800438e:	f002 f979 	bl	8006684 <SPI_init>
  lora->standby      = SX1272_standby;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a25      	ldr	r2, [pc, #148]	@ (800442c <SX1272_init+0xbc>)
 8004396:	60da      	str	r2, [r3, #12]
  lora->enableBoost  = SX1272_enableBoost;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a25      	ldr	r2, [pc, #148]	@ (8004430 <SX1272_init+0xc0>)
 800439c:	609a      	str	r2, [r3, #8]
  lora->transmit     = SX1272_transmit;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a24      	ldr	r2, [pc, #144]	@ (8004434 <SX1272_init+0xc4>)
 80043a2:	611a      	str	r2, [r3, #16]
  lora->startReceive = SX1272_startReceive;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a24      	ldr	r2, [pc, #144]	@ (8004438 <SX1272_init+0xc8>)
 80043a8:	615a      	str	r2, [r3, #20]
  lora->readReceive  = SX1272_readReceive;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a23      	ldr	r2, [pc, #140]	@ (800443c <SX1272_init+0xcc>)
 80043ae:	619a      	str	r2, [r3, #24]
  lora->clearIRQ     = SX1272_clearIRQ;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a23      	ldr	r2, [pc, #140]	@ (8004440 <SX1272_init+0xd0>)
 80043b4:	61da      	str	r2, [r3, #28]

  _SX1272_setMode(lora, SX1272_MODE_SLEEP); // Set mode to sleep
 80043b6:	2100      	movs	r1, #0
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f946 	bl	800464a <_SX1272_setMode>


  /*Set carrier frequency to 915.6MHz*/
  //MSB remains the same as default value of E4
  SX1272_writeRegister(lora, SX1272_REG_FR_MIB, (0xE6)); //sets middle byte
 80043be:	22e6      	movs	r2, #230	@ 0xe6
 80043c0:	2107      	movs	r1, #7
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa2f 	bl	8004826 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FR_LSB, (0x67)); //sets last byte
 80043c8:	2267      	movs	r2, #103	@ 0x67
 80043ca:	2108      	movs	r1, #8
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fa2a 	bl	8004826 <SX1272_writeRegister>

  /* clang-format off */
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE,
 80043d2:	2280      	movs	r2, #128	@ 0x80
 80043d4:	2101      	movs	r1, #1
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fa25 	bl	8004826 <SX1272_writeRegister>
     0x01 << SX1272_OP_MODE_LONG_RANGE_Pos  // Enable LoRa
  );

  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
    bw   << SX1272_REG_MODEM_CONFIG1_BW_Pos     // Set bandwidth
 80043dc:	7e3b      	ldrb	r3, [r7, #24]
 80043de:	019b      	lsls	r3, r3, #6
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 80043e0:	b25a      	sxtb	r2, r3
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
 80043e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043e6:	00db      	lsls	r3, r3, #3
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b25b      	sxtb	r3, r3
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	211d      	movs	r1, #29
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fa16 	bl	8004826 <SX1272_writeRegister>
  );
  /* clang-format on */

  /** @todo set spreading factor */
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG2, 0x94);
 80043fa:	2294      	movs	r2, #148	@ 0x94
 80043fc:	211e      	movs	r1, #30
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fa11 	bl	8004826 <SX1272_writeRegister>

  // Set payload length
  SX1272_writeRegister(lora, SX1272_REG_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8004404:	2220      	movs	r2, #32
 8004406:	2122      	movs	r1, #34	@ 0x22
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fa0c 	bl	8004826 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_MAX_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 800440e:	2220      	movs	r2, #32
 8004410:	2123      	movs	r1, #35	@ 0x23
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fa07 	bl	8004826 <SX1272_writeRegister>

  _SX1272_setMode(lora, SX1272_MODE_RXCONTINUOUS); // Set mode to RXCONTINUOUS mode!
 8004418:	2105      	movs	r1, #5
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f915 	bl	800464a <_SX1272_setMode>
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40003c00 	.word	0x40003c00
 800442c:	080046c1 	.word	0x080046c1
 8004430:	08004687 	.word	0x08004687
 8004434:	080046d9 	.word	0x080046d9
 8004438:	08004747 	.word	0x08004747
 800443c:	0800478f 	.word	0x0800478f
 8004440:	08004807 	.word	0x08004807

08004444 <LoRa_GSEData_1>:
		MCP96RL00_EMX_1 *thermo1,
		MCP96RL00_EMX_1 *thermo2,
		MCP96RL00_EMX_1 *thermo3,
		MCP96RL00_EMX_1 *thermo4,
		uint16_t error_code)
{
 8004444:	b4b0      	push	{r4, r5, r7}
 8004446:	b095      	sub	sp, #84	@ 0x54
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	460b      	mov	r3, r1
 8004452:	72fb      	strb	r3, [r7, #11]

		union{
			float *f;
			uint8_t b[4];
		}TR1;
		TR1.f = &trans->Converted_Value_Transducer[0];
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3344      	adds	r3, #68	@ 0x44
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28

		union{
			float *f;
			uint8_t b[4];
		}TR2;
		TR2.f = &trans->Converted_Value_Transducer[1];
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3348      	adds	r3, #72	@ 0x48
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24

		union{
			float *f;
			uint8_t b[4];
		}TR3;
		TR3.f = &trans->Converted_Value_Transducer[2];
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	334c      	adds	r3, #76	@ 0x4c
 8004464:	623b      	str	r3, [r7, #32]

		union{
			float *f;
			uint8_t b[4];
		}TC1;
		TC1.f = &thermo1->temperature;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	332c      	adds	r3, #44	@ 0x2c
 800446a:	61fb      	str	r3, [r7, #28]

		union{
				float *f;
				uint8_t b[4];
			}TC2;
			TC2.f = &thermo2->temperature;
 800446c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800446e:	332c      	adds	r3, #44	@ 0x2c
 8004470:	61bb      	str	r3, [r7, #24]

			union{
				float *f;
				uint8_t b[4];
			}TC3;
			TC3.f = &thermo3->temperature;
 8004472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004474:	332c      	adds	r3, #44	@ 0x2c
 8004476:	617b      	str	r3, [r7, #20]

			union{
				float *f;
				uint8_t b[4];
			}TC4;
			TC4.f = &thermo4->temperature;
 8004478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800447a:	332c      	adds	r3, #44	@ 0x2c
 800447c:	613b      	str	r3, [r7, #16]

		uint8_t idx = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		msg.id = id;
 8004484:	7afb      	ldrb	r3, [r7, #11]
 8004486:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		memcpy(&msg.data[idx +=sizeof(float)], TR1.b, sizeof(float)); //sizeof(b[4]) == sizeof(float)
 800448a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800448e:	3304      	adds	r3, #4
 8004490:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8004494:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004498:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800449c:	4413      	add	r3, r2
 800449e:	3301      	adds	r3, #1
 80044a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044a2:	601a      	str	r2, [r3, #0]
		memcpy(&msg.data[idx +=sizeof(float)], TR2.b, sizeof(float));
 80044a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80044a8:	3304      	adds	r3, #4
 80044aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80044ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80044b2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80044b6:	4413      	add	r3, r2
 80044b8:	3301      	adds	r3, #1
 80044ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044bc:	601a      	str	r2, [r3, #0]
		memcpy(&msg.data[idx +=sizeof(float)], TR3.b, sizeof(float));
 80044be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80044c2:	3304      	adds	r3, #4
 80044c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80044c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80044cc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80044d0:	4413      	add	r3, r2
 80044d2:	3301      	adds	r3, #1
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	601a      	str	r2, [r3, #0]
		memcpy(&msg.data[idx +=sizeof(float)], TC1.b, sizeof(float));
 80044d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80044dc:	3304      	adds	r3, #4
 80044de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80044e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80044e6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80044ea:	4413      	add	r3, r2
 80044ec:	3301      	adds	r3, #1
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	601a      	str	r2, [r3, #0]
		memcpy(&msg.data[idx +=sizeof(float)], TC2.b, sizeof(float));
 80044f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80044f6:	3304      	adds	r3, #4
 80044f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80044fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004500:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004504:	4413      	add	r3, r2
 8004506:	3301      	adds	r3, #1
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	601a      	str	r2, [r3, #0]
		memcpy(&msg.data[idx +=sizeof(float)], TC3.b, sizeof(float));
 800450c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004510:	3304      	adds	r3, #4
 8004512:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8004516:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800451a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800451e:	4413      	add	r3, r2
 8004520:	3301      	adds	r3, #1
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	601a      	str	r2, [r3, #0]
		memcpy(&msg.data[idx +=sizeof(float)], TC4.b, sizeof(float));
 8004526:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800452a:	3304      	adds	r3, #4
 800452c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8004530:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004534:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004538:	4413      	add	r3, r2
 800453a:	3301      	adds	r3, #1
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	601a      	str	r2, [r3, #0]
		memcpy(&msg.data[idx +=sizeof(uint16_t)], error_code, sizeof(uint16_t));
 8004540:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004544:	3302      	adds	r3, #2
 8004546:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800454a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800454e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004552:	4413      	add	r3, r2
 8004554:	3301      	adds	r3, #1
 8004556:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800455a:	8812      	ldrh	r2, [r2, #0]
 800455c:	b292      	uxth	r2, r2
 800455e:	801a      	strh	r2, [r3, #0]

		return msg;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	461d      	mov	r5, r3
 8004564:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800456a:	6028      	str	r0, [r5, #0]
 800456c:	6069      	str	r1, [r5, #4]
 800456e:	60aa      	str	r2, [r5, #8]
 8004570:	60eb      	str	r3, [r5, #12]
 8004572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004574:	6128      	str	r0, [r5, #16]
 8004576:	6169      	str	r1, [r5, #20]
 8004578:	61aa      	str	r2, [r5, #24]
 800457a:	61eb      	str	r3, [r5, #28]
}
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	3754      	adds	r7, #84	@ 0x54
 8004580:	46bd      	mov	sp, r7
 8004582:	bcb0      	pop	{r4, r5, r7}
 8004584:	4770      	bx	lr

08004586 <LoRa_GSEData_2>:
		uint8_t id,
		ADC124S021 *loadcell,
		ADT75ARMZ *temp_sense,
		uint16_t error_code
		)
{
 8004586:	b4b0      	push	{r4, r5, r7}
 8004588:	b091      	sub	sp, #68	@ 0x44
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
 8004592:	460b      	mov	r3, r1
 8004594:	72fb      	strb	r3, [r7, #11]
	LoRa_Packet msg;

	uint8_t idx = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	union{
		float *f;
		uint8_t b[4];
	}LC1;
	LC1.f = &loadcell->Converted_Value_LoadCell;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3334      	adds	r3, #52	@ 0x34
 80045a0:	61bb      	str	r3, [r7, #24]

	union{
		float *f;
		uint8_t b[4];
	}LC2;
	LC2.f = &loadcell->Converted_Value_LoadCell;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3334      	adds	r3, #52	@ 0x34
 80045a6:	617b      	str	r3, [r7, #20]

	union{
		float *f;
		uint8_t b[4];
	}TS;
	TS.f = &temp_sense->temperature;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	3324      	adds	r3, #36	@ 0x24
 80045ac:	613b      	str	r3, [r7, #16]


		msg.id = id;
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	773b      	strb	r3, [r7, #28]
		memcpy(msg.data[idx += sizeof(float)], LC1.b, sizeof(float));
 80045b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045b6:	3304      	adds	r3, #4
 80045b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80045bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045c0:	3340      	adds	r3, #64	@ 0x40
 80045c2:	443b      	add	r3, r7
 80045c4:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 80045c8:	461a      	mov	r2, r3
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	6013      	str	r3, [r2, #0]
		memcpy(msg.data[idx += sizeof(float)], LC2.b, sizeof(float));
 80045ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045d2:	3304      	adds	r3, #4
 80045d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80045d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045dc:	3340      	adds	r3, #64	@ 0x40
 80045de:	443b      	add	r3, r7
 80045e0:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 80045e4:	461a      	mov	r2, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	6013      	str	r3, [r2, #0]
		memcpy(msg.data[idx += sizeof(float)], TS.b, sizeof(float));
 80045ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045ee:	3304      	adds	r3, #4
 80045f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80045f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045f8:	3340      	adds	r3, #64	@ 0x40
 80045fa:	443b      	add	r3, r7
 80045fc:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 8004600:	461a      	mov	r2, r3
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6013      	str	r3, [r2, #0]
		memcpy(msg.data[idx += sizeof(uint16_t)], &error_code, sizeof(uint16_t));
 8004606:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800460a:	3302      	adds	r3, #2
 800460c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004610:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004614:	3340      	adds	r3, #64	@ 0x40
 8004616:	443b      	add	r3, r7
 8004618:	f813 3c23 	ldrb.w	r3, [r3, #-35]
 800461c:	461a      	mov	r2, r3
 800461e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004622:	8013      	strh	r3, [r2, #0]

		return msg;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	461d      	mov	r5, r3
 8004628:	f107 041c 	add.w	r4, r7, #28
 800462c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462e:	6028      	str	r0, [r5, #0]
 8004630:	6069      	str	r1, [r5, #4]
 8004632:	60aa      	str	r2, [r5, #8]
 8004634:	60eb      	str	r3, [r5, #12]
 8004636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004638:	6128      	str	r0, [r5, #16]
 800463a:	6169      	str	r1, [r5, #20]
 800463c:	61aa      	str	r2, [r5, #24]
 800463e:	61eb      	str	r3, [r5, #28]

}
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	3744      	adds	r7, #68	@ 0x44
 8004644:	46bd      	mov	sp, r7
 8004646:	bcb0      	pop	{r4, r5, r7}
 8004648:	4770      	bx	lr

0800464a <_SX1272_setMode>:
 *
 * @param lora         Pointer to LoRa struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * =============================================================================== */
void _SX1272_setMode(SX1272_t *lora, SX1272_Mode mode) {
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	70fb      	strb	r3, [r7, #3]
  uint8_t regOpMode = SX1272_readRegister(lora, SX1272_REG_OP_MODE);
 8004656:	2101      	movs	r1, #1
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f918 	bl	800488e <SX1272_readRegister>
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]
  regOpMode &= ~0x07; // Mask to mode bits
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	f023 0307 	bic.w	r3, r3, #7
 8004668:	73fb      	strb	r3, [r7, #15]
  regOpMode |= mode;  // Set mode
 800466a:	7bfa      	ldrb	r2, [r7, #15]
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	4313      	orrs	r3, r2
 8004670:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE, regOpMode);
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	461a      	mov	r2, r3
 8004676:	2101      	movs	r1, #1
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8d4 	bl	8004826 <SX1272_writeRegister>
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <SX1272_enableBoost>:
 * @param  enable Boolean value for the enable toggle.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_enableBoost(SX1272_t *lora, bool enable) {
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	70fb      	strb	r3, [r7, #3]
  uint8_t regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG); // Read current config
 8004692:	2109      	movs	r1, #9
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8fa 	bl	800488e <SX1272_readRegister>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
  regPaConfig         &= ~SX1272_PA_SELECT;                               // Mask out PA select bit
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a4:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_PA_CONFIG, regPaConfig | SX1272_PA_SELECT);
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	2109      	movs	r1, #9
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8b7 	bl	8004826 <SX1272_writeRegister>
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <SX1272_standby>:
 * @param  *lora Pointer to LoRa struct.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_standby(SX1272_t *lora) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 80046c8:	2101      	movs	r1, #1
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ffbd 	bl	800464a <_SX1272_setMode>
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <SX1272_transmit>:
 *
 * @param lora         Pointer to SX1272 struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * ============================================================================================== */
void SX1272_transmit(SX1272_t *lora, uint8_t *pointerdata) {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 80046e2:	2101      	movs	r1, #1
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ffb0 	bl	800464a <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to TxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_TXDONE);
 80046ea:	2240      	movs	r2, #64	@ 0x40
 80046ec:	2140      	movs	r1, #64	@ 0x40
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f899 	bl	8004826 <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_TXDONE); // clears the IRQ flag
 80046f4:	2208      	movs	r2, #8
 80046f6:	2112      	movs	r1, #18
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f894 	bl	8004826 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // set pointer adddress to start
 80046fe:	2200      	movs	r2, #0
 8004700:	210d      	movs	r1, #13
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f88f 	bl	8004826 <SX1272_writeRegister>

  // Load data into transmit FIFO
  for (int i = 0; i < 32; i++) {
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e00b      	b.n	8004726 <SX1272_transmit+0x4e>
    SX1272_writeRegister(lora, SX1272_REG_FIFO, pointerdata[i]);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	4413      	add	r3, r2
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	2100      	movs	r1, #0
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f883 	bl	8004826 <SX1272_writeRegister>
  for (int i = 0; i < 32; i++) {
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3301      	adds	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b1f      	cmp	r3, #31
 800472a:	ddf0      	ble.n	800470e <SX1272_transmit+0x36>
  }

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_TX;       // Set local mode setting
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2203      	movs	r2, #3
 8004730:	711a      	strb	r2, [r3, #4]
  _SX1272_setMode(lora, lora->currentMode); // Start transmitting
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	791b      	ldrb	r3, [r3, #4]
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff86 	bl	800464a <_SX1272_setMode>
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <SX1272_startReceive>:
 * @brief Begins continuous receive on the SX1272.
 *
 * @param lora Pointer to SX1272 struct.
 **
 * ============================================================================================== */
void SX1272_startReceive(SX1272_t *lora) {
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 800474e:	2101      	movs	r1, #1
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff7a 	bl	800464a <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to RxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_RXDONE);
 8004756:	2200      	movs	r2, #0
 8004758:	2140      	movs	r1, #64	@ 0x40
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f863 	bl	8004826 <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE); // Clear the IRQ flag
 8004760:	2240      	movs	r2, #64	@ 0x40
 8004762:	2112      	movs	r1, #18
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f85e 	bl	8004826 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // Set pointer adddress to start
 800476a:	2200      	movs	r2, #0
 800476c:	210d      	movs	r1, #13
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f859 	bl	8004826 <SX1272_writeRegister>

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_RXCONTINUOUS; // Set local mode setting
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2205      	movs	r2, #5
 8004778:	711a      	strb	r2, [r3, #4]
  _SX1272_setMode(lora, lora->currentMode);     // Start receiving
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	791b      	ldrb	r3, [r3, #4]
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff ff62 	bl	800464a <_SX1272_setMode>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <SX1272_readReceive>:
 *
 * @return Boolean value indicating if a packet was successfully received and
 *         returned in buffer.
 **
 * ============================================================================================== */
bool SX1272_readReceive(SX1272_t *lora, uint8_t *buffer, uint8_t buffSize) {
 800478e:	b590      	push	{r4, r7, lr}
 8004790:	b087      	sub	sp, #28
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	4613      	mov	r3, r2
 800479a:	71fb      	strb	r3, [r7, #7]
  // starting the read. This is fine for cases where the user code carefully
  // manages the DIO interrupts, however ideally the method should check for
  // errors in the IRQ register and appropriately discard received packets.

  // Clear the IRQ flag
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE);
 800479c:	2240      	movs	r2, #64	@ 0x40
 800479e:	2112      	movs	r1, #18
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f840 	bl	8004826 <SX1272_writeRegister>

  // Read address and packet width information of received data
  uint8_t bytesReceived = SX1272_readRegister(lora, SX1272_REG_RX_BYTES);          // Number of bytes received
 80047a6:	2113      	movs	r1, #19
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f870 	bl	800488e <SX1272_readRegister>
 80047ae:	4603      	mov	r3, r0
 80047b0:	74fb      	strb	r3, [r7, #19]
  uint8_t rxCurrentAddr = SX1272_readRegister(lora, SX1272_REG_FIFO_RX_CURR_ADDR); // Address of last packet
 80047b2:	2110      	movs	r1, #16
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f86a 	bl	800488e <SX1272_readRegister>
 80047ba:	4603      	mov	r3, r0
 80047bc:	74bb      	strb	r3, [r7, #18]

  // Return error if buffer is smaller than the received data
  if (bytesReceived > buffSize)
 80047be:	7cfa      	ldrb	r2, [r7, #19]
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d901      	bls.n	80047ca <SX1272_readReceive+0x3c>
    return false;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e019      	b.n	80047fe <SX1272_readReceive+0x70>

  // Otherwise, set the address pointer and read each byte into buffer
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, rxCurrentAddr);
 80047ca:	7cbb      	ldrb	r3, [r7, #18]
 80047cc:	461a      	mov	r2, r3
 80047ce:	210d      	movs	r1, #13
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f828 	bl	8004826 <SX1272_writeRegister>
  for (int i = 0; i < bytesReceived; i++) {
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e00b      	b.n	80047f4 <SX1272_readReceive+0x66>
    buffer[i] = SX1272_readRegister(lora, SX1272_REG_FIFO);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	18d4      	adds	r4, r2, r3
 80047e2:	2100      	movs	r1, #0
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f852 	bl	800488e <SX1272_readRegister>
 80047ea:	4603      	mov	r3, r0
 80047ec:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytesReceived; i++) {
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	3301      	adds	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	dbef      	blt.n	80047dc <SX1272_readReceive+0x4e>
  }

  return true;
 80047fc:	2301      	movs	r3, #1
}
 80047fe:	4618      	mov	r0, r3
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	bd90      	pop	{r4, r7, pc}

08004806 <SX1272_clearIRQ>:
 * @param  flags 8-bit value representing flag bits to be set.
 *
 * @return @c NULL
 **
 * ============================================================================================== */
void SX1272_clearIRQ(SX1272_t *lora, uint8_t flags) {
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	70fb      	strb	r3, [r7, #3]
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, flags);
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	461a      	mov	r2, r3
 8004816:	2112      	movs	r1, #18
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f804 	bl	8004826 <SX1272_writeRegister>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <SX1272_writeRegister>:

/*************************************** INTERFACE METHODS ****************************************/

void SX1272_writeRegister(SX1272_t *lora, uint8_t address, uint8_t data) {
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	70fb      	strb	r3, [r7, #3]
 8004832:	4613      	mov	r3, r2
 8004834:	70bb      	strb	r3, [r7, #2]
  SPI *spi = lora->base;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  // Pull CS low
  spi->port->ODR &= ~spi->cs;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	6959      	ldr	r1, [r3, #20]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	43da      	mvns	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	400a      	ands	r2, r1
 800484e:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address | 0x80; // Load payload with address and write command
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004856:	72fb      	strb	r3, [r7, #11]
  spi->transmit(spi, payload);      // Transmit payload
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	7afa      	ldrb	r2, [r7, #11]
 800485e:	b292      	uxth	r2, r2
 8004860:	4611      	mov	r1, r2
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	4798      	blx	r3
  spi->transmit(spi, data);         // Transmit write data
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	78ba      	ldrb	r2, [r7, #2]
 800486c:	b292      	uxth	r2, r2
 800486e:	4611      	mov	r1, r2
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	4798      	blx	r3

  // Set CS high
  spi->port->ODR |= spi->cs;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	6959      	ldr	r1, [r3, #20]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	430a      	orrs	r2, r1
 8004884:	615a      	str	r2, [r3, #20]
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <SX1272_readRegister>:

uint8_t SX1272_readRegister(SX1272_t *lora, uint8_t address) {
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	70fb      	strb	r3, [r7, #3]
  uint8_t response = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]
  SPI *spi         = lora->base;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	613b      	str	r3, [r7, #16]

  // Pull CS low
  spi->port->ODR &= ~spi->cs;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	6959      	ldr	r1, [r3, #20]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	43da      	mvns	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	400a      	ands	r2, r1
 80048b6:	615a      	str	r2, [r3, #20]

  // Send write data and address
  uint8_t payload = address & 0x7F;              // Load payload with address and read command
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048be:	73fb      	strb	r3, [r7, #15]
  response        = spi->transmit(spi, payload); // Transmit payload
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	7bfa      	ldrb	r2, [r7, #15]
 80048c6:	b292      	uxth	r2, r2
 80048c8:	4611      	mov	r1, r2
 80048ca:	6938      	ldr	r0, [r7, #16]
 80048cc:	4798      	blx	r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]
  response        = spi->transmit(spi, 0xFF);    // Transmit dummy data and reasd response
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	21ff      	movs	r1, #255	@ 0xff
 80048d8:	6938      	ldr	r0, [r7, #16]
 80048da:	4798      	blx	r3
 80048dc:	4603      	mov	r3, r0
 80048de:	75fb      	strb	r3, [r7, #23]

  // Set CS high
  spi->port->ODR |= spi->cs;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	6959      	ldr	r1, [r3, #20]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	615a      	str	r2, [r3, #20]

  return response;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <__NVIC_EnableIRQ>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db0b      	blt.n	8004926 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	4907      	ldr	r1, [pc, #28]	@ (8004934 <__NVIC_EnableIRQ+0x38>)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2001      	movs	r0, #1
 800491e:	fa00 f202 	lsl.w	r2, r0, r2
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	e000e100 	.word	0xe000e100

08004938 <__NVIC_DisableIRQ>:
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	2b00      	cmp	r3, #0
 8004948:	db12      	blt.n	8004970 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	490a      	ldr	r1, [pc, #40]	@ (800497c <__NVIC_DisableIRQ+0x44>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2001      	movs	r0, #1
 800495a:	fa00 f202 	lsl.w	r2, r0, r2
 800495e:	3320      	adds	r3, #32
 8004960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004964:	f3bf 8f4f 	dsb	sy
}
 8004968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800496a:	f3bf 8f6f 	isb	sy
}
 800496e:	bf00      	nop
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	e000e100 	.word	0xe000e100

08004980 <__NVIC_SetPriority>:
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004990:	2b00      	cmp	r3, #0
 8004992:	db0a      	blt.n	80049aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	490c      	ldr	r1, [pc, #48]	@ (80049cc <__NVIC_SetPriority+0x4c>)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	0112      	lsls	r2, r2, #4
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	440b      	add	r3, r1
 80049a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80049a8:	e00a      	b.n	80049c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4908      	ldr	r1, [pc, #32]	@ (80049d0 <__NVIC_SetPriority+0x50>)
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	3b04      	subs	r3, #4
 80049b8:	0112      	lsls	r2, r2, #4
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	440b      	add	r3, r1
 80049be:	761a      	strb	r2, [r3, #24]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	e000e100 	.word	0xe000e100
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	00000000 	.word	0x00000000

080049d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049de:	f001 ffa5 	bl	800692c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049e2:	f001 f80d 	bl	8005a00 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  configureRCC_APB1();
 80049e6:	f7fc fe1b 	bl	8001620 <configureRCC_APB1>
  configureRCC_APB2();
 80049ea:	f7fc fe41 	bl	8001670 <configureRCC_APB2>
  configureRCC_AHB1();
 80049ee:	f7fc fe67 	bl	80016c0 <configureRCC_AHB1>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049f2:	f001 f875 	bl	8005ae0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  configureSPIBus1();
 80049f6:	f7fc fbdd 	bl	80011b4 <configureSPIBus1>
  configureSPIBus3();
 80049fa:	f7fc fcb3 	bl	8001364 <configureSPIBus3>
  configureSPIBus4();
 80049fe:	f7fc fd77 	bl	80014f0 <configureSPIBus4>
  configureI2CBus1();
 8004a02:	f7fc fb3b 	bl	800107c <configureI2CBus1>
  //void ADT75ARMZ_init(ADT75ARMZ * i2c, I2C_TypeDef *interface, GPIO_TypeDef *port, Type TEMPERATURE_SENSOR, uint8_t address)



  //interrupt driven GPIO*******************************************
  GPIO_init_interrupt(&LoRa_Rx_int, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x07);
 8004a06:	2307      	movs	r3, #7
 8004a08:	9302      	str	r3, [sp, #8]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	2301      	movs	r3, #1
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	2300      	movs	r3, #0
 8004a14:	2200      	movs	r2, #0
 8004a16:	49b2      	ldr	r1, [pc, #712]	@ (8004ce0 <main+0x308>)
 8004a18:	48b2      	ldr	r0, [pc, #712]	@ (8004ce4 <main+0x30c>)
 8004a1a:	f7fc ff67 	bl	80018ec <GPIO_init_interrupt>
  NVIC_DisableIRQ(EXTI9_5_IRQn); //easier than changing the function GPIO_init_interrupt
 8004a1e:	2017      	movs	r0, #23
 8004a20:	f7ff ff8a 	bl	8004938 <__NVIC_DisableIRQ>
//Interrupt Mapped PD7 -> SX DIO0
 //This will be enabled by default Upon the reading of the local switch state

  GPIO_init_interrupt(&temperature_alert, GPIOE, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_NO, 0x03);
 8004a24:	2303      	movs	r3, #3
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2300      	movs	r3, #0
 8004a32:	2200      	movs	r2, #0
 8004a34:	49ac      	ldr	r1, [pc, #688]	@ (8004ce8 <main+0x310>)
 8004a36:	48ad      	ldr	r0, [pc, #692]	@ (8004cec <main+0x314>)
 8004a38:	f7fc ff58 	bl	80018ec <GPIO_init_interrupt>
  NVIC_SetPriority(EXTI4_IRQn,11); //setting temperature warning alert as highest priority!
 8004a3c:	210b      	movs	r1, #11
 8004a3e:	200a      	movs	r0, #10
 8004a40:	f7ff ff9e 	bl	8004980 <__NVIC_SetPriority>
  //NVIC_DisableIRQ(EXTI4_IRQn);
//Interrupt Mapped to PE4 ->Ambient temperature alert

  GPIO_init_interrupt(&DUM_SW, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x01);
 8004a44:	2301      	movs	r3, #1
 8004a46:	9302      	str	r3, [sp, #8]
 8004a48:	2302      	movs	r3, #2
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2300      	movs	r3, #0
 8004a52:	2200      	movs	r2, #0
 8004a54:	49a6      	ldr	r1, [pc, #664]	@ (8004cf0 <main+0x318>)
 8004a56:	48a7      	ldr	r0, [pc, #668]	@ (8004cf4 <main+0x31c>)
 8004a58:	f7fc ff48 	bl	80018ec <GPIO_init_interrupt>
  DUM_SW.port->ODR |= DUMP_SW;//IMMEDIATELY setting high
 8004a5c:	4ba5      	ldr	r3, [pc, #660]	@ (8004cf4 <main+0x31c>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	4ba4      	ldr	r3, [pc, #656]	@ (8004cf4 <main+0x31c>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f042 0202 	orr.w	r2, r2, #2
 8004a6a:	615a      	str	r2, [r3, #20]
  //this GPIO interrupt was specifically made to operate on the falling edge!
  NVIC_SetPriority(EXTI1_IRQn,8);
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	2007      	movs	r0, #7
 8004a70:	f7ff ff86 	bl	8004980 <__NVIC_SetPriority>
  	  //PB1-> DUMP_SW (purge??)

  //Normal GPIO initialisations*********************************************************
  //LEDs first
  	  	  //make the pullup/down selection be internal pulldowns to match external circuit
  GPIO_init(&led_power, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8004a74:	2300      	movs	r3, #0
 8004a76:	9302      	str	r3, [sp, #8]
 8004a78:	2302      	movs	r3, #2
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	2300      	movs	r3, #0
 8004a82:	2201      	movs	r2, #1
 8004a84:	499c      	ldr	r1, [pc, #624]	@ (8004cf8 <main+0x320>)
 8004a86:	489d      	ldr	r0, [pc, #628]	@ (8004cfc <main+0x324>)
 8004a88:	f7fc fe9a 	bl	80017c0 <GPIO_init>
  	  //PG0 -> Power LED
  GPIO_init(&led_local, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x01);
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	2302      	movs	r3, #2
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	2301      	movs	r3, #1
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4996      	ldr	r1, [pc, #600]	@ (8004cf8 <main+0x320>)
 8004a9e:	4898      	ldr	r0, [pc, #608]	@ (8004d00 <main+0x328>)
 8004aa0:	f7fc fe8e 	bl	80017c0 <GPIO_init>
  	  //PG1 -> local LED
  GPIO_init(&led_remote, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x07);
 8004aa4:	2307      	movs	r3, #7
 8004aa6:	9302      	str	r3, [sp, #8]
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	2301      	movs	r3, #1
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	498c      	ldr	r1, [pc, #560]	@ (8004ce8 <main+0x310>)
 8004ab6:	4893      	ldr	r0, [pc, #588]	@ (8004d04 <main+0x32c>)
 8004ab8:	f7fc fe82 	bl	80017c0 <GPIO_init>
  	  //PE7 -> remote LED
  GPIO_init(&led_transducer, GPIOE, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);
 8004abc:	2308      	movs	r3, #8
 8004abe:	9302      	str	r3, [sp, #8]
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2201      	movs	r2, #1
 8004acc:	4986      	ldr	r1, [pc, #536]	@ (8004ce8 <main+0x310>)
 8004ace:	488e      	ldr	r0, [pc, #568]	@ (8004d08 <main+0x330>)
 8004ad0:	f7fc fe76 	bl	80017c0 <GPIO_init>
	  //PE8 -> transducer LED
  GPIO_init(&led_n2o, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 8004ad4:	2305      	movs	r3, #5
 8004ad6:	9302      	str	r3, [sp, #8]
 8004ad8:	2302      	movs	r3, #2
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	2301      	movs	r3, #1
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	4984      	ldr	r1, [pc, #528]	@ (8004cf8 <main+0x320>)
 8004ae6:	4889      	ldr	r0, [pc, #548]	@ (8004d0c <main+0x334>)
 8004ae8:	f7fc fe6a 	bl	80017c0 <GPIO_init>
	  //PG5 -> nitrous LED
  GPIO_init(&led_O2, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x06);
 8004aec:	2306      	movs	r3, #6
 8004aee:	9302      	str	r3, [sp, #8]
 8004af0:	2302      	movs	r3, #2
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	2301      	movs	r3, #1
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	2300      	movs	r3, #0
 8004afa:	2201      	movs	r2, #1
 8004afc:	497e      	ldr	r1, [pc, #504]	@ (8004cf8 <main+0x320>)
 8004afe:	4884      	ldr	r0, [pc, #528]	@ (8004d10 <main+0x338>)
 8004b00:	f7fc fe5e 	bl	80017c0 <GPIO_init>
  	 //PG6 -> nitrous LED
//THESE LEDS WILL BE SET ONCE AN ERROR OCCURS WITH THEIR RESPECTIVE FUNCTION

  //Control GPIO
  GPIO_init(&activate_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8004b04:	230f      	movs	r3, #15
 8004b06:	9302      	str	r3, [sp, #8]
 8004b08:	2302      	movs	r3, #2
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2300      	movs	r3, #0
 8004b12:	2200      	movs	r2, #0
 8004b14:	497f      	ldr	r1, [pc, #508]	@ (8004d14 <main+0x33c>)
 8004b16:	4880      	ldr	r0, [pc, #512]	@ (8004d18 <main+0x340>)
 8004b18:	f7fc fe52 	bl	80017c0 <GPIO_init>
  	  //PF15-> Activate_sys SW
  GPIO_init(&local_control_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 8004b1c:	230e      	movs	r3, #14
 8004b1e:	9302      	str	r3, [sp, #8]
 8004b20:	2302      	movs	r3, #2
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	2301      	movs	r3, #1
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4979      	ldr	r1, [pc, #484]	@ (8004d14 <main+0x33c>)
 8004b2e:	487b      	ldr	r0, [pc, #492]	@ (8004d1c <main+0x344>)
 8004b30:	f7fc fe46 	bl	80017c0 <GPIO_init>
	  //PF14-> Local_control SW
  GPIO_init(&N2O_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8004b34:	230d      	movs	r3, #13
 8004b36:	9302      	str	r3, [sp, #8]
 8004b38:	2302      	movs	r3, #2
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2300      	movs	r3, #0
 8004b42:	2200      	movs	r2, #0
 8004b44:	4973      	ldr	r1, [pc, #460]	@ (8004d14 <main+0x33c>)
 8004b46:	4876      	ldr	r0, [pc, #472]	@ (8004d20 <main+0x348>)
 8004b48:	f7fc fe3a 	bl	80017c0 <GPIO_init>
  	  //PF13-> N20_ISO SW
  GPIO_init(&O2_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	9302      	str	r3, [sp, #8]
 8004b50:	2302      	movs	r3, #2
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	2301      	movs	r3, #1
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	496d      	ldr	r1, [pc, #436]	@ (8004d14 <main+0x33c>)
 8004b5e:	4871      	ldr	r0, [pc, #452]	@ (8004d24 <main+0x34c>)
 8004b60:	f7fc fe2e 	bl	80017c0 <GPIO_init>
   	  //PF12-> O2_ISO SW
  GPIO_init(&IGNITION_IS_SW, GPIOF, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8004b64:	230b      	movs	r3, #11
 8004b66:	9302      	str	r3, [sp, #8]
 8004b68:	2302      	movs	r3, #2
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2300      	movs	r3, #0
 8004b72:	2200      	movs	r2, #0
 8004b74:	4967      	ldr	r1, [pc, #412]	@ (8004d14 <main+0x33c>)
 8004b76:	486c      	ldr	r0, [pc, #432]	@ (8004d28 <main+0x350>)
 8004b78:	f7fc fe22 	bl	80017c0 <GPIO_init>
	  //PF11-> IGNITION_ISO SW
  GPIO_init(&N2O_DEAD_SW, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x00);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9302      	str	r3, [sp, #8]
 8004b80:	2302      	movs	r3, #2
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	2301      	movs	r3, #1
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	4958      	ldr	r1, [pc, #352]	@ (8004cf0 <main+0x318>)
 8004b8e:	4867      	ldr	r0, [pc, #412]	@ (8004d2c <main+0x354>)
 8004b90:	f7fc fe16 	bl	80017c0 <GPIO_init>
	  //PB0-> N2O_DEADMAN_SW
  GPIO_init(&O2_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x05);
 8004b94:	2305      	movs	r3, #5
 8004b96:	9302      	str	r3, [sp, #8]
 8004b98:	2302      	movs	r3, #2
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	4962      	ldr	r1, [pc, #392]	@ (8004d30 <main+0x358>)
 8004ba6:	4863      	ldr	r0, [pc, #396]	@ (8004d34 <main+0x35c>)
 8004ba8:	f7fc fe0a 	bl	80017c0 <GPIO_init>
  	  //PC5-> O2_DEADMAN_SW
  GPIO_init(&IGNITE_DEAD_SW, GPIOC, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x04);
 8004bac:	2304      	movs	r3, #4
 8004bae:	9302      	str	r3, [sp, #8]
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2200      	movs	r2, #0
 8004bbc:	495c      	ldr	r1, [pc, #368]	@ (8004d30 <main+0x358>)
 8004bbe:	485e      	ldr	r0, [pc, #376]	@ (8004d38 <main+0x360>)
 8004bc0:	f7fc fdfe 	bl	80017c0 <GPIO_init>
	  //PC4-> IGNITE_DEADMAN_SW

  //Ignite actuation
  GPIO_init(&Ignition1_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8004bc4:	230f      	movs	r3, #15
 8004bc6:	9302      	str	r3, [sp, #8]
 8004bc8:	2302      	movs	r3, #2
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4942      	ldr	r1, [pc, #264]	@ (8004ce0 <main+0x308>)
 8004bd6:	4859      	ldr	r0, [pc, #356]	@ (8004d3c <main+0x364>)
 8004bd8:	f7fc fdf2 	bl	80017c0 <GPIO_init>
  GPIO_init(&Ignition1_OP ,GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 8004bdc:	230e      	movs	r3, #14
 8004bde:	9302      	str	r3, [sp, #8]
 8004be0:	2302      	movs	r3, #2
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	2301      	movs	r3, #1
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	2300      	movs	r3, #0
 8004bea:	2201      	movs	r2, #1
 8004bec:	493c      	ldr	r1, [pc, #240]	@ (8004ce0 <main+0x308>)
 8004bee:	4854      	ldr	r0, [pc, #336]	@ (8004d40 <main+0x368>)
 8004bf0:	f7fc fde6 	bl	80017c0 <GPIO_init>
  GPIO_init(&Ignition2_ARM, GPIOG, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x03);
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	9302      	str	r3, [sp, #8]
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	2201      	movs	r2, #1
 8004c04:	493c      	ldr	r1, [pc, #240]	@ (8004cf8 <main+0x320>)
 8004c06:	484f      	ldr	r0, [pc, #316]	@ (8004d44 <main+0x36c>)
 8004c08:	f7fc fdda 	bl	80017c0 <GPIO_init>
  GPIO_init(&Ignition2_OP ,GPIOG, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x02);
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	9302      	str	r3, [sp, #8]
 8004c10:	2302      	movs	r3, #2
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	2301      	movs	r3, #1
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4936      	ldr	r1, [pc, #216]	@ (8004cf8 <main+0x320>)
 8004c1e:	484a      	ldr	r0, [pc, #296]	@ (8004d48 <main+0x370>)
 8004c20:	f7fc fdce 	bl	80017c0 <GPIO_init>

  //Relay Actuation
  //Relay 1 ->PURGE Relay
  GPIO_init(&CH1_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x09);
 8004c24:	2309      	movs	r3, #9
 8004c26:	9302      	str	r3, [sp, #8]
 8004c28:	2302      	movs	r3, #2
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	2201      	movs	r2, #1
 8004c34:	492e      	ldr	r1, [pc, #184]	@ (8004cf0 <main+0x318>)
 8004c36:	4845      	ldr	r0, [pc, #276]	@ (8004d4c <main+0x374>)
 8004c38:	f7fc fdc2 	bl	80017c0 <GPIO_init>
  GPIO_init(&CH1_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0C);
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	2302      	movs	r3, #2
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	2301      	movs	r3, #1
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4928      	ldr	r1, [pc, #160]	@ (8004cf0 <main+0x318>)
 8004c4e:	4840      	ldr	r0, [pc, #256]	@ (8004d50 <main+0x378>)
 8004c50:	f7fc fdb6 	bl	80017c0 <GPIO_init>
  GPIO_init(&CH1_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0F);
 8004c54:	230f      	movs	r3, #15
 8004c56:	9302      	str	r3, [sp, #8]
 8004c58:	2302      	movs	r3, #2
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	2300      	movs	r3, #0
 8004c62:	2200      	movs	r2, #0
 8004c64:	4922      	ldr	r1, [pc, #136]	@ (8004cf0 <main+0x318>)
 8004c66:	483b      	ldr	r0, [pc, #236]	@ (8004d54 <main+0x37c>)
 8004c68:	f7fc fdaa 	bl	80017c0 <GPIO_init>
  //Relay 2 -> O2 Relay
  GPIO_init(&CH2_OP, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8004c6c:	230d      	movs	r3, #13
 8004c6e:	9302      	str	r3, [sp, #8]
 8004c70:	2302      	movs	r3, #2
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	2301      	movs	r3, #1
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	491c      	ldr	r1, [pc, #112]	@ (8004cf0 <main+0x318>)
 8004c7e:	4836      	ldr	r0, [pc, #216]	@ (8004d58 <main+0x380>)
 8004c80:	f7fc fd9e 	bl	80017c0 <GPIO_init>
  GPIO_init(&CH2_ARM, GPIOB, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0E);
 8004c84:	230e      	movs	r3, #14
 8004c86:	9302      	str	r3, [sp, #8]
 8004c88:	2302      	movs	r3, #2
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	2201      	movs	r2, #1
 8004c94:	4916      	ldr	r1, [pc, #88]	@ (8004cf0 <main+0x318>)
 8004c96:	4831      	ldr	r0, [pc, #196]	@ (8004d5c <main+0x384>)
 8004c98:	f7fc fd92 	bl	80017c0 <GPIO_init>
  GPIO_init(&CH2_MON, GPIOB, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0B);
 8004c9c:	230b      	movs	r3, #11
 8004c9e:	9302      	str	r3, [sp, #8]
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2200      	movs	r2, #0
 8004cac:	4910      	ldr	r1, [pc, #64]	@ (8004cf0 <main+0x318>)
 8004cae:	482c      	ldr	r0, [pc, #176]	@ (8004d60 <main+0x388>)
 8004cb0:	f7fc fd86 	bl	80017c0 <GPIO_init>
  //Relay 3 -> N20 Relay
  GPIO_init(&CH3_OP, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x09);
 8004cb4:	2309      	movs	r3, #9
 8004cb6:	9302      	str	r3, [sp, #8]
 8004cb8:	2302      	movs	r3, #2
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4906      	ldr	r1, [pc, #24]	@ (8004ce0 <main+0x308>)
 8004cc6:	4827      	ldr	r0, [pc, #156]	@ (8004d64 <main+0x38c>)
 8004cc8:	f7fc fd7a 	bl	80017c0 <GPIO_init>
  GPIO_init(&CH3_ARM, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0A);
 8004ccc:	230a      	movs	r3, #10
 8004cce:	9302      	str	r3, [sp, #8]
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4900      	ldr	r1, [pc, #0]	@ (8004ce0 <main+0x308>)
 8004cde:	e043      	b.n	8004d68 <main+0x390>
 8004ce0:	40020c00 	.word	0x40020c00
 8004ce4:	2000024c 	.word	0x2000024c
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	20000264 	.word	0x20000264
 8004cf0:	40020400 	.word	0x40020400
 8004cf4:	20000474 	.word	0x20000474
 8004cf8:	40021800 	.word	0x40021800
 8004cfc:	200003b4 	.word	0x200003b4
 8004d00:	200003cc 	.word	0x200003cc
 8004d04:	200003e4 	.word	0x200003e4
 8004d08:	200003fc 	.word	0x200003fc
 8004d0c:	20000414 	.word	0x20000414
 8004d10:	2000042c 	.word	0x2000042c
 8004d14:	40021400 	.word	0x40021400
 8004d18:	20000444 	.word	0x20000444
 8004d1c:	2000045c 	.word	0x2000045c
 8004d20:	2000048c 	.word	0x2000048c
 8004d24:	200004a4 	.word	0x200004a4
 8004d28:	200004bc 	.word	0x200004bc
 8004d2c:	200004d4 	.word	0x200004d4
 8004d30:	40020800 	.word	0x40020800
 8004d34:	200004ec 	.word	0x200004ec
 8004d38:	20000504 	.word	0x20000504
 8004d3c:	20000354 	.word	0x20000354
 8004d40:	2000036c 	.word	0x2000036c
 8004d44:	20000384 	.word	0x20000384
 8004d48:	2000039c 	.word	0x2000039c
 8004d4c:	2000027c 	.word	0x2000027c
 8004d50:	20000294 	.word	0x20000294
 8004d54:	200002ac 	.word	0x200002ac
 8004d58:	200002c4 	.word	0x200002c4
 8004d5c:	200002dc 	.word	0x200002dc
 8004d60:	200002f4 	.word	0x200002f4
 8004d64:	2000030c 	.word	0x2000030c
 8004d68:	489d      	ldr	r0, [pc, #628]	@ (8004fe0 <main+0x608>)
 8004d6a:	f7fc fd29 	bl	80017c0 <GPIO_init>
  GPIO_init(&CH3_MON, GPIOD, GPIO_MODER_GENERAL_PURPOSE_OUTPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x0D);
 8004d6e:	230d      	movs	r3, #13
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	2302      	movs	r3, #2
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	2301      	movs	r3, #1
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	4999      	ldr	r1, [pc, #612]	@ (8004fe4 <main+0x60c>)
 8004d80:	4899      	ldr	r0, [pc, #612]	@ (8004fe8 <main+0x610>)
 8004d82:	f7fc fd1d 	bl	80017c0 <GPIO_init>
  GPIO_init(&CH4_MON, GPIOD, GPIO_MODER_INPUT, GPIO_OTYPER_PUSH, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDRy_DOWN, 0x08);*/



  //LoRa initialisation
  SX1272_init(&lora,"GSE_LORA", LORA_PORT, LORA_CS, SX1272_BW500, SX1272_SF9, SX1272_CR5);
 8004d86:	2301      	movs	r3, #1
 8004d88:	9302      	str	r3, [sp, #8]
 8004d8a:	2309      	movs	r3, #9
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	2302      	movs	r3, #2
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d96:	4a95      	ldr	r2, [pc, #596]	@ (8004fec <main+0x614>)
 8004d98:	4995      	ldr	r1, [pc, #596]	@ (8004ff0 <main+0x618>)
 8004d9a:	4896      	ldr	r0, [pc, #600]	@ (8004ff4 <main+0x61c>)
 8004d9c:	f7ff fae8 	bl	8004370 <SX1272_init>
  //sensor configuration
  ADT75ARMZ_init(&temp_sensor, I2C1, GPIOF,TEMPERATURE_SENSOR, 0x48);
 8004da0:	2348      	movs	r3, #72	@ 0x48
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2301      	movs	r3, #1
 8004da6:	4a94      	ldr	r2, [pc, #592]	@ (8004ff8 <main+0x620>)
 8004da8:	4994      	ldr	r1, [pc, #592]	@ (8004ffc <main+0x624>)
 8004daa:	4895      	ldr	r0, [pc, #596]	@ (8005000 <main+0x628>)
 8004dac:	f001 fb3e 	bl	800642c <ADT75ARMZ_init>
  MCP96RL00_EMX_1_init(&thermocouple_1,I2C1, GPIOF, THERMOCOUPLE, THERMO_SAMPLE_8, RESOLUTION_HIGH, 0x60);
 8004db0:	2360      	movs	r3, #96	@ 0x60
 8004db2:	9302      	str	r3, [sp, #8]
 8004db4:	2301      	movs	r3, #1
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	2303      	movs	r3, #3
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4a8e      	ldr	r2, [pc, #568]	@ (8004ff8 <main+0x620>)
 8004dc0:	498e      	ldr	r1, [pc, #568]	@ (8004ffc <main+0x624>)
 8004dc2:	4890      	ldr	r0, [pc, #576]	@ (8005004 <main+0x62c>)
 8004dc4:	f001 f9fc 	bl	80061c0 <MCP96RL00_EMX_1_init>
  MCP96RL00_EMX_1_init(&thermocouple_2,I2C1, GPIOF, THERMOCOUPLE, THERMO_SAMPLE_8, RESOLUTION_HIGH, 0x61);
 8004dc8:	2361      	movs	r3, #97	@ 0x61
 8004dca:	9302      	str	r3, [sp, #8]
 8004dcc:	2301      	movs	r3, #1
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4a88      	ldr	r2, [pc, #544]	@ (8004ff8 <main+0x620>)
 8004dd8:	4988      	ldr	r1, [pc, #544]	@ (8004ffc <main+0x624>)
 8004dda:	488b      	ldr	r0, [pc, #556]	@ (8005008 <main+0x630>)
 8004ddc:	f001 f9f0 	bl	80061c0 <MCP96RL00_EMX_1_init>
  MCP96RL00_EMX_1_init(&thermocouple_3,I2C1, GPIOF, THERMOCOUPLE, THERMO_SAMPLE_8, RESOLUTION_HIGH, 0x62);
 8004de0:	2362      	movs	r3, #98	@ 0x62
 8004de2:	9302      	str	r3, [sp, #8]
 8004de4:	2301      	movs	r3, #1
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	2303      	movs	r3, #3
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	4a82      	ldr	r2, [pc, #520]	@ (8004ff8 <main+0x620>)
 8004df0:	4982      	ldr	r1, [pc, #520]	@ (8004ffc <main+0x624>)
 8004df2:	4886      	ldr	r0, [pc, #536]	@ (800500c <main+0x634>)
 8004df4:	f001 f9e4 	bl	80061c0 <MCP96RL00_EMX_1_init>
  MCP96RL00_EMX_1_init(&thermocouple_4,I2C1, GPIOF, THERMOCOUPLE, THERMO_SAMPLE_8, RESOLUTION_HIGH, 0x63);
 8004df8:	2363      	movs	r3, #99	@ 0x63
 8004dfa:	9302      	str	r3, [sp, #8]
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	2303      	movs	r3, #3
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	4a7c      	ldr	r2, [pc, #496]	@ (8004ff8 <main+0x620>)
 8004e08:	497c      	ldr	r1, [pc, #496]	@ (8004ffc <main+0x624>)
 8004e0a:	4881      	ldr	r0, [pc, #516]	@ (8005010 <main+0x638>)
 8004e0c:	f001 f9d8 	bl	80061c0 <MCP96RL00_EMX_1_init>
  //conversion rate is 63ms for thermocouple conversion. Conversion will be 63ms + (time it takes to do 4 I2C read operations)
  ADC124S021_init(&LoadCells,Load_Cell, LOAD_CELL_PORT, LOAD_CELL_CS);
 8004e10:	2304      	movs	r3, #4
 8004e12:	4a80      	ldr	r2, [pc, #512]	@ (8005014 <main+0x63c>)
 8004e14:	2100      	movs	r1, #0
 8004e16:	4880      	ldr	r0, [pc, #512]	@ (8005018 <main+0x640>)
 8004e18:	f001 f88e 	bl	8005f38 <ADC124S021_init>
  ADC124S021_init(&Transducers,Transducer, TRANSDUCER_PORT, TRANSDUCER_CS);
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	4a73      	ldr	r2, [pc, #460]	@ (8004fec <main+0x614>)
 8004e20:	2101      	movs	r1, #1
 8004e22:	487e      	ldr	r0, [pc, #504]	@ (800501c <main+0x644>)
 8004e24:	f001 f888 	bl	8005f38 <ADC124S021_init>

  configure_TIM1(); //start LoRa timer -> as late as possible!
 8004e28:	f7fc fc66 	bl	80016f8 <configure_TIM1>
 *  B0: System Activate -> nothing can be done unless this bit is set
 */

  while (1)
  {
	switch(switch_case_state){
 8004e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8005020 <main+0x648>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b0f      	cmp	r3, #15
 8004e32:	dc27      	bgt.n	8004e84 <main+0x4ac>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	dbf9      	blt.n	8004e2c <main+0x454>
 8004e38:	2b0f      	cmp	r3, #15
 8004e3a:	d8f7      	bhi.n	8004e2c <main+0x454>
 8004e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <main+0x46c>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e8d 	.word	0x08004e8d
 8004e48:	0800526d 	.word	0x0800526d
 8004e4c:	080052e1 	.word	0x080052e1
 8004e50:	08005377 	.word	0x08005377
 8004e54:	0800539b 	.word	0x0800539b
 8004e58:	08004e2d 	.word	0x08004e2d
 8004e5c:	08004e2d 	.word	0x08004e2d
 8004e60:	08005761 	.word	0x08005761
 8004e64:	080057ff 	.word	0x080057ff
 8004e68:	08005865 	.word	0x08005865
 8004e6c:	080058bd 	.word	0x080058bd
 8004e70:	08005925 	.word	0x08005925
 8004e74:	08004e2d 	.word	0x08004e2d
 8004e78:	08004e2d 	.word	0x08004e2d
 8004e7c:	08004e2d 	.word	0x08004e2d
 8004e80:	080054e5 	.word	0x080054e5
 8004e84:	2b80      	cmp	r3, #128	@ 0x80
 8004e86:	f000 8575 	beq.w	8005974 <main+0xf9c>
 8004e8a:	e7cf      	b.n	8004e2c <main+0x454>
	case 0: //This state is the default state -> reading sensor information and initial error checks!
		MCP96RL00_EMX_1_extract(&thermocouple_1, 0x60, data_thermo);
 8004e8c:	4a65      	ldr	r2, [pc, #404]	@ (8005024 <main+0x64c>)
 8004e8e:	2160      	movs	r1, #96	@ 0x60
 8004e90:	485c      	ldr	r0, [pc, #368]	@ (8005004 <main+0x62c>)
 8004e92:	f001 f9df 	bl	8006254 <MCP96RL00_EMX_1_extract>
		MCP96RL00_EMX_1_process(&thermocouple_1);
 8004e96:	485b      	ldr	r0, [pc, #364]	@ (8005004 <main+0x62c>)
 8004e98:	f001 fa06 	bl	80062a8 <MCP96RL00_EMX_1_process>
		MCP96RL00_EMX_1_extract(&thermocouple_2, 0x61, data_thermo);//if variable data_thermo needs to be changed, make separate variables for each
 8004e9c:	4a61      	ldr	r2, [pc, #388]	@ (8005024 <main+0x64c>)
 8004e9e:	2161      	movs	r1, #97	@ 0x61
 8004ea0:	4859      	ldr	r0, [pc, #356]	@ (8005008 <main+0x630>)
 8004ea2:	f001 f9d7 	bl	8006254 <MCP96RL00_EMX_1_extract>
		MCP96RL00_EMX_1_process(&thermocouple_2);
 8004ea6:	4858      	ldr	r0, [pc, #352]	@ (8005008 <main+0x630>)
 8004ea8:	f001 f9fe 	bl	80062a8 <MCP96RL00_EMX_1_process>
		MCP96RL00_EMX_1_extract(&thermocouple_3, 0x62, data_thermo);
 8004eac:	4a5d      	ldr	r2, [pc, #372]	@ (8005024 <main+0x64c>)
 8004eae:	2162      	movs	r1, #98	@ 0x62
 8004eb0:	4856      	ldr	r0, [pc, #344]	@ (800500c <main+0x634>)
 8004eb2:	f001 f9cf 	bl	8006254 <MCP96RL00_EMX_1_extract>
		MCP96RL00_EMX_1_process(&thermocouple_3);
 8004eb6:	4855      	ldr	r0, [pc, #340]	@ (800500c <main+0x634>)
 8004eb8:	f001 f9f6 	bl	80062a8 <MCP96RL00_EMX_1_process>
		MCP96RL00_EMX_1_extract(&thermocouple_4, 0x63, data_thermo);
 8004ebc:	4a59      	ldr	r2, [pc, #356]	@ (8005024 <main+0x64c>)
 8004ebe:	2163      	movs	r1, #99	@ 0x63
 8004ec0:	4853      	ldr	r0, [pc, #332]	@ (8005010 <main+0x638>)
 8004ec2:	f001 f9c7 	bl	8006254 <MCP96RL00_EMX_1_extract>
		MCP96RL00_EMX_1_process(&thermocouple_4);
 8004ec6:	4852      	ldr	r0, [pc, #328]	@ (8005010 <main+0x638>)
 8004ec8:	f001 f9ee 	bl	80062a8 <MCP96RL00_EMX_1_process>
			//go into purge state IMMEDIATELY
			if(thermocouple_1.temperature >38){switch_case_state = 10; error |=(0x01<<11);}//error flag SPECIFICALLY for thermo couple 1
 8004ecc:	4b4d      	ldr	r3, [pc, #308]	@ (8005004 <main+0x62c>)
 8004ece:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004ed2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8005028 <main+0x650>
 8004ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	dd0a      	ble.n	8004ef6 <main+0x51e>
 8004ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8005020 <main+0x648>)
 8004ee2:	220a      	movs	r2, #10
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	4b51      	ldr	r3, [pc, #324]	@ (800502c <main+0x654>)
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	4b4e      	ldr	r3, [pc, #312]	@ (800502c <main+0x654>)
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e0af      	b.n	8005056 <main+0x67e>
				else if(thermocouple_2.temperature >38){switch_case_state = 10; error |=(0x01<<10);}//error flag SPECIFICALLY for thermo couple 2
 8004ef6:	4b44      	ldr	r3, [pc, #272]	@ (8005008 <main+0x630>)
 8004ef8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004efc:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8005028 <main+0x650>
 8004f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f08:	dd0a      	ble.n	8004f20 <main+0x548>
 8004f0a:	4b45      	ldr	r3, [pc, #276]	@ (8005020 <main+0x648>)
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	4b46      	ldr	r3, [pc, #280]	@ (800502c <main+0x654>)
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	4b44      	ldr	r3, [pc, #272]	@ (800502c <main+0x654>)
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	e09a      	b.n	8005056 <main+0x67e>
				else if(thermocouple_3.temperature >38){switch_case_state = 10; error |=(0x01<<9);}//error flag SPECIFICALLY for thermo couple 3
 8004f20:	4b3a      	ldr	r3, [pc, #232]	@ (800500c <main+0x634>)
 8004f22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004f26:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8005028 <main+0x650>
 8004f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	dd0a      	ble.n	8004f4a <main+0x572>
 8004f34:	4b3a      	ldr	r3, [pc, #232]	@ (8005020 <main+0x648>)
 8004f36:	220a      	movs	r2, #10
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800502c <main+0x654>)
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	4b39      	ldr	r3, [pc, #228]	@ (800502c <main+0x654>)
 8004f46:	801a      	strh	r2, [r3, #0]
 8004f48:	e085      	b.n	8005056 <main+0x67e>
				else if(thermocouple_4.temperature >38){switch_case_state = 10; error |=(0x01<<8);}//error flag SPECIFICALLY for thermo couple 4
 8004f4a:	4b31      	ldr	r3, [pc, #196]	@ (8005010 <main+0x638>)
 8004f4c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004f50:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8005028 <main+0x650>
 8004f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	dd0a      	ble.n	8004f74 <main+0x59c>
 8004f5e:	4b30      	ldr	r3, [pc, #192]	@ (8005020 <main+0x648>)
 8004f60:	220a      	movs	r2, #10
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	4b31      	ldr	r3, [pc, #196]	@ (800502c <main+0x654>)
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800502c <main+0x654>)
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	e070      	b.n	8005056 <main+0x67e>
			else{
					if(thermocouple_1.temperature >=35){error |=(0x01<<11);}//set just error flag/no purge state
 8004f74:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <main+0x62c>)
 8004f76:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004f7a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8005030 <main+0x658>
 8004f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f86:	db07      	blt.n	8004f98 <main+0x5c0>
 8004f88:	4b28      	ldr	r3, [pc, #160]	@ (800502c <main+0x654>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	4b26      	ldr	r3, [pc, #152]	@ (800502c <main+0x654>)
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	e05e      	b.n	8005056 <main+0x67e>
						else if(thermocouple_2.temperature >=35){error |=(0x01<<10);}
 8004f98:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <main+0x630>)
 8004f9a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004f9e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005030 <main+0x658>
 8004fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004faa:	db07      	blt.n	8004fbc <main+0x5e4>
 8004fac:	4b1f      	ldr	r3, [pc, #124]	@ (800502c <main+0x654>)
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <main+0x654>)
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	e04c      	b.n	8005056 <main+0x67e>
						else if(thermocouple_3.temperature >=35){error |=(0x01<<9);}
 8004fbc:	4b13      	ldr	r3, [pc, #76]	@ (800500c <main+0x634>)
 8004fbe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004fc2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8005030 <main+0x658>
 8004fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	db31      	blt.n	8005034 <main+0x65c>
 8004fd0:	4b16      	ldr	r3, [pc, #88]	@ (800502c <main+0x654>)
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	4b14      	ldr	r3, [pc, #80]	@ (800502c <main+0x654>)
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	e03a      	b.n	8005056 <main+0x67e>
 8004fe0:	20000324 	.word	0x20000324
 8004fe4:	40020c00 	.word	0x40020c00
 8004fe8:	2000033c 	.word	0x2000033c
 8004fec:	40021800 	.word	0x40021800
 8004ff0:	08007534 	.word	0x08007534
 8004ff4:	20000038 	.word	0x20000038
 8004ff8:	40021400 	.word	0x40021400
 8004ffc:	40005400 	.word	0x40005400
 8005000:	20000078 	.word	0x20000078
 8005004:	200000ac 	.word	0x200000ac
 8005008:	200000e8 	.word	0x200000e8
 800500c:	20000124 	.word	0x20000124
 8005010:	20000160 	.word	0x20000160
 8005014:	40020000 	.word	0x40020000
 8005018:	2000019c 	.word	0x2000019c
 800501c:	200001f4 	.word	0x200001f4
 8005020:	20000028 	.word	0x20000028
 8005024:	20000034 	.word	0x20000034
 8005028:	42180000 	.word	0x42180000
 800502c:	2000002c 	.word	0x2000002c
 8005030:	420c0000 	.word	0x420c0000
						else if(thermocouple_4.temperature >=35){error |=(0x01<<8);}
 8005034:	4b9e      	ldr	r3, [pc, #632]	@ (80052b0 <main+0x8d8>)
 8005036:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800503a:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80052b4 <main+0x8dc>
 800503e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	db06      	blt.n	8005056 <main+0x67e>
 8005048:	4b9b      	ldr	r3, [pc, #620]	@ (80052b8 <main+0x8e0>)
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005050:	b29a      	uxth	r2, r3
 8005052:	4b99      	ldr	r3, [pc, #612]	@ (80052b8 <main+0x8e0>)
 8005054:	801a      	strh	r2, [r3, #0]
					else{} //make it so nothing happens here -> proceed
				}
	ADC124S021_extract(&Transducers);
 8005056:	4899      	ldr	r0, [pc, #612]	@ (80052bc <main+0x8e4>)
 8005058:	f000 ff96 	bl	8005f88 <ADC124S021_extract>
	ADC124S021_process(&Transducers);
 800505c:	4897      	ldr	r0, [pc, #604]	@ (80052bc <main+0x8e4>)
 800505e:	f001 f80f 	bl	8006080 <ADC124S021_process>
	if(Transducers.Converted_Value_Transducer[0] >=68){switch_case_state = 10; error |=(0x01<<7);}//error flag SPECIFICALLY for Transducer1..etc
 8005062:	4b96      	ldr	r3, [pc, #600]	@ (80052bc <main+0x8e4>)
 8005064:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005068:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80052c0 <main+0x8e8>
 800506c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005074:	db0a      	blt.n	800508c <main+0x6b4>
 8005076:	4b93      	ldr	r3, [pc, #588]	@ (80052c4 <main+0x8ec>)
 8005078:	220a      	movs	r2, #10
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	4b8e      	ldr	r3, [pc, #568]	@ (80052b8 <main+0x8e0>)
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005084:	b29a      	uxth	r2, r3
 8005086:	4b8c      	ldr	r3, [pc, #560]	@ (80052b8 <main+0x8e0>)
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e085      	b.n	8005198 <main+0x7c0>
				else if(Transducers.Converted_Value_Transducer[1] >=68){switch_case_state = 10; error |=(0x01<<6); }//error flag SPECIFICALLY for Transducer2 check
 800508c:	4b8b      	ldr	r3, [pc, #556]	@ (80052bc <main+0x8e4>)
 800508e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8005092:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80052c0 <main+0x8e8>
 8005096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509e:	db0a      	blt.n	80050b6 <main+0x6de>
 80050a0:	4b88      	ldr	r3, [pc, #544]	@ (80052c4 <main+0x8ec>)
 80050a2:	220a      	movs	r2, #10
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	4b84      	ldr	r3, [pc, #528]	@ (80052b8 <main+0x8e0>)
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	4b81      	ldr	r3, [pc, #516]	@ (80052b8 <main+0x8e0>)
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	e070      	b.n	8005198 <main+0x7c0>
				else if(Transducers.Converted_Value_Transducer[2] >=68){switch_case_state = 10; error |=(0x01<<5);}//error flag SPECIFICALLY for Transducer3 check
 80050b6:	4b81      	ldr	r3, [pc, #516]	@ (80052bc <main+0x8e4>)
 80050b8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80050bc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80052c0 <main+0x8e8>
 80050c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	db0a      	blt.n	80050e0 <main+0x708>
 80050ca:	4b7e      	ldr	r3, [pc, #504]	@ (80052c4 <main+0x8ec>)
 80050cc:	220a      	movs	r2, #10
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	4b79      	ldr	r3, [pc, #484]	@ (80052b8 <main+0x8e0>)
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	f043 0320 	orr.w	r3, r3, #32
 80050d8:	b29a      	uxth	r2, r3
 80050da:	4b77      	ldr	r3, [pc, #476]	@ (80052b8 <main+0x8e0>)
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	e05b      	b.n	8005198 <main+0x7c0>
				else if(Transducers.Converted_Value_Transducer[3] >=68){switch_case_state = 10; error |=(0x01<<4);}//error flag SPECIFICALLY for Transducer4 check
 80050e0:	4b76      	ldr	r3, [pc, #472]	@ (80052bc <main+0x8e4>)
 80050e2:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80050e6:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80052c0 <main+0x8e8>
 80050ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f2:	db0a      	blt.n	800510a <main+0x732>
 80050f4:	4b73      	ldr	r3, [pc, #460]	@ (80052c4 <main+0x8ec>)
 80050f6:	220a      	movs	r2, #10
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	4b6f      	ldr	r3, [pc, #444]	@ (80052b8 <main+0x8e0>)
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	f043 0310 	orr.w	r3, r3, #16
 8005102:	b29a      	uxth	r2, r3
 8005104:	4b6c      	ldr	r3, [pc, #432]	@ (80052b8 <main+0x8e0>)
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e046      	b.n	8005198 <main+0x7c0>
			else{
					if(Transducers.Converted_Value_Transducer[0] >=65){error |=(0x01<<3);}//set just error flag/no purge state
 800510a:	4b6c      	ldr	r3, [pc, #432]	@ (80052bc <main+0x8e4>)
 800510c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005110:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80052c8 <main+0x8f0>
 8005114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	db07      	blt.n	800512e <main+0x756>
 800511e:	4b66      	ldr	r3, [pc, #408]	@ (80052b8 <main+0x8e0>)
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	f043 0308 	orr.w	r3, r3, #8
 8005126:	b29a      	uxth	r2, r3
 8005128:	4b63      	ldr	r3, [pc, #396]	@ (80052b8 <main+0x8e0>)
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	e034      	b.n	8005198 <main+0x7c0>
						else if(Transducers.Converted_Value_Transducer[1] >=65){error |=(0x01<<2);}
 800512e:	4b63      	ldr	r3, [pc, #396]	@ (80052bc <main+0x8e4>)
 8005130:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8005134:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80052c8 <main+0x8f0>
 8005138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800513c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005140:	db07      	blt.n	8005152 <main+0x77a>
 8005142:	4b5d      	ldr	r3, [pc, #372]	@ (80052b8 <main+0x8e0>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	f043 0304 	orr.w	r3, r3, #4
 800514a:	b29a      	uxth	r2, r3
 800514c:	4b5a      	ldr	r3, [pc, #360]	@ (80052b8 <main+0x8e0>)
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	e022      	b.n	8005198 <main+0x7c0>
						else if(Transducers.Converted_Value_Transducer[2] >=65){error |=(0x01<<1);}
 8005152:	4b5a      	ldr	r3, [pc, #360]	@ (80052bc <main+0x8e4>)
 8005154:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8005158:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80052c8 <main+0x8f0>
 800515c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005164:	db07      	blt.n	8005176 <main+0x79e>
 8005166:	4b54      	ldr	r3, [pc, #336]	@ (80052b8 <main+0x8e0>)
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	f043 0302 	orr.w	r3, r3, #2
 800516e:	b29a      	uxth	r2, r3
 8005170:	4b51      	ldr	r3, [pc, #324]	@ (80052b8 <main+0x8e0>)
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e010      	b.n	8005198 <main+0x7c0>
						else if(Transducers.Converted_Value_Transducer[3] >=65){error |=0x01;}
 8005176:	4b51      	ldr	r3, [pc, #324]	@ (80052bc <main+0x8e4>)
 8005178:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800517c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80052c8 <main+0x8f0>
 8005180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005188:	db06      	blt.n	8005198 <main+0x7c0>
 800518a:	4b4b      	ldr	r3, [pc, #300]	@ (80052b8 <main+0x8e0>)
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	4b48      	ldr	r3, [pc, #288]	@ (80052b8 <main+0x8e0>)
 8005196:	801a      	strh	r2, [r3, #0]
					else{} //make it so nothing happens here -> proceed
				}
	ADC124S021_extract(&LoadCells);
 8005198:	484c      	ldr	r0, [pc, #304]	@ (80052cc <main+0x8f4>)
 800519a:	f000 fef5 	bl	8005f88 <ADC124S021_extract>
	ADC124S021_process(&LoadCells);
 800519e:	484b      	ldr	r0, [pc, #300]	@ (80052cc <main+0x8f4>)
 80051a0:	f000 ff6e 	bl	8006080 <ADC124S021_process>
	if(LoadCells.Converted_Value_LoadCell[0] <4.1){error |=(0x01<<7);}//error flag SPECIFICALLY for Load1..etc
 80051a4:	4b49      	ldr	r3, [pc, #292]	@ (80052cc <main+0x8f4>)
 80051a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fb faaf 	bl	800070c <__aeabi_f2d>
 80051ae:	a33e      	add	r3, pc, #248	@ (adr r3, 80052a8 <main+0x8d0>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fb fb62 	bl	800087c <__aeabi_dcmplt>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <main+0x7f6>
 80051be:	4b3e      	ldr	r3, [pc, #248]	@ (80052b8 <main+0x8e0>)
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <main+0x8e0>)
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	e03d      	b.n	800524a <main+0x872>
				else if(LoadCells.Converted_Value_LoadCell[1] <4.1){error |=(0x01<<6);}//error flag SPECIFICALLY for Load2 check
 80051ce:	4b3f      	ldr	r3, [pc, #252]	@ (80052cc <main+0x8f4>)
 80051d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fb fa9a 	bl	800070c <__aeabi_f2d>
 80051d8:	a333      	add	r3, pc, #204	@ (adr r3, 80052a8 <main+0x8d0>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7fb fb4d 	bl	800087c <__aeabi_dcmplt>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <main+0x820>
 80051e8:	4b33      	ldr	r3, [pc, #204]	@ (80052b8 <main+0x8e0>)
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <main+0x8e0>)
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e028      	b.n	800524a <main+0x872>
				else if(LoadCells.Converted_Value_LoadCell[2] <4.1){error |=(0x01<<5);}//error flag SPECIFICALLY for Load3 check
 80051f8:	4b34      	ldr	r3, [pc, #208]	@ (80052cc <main+0x8f4>)
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fb fa85 	bl	800070c <__aeabi_f2d>
 8005202:	a329      	add	r3, pc, #164	@ (adr r3, 80052a8 <main+0x8d0>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f7fb fb38 	bl	800087c <__aeabi_dcmplt>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <main+0x84a>
 8005212:	4b29      	ldr	r3, [pc, #164]	@ (80052b8 <main+0x8e0>)
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	f043 0320 	orr.w	r3, r3, #32
 800521a:	b29a      	uxth	r2, r3
 800521c:	4b26      	ldr	r3, [pc, #152]	@ (80052b8 <main+0x8e0>)
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	e013      	b.n	800524a <main+0x872>
				else if(LoadCells.Converted_Value_LoadCell[3] <4.1){error |=(0x01<<4);}//error flag SPECIFICALLY for Load4 check
 8005222:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <main+0x8f4>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	4618      	mov	r0, r3
 8005228:	f7fb fa70 	bl	800070c <__aeabi_f2d>
 800522c:	a31e      	add	r3, pc, #120	@ (adr r3, 80052a8 <main+0x8d0>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fb fb23 	bl	800087c <__aeabi_dcmplt>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d006      	beq.n	800524a <main+0x872>
 800523c:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <main+0x8e0>)
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	f043 0310 	orr.w	r3, r3, #16
 8005244:	b29a      	uxth	r2, r3
 8005246:	4b1c      	ldr	r3, [pc, #112]	@ (80052b8 <main+0x8e0>)
 8005248:	801a      	strh	r2, [r3, #0]
			else{}//nothing should happen here!}
	ADT75ARMZ_extract(&temp_sensor, data_thermo, 0x48);
 800524a:	2248      	movs	r2, #72	@ 0x48
 800524c:	4920      	ldr	r1, [pc, #128]	@ (80052d0 <main+0x8f8>)
 800524e:	4821      	ldr	r0, [pc, #132]	@ (80052d4 <main+0x8fc>)
 8005250:	f001 f92e 	bl	80064b0 <ADT75ARMZ_extract>
	ADT75ARMZ_process(&temp_sensor);
 8005254:	481f      	ldr	r0, [pc, #124]	@ (80052d4 <main+0x8fc>)
 8005256:	f001 f94b 	bl	80064f0 <ADT75ARMZ_process>
	//no error checking is needed with internal temperature

if(switch_case_state == 10)
 800525a:	4b1a      	ldr	r3, [pc, #104]	@ (80052c4 <main+0x8ec>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b0a      	cmp	r3, #10
 8005260:	f000 83a8 	beq.w	80059b4 <main+0xfdc>
{
	break; //enter PURGE state
}
else
{
	switch_case_state = 1; //input selector state
 8005264:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <main+0x8ec>)
 8005266:	2201      	movs	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
	break;
 800526a:	e3a6      	b.n	80059ba <main+0xfe2>
}
	/*
	 *State input selection -> Whether System inputs will be controlled via remote LoRa comms or local switch inputs
	 */
		case 1:
				if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == 0) //meaning local control is needed
 800526c:	4b1a      	ldr	r3, [pc, #104]	@ (80052d8 <main+0x900>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <main+0x8b6>
				{
					led_local.port->ODR |= (0x00 & LOCAL_CONTROL_SW)<<14;
 800527a:	4b18      	ldr	r3, [pc, #96]	@ (80052dc <main+0x904>)
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	4b17      	ldr	r3, [pc, #92]	@ (80052dc <main+0x904>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	6952      	ldr	r2, [r2, #20]
 8005284:	615a      	str	r2, [r3, #20]
					switch_case_state = 3; //remote control
 8005286:	4b0f      	ldr	r3, [pc, #60]	@ (80052c4 <main+0x8ec>)
 8005288:	2203      	movs	r2, #3
 800528a:	701a      	strb	r2, [r3, #0]
					break;
 800528c:	e395      	b.n	80059ba <main+0xfe2>
				}
				else //If Local control is ON!
				{
					led_local.port->ODR |= LOCAL_CONTROL_SW;
 800528e:	4b13      	ldr	r3, [pc, #76]	@ (80052dc <main+0x904>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <main+0x904>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800529c:	615a      	str	r2, [r3, #20]
					switch_case_state = 2; break; //local control
 800529e:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <main+0x8ec>)
 80052a0:	2202      	movs	r2, #2
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	e389      	b.n	80059ba <main+0xfe2>
 80052a6:	bf00      	nop
 80052a8:	66666666 	.word	0x66666666
 80052ac:	40106666 	.word	0x40106666
 80052b0:	20000160 	.word	0x20000160
 80052b4:	420c0000 	.word	0x420c0000
 80052b8:	2000002c 	.word	0x2000002c
 80052bc:	200001f4 	.word	0x200001f4
 80052c0:	42880000 	.word	0x42880000
 80052c4:	20000028 	.word	0x20000028
 80052c8:	42820000 	.word	0x42820000
 80052cc:	2000019c 	.word	0x2000019c
 80052d0:	20000034 	.word	0x20000034
 80052d4:	20000078 	.word	0x20000078
 80052d8:	2000045c 	.word	0x2000045c
 80052dc:	200003cc 	.word	0x200003cc
			 * B2: O2_DEADMAN_SW
			 * B1: IGNITION_DEAD_SW
			 * B0: Activate_SYS_SW (MUST BE 1) if changed at this point, sys must abort
			 */
			//Turn off GPIO and Timer interrupts
			TIM1->CR1 |= (0x00 & TIM_CR1_CEN); //enable TIM6
 80052e0:	4b88      	ldr	r3, [pc, #544]	@ (8005504 <main+0xb2c>)
 80052e2:	4a88      	ldr	r2, [pc, #544]	@ (8005504 <main+0xb2c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6013      	str	r3, [r2, #0]
				while((TIM6->SR & TIM_SR_UIF)==0); //wait for hardware registers to be updated
 80052e8:	bf00      	nop
 80052ea:	4b87      	ldr	r3, [pc, #540]	@ (8005508 <main+0xb30>)
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f9      	beq.n	80052ea <main+0x912>
				TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 80052f6:	4b83      	ldr	r3, [pc, #524]	@ (8005504 <main+0xb2c>)
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	4a82      	ldr	r2, [pc, #520]	@ (8005504 <main+0xb2c>)
 80052fc:	f023 0301 	bic.w	r3, r3, #1
 8005300:	6113      	str	r3, [r2, #16]
			NVIC_DisableIRQ(EXTI9_5_IRQn);
 8005302:	2017      	movs	r0, #23
 8005304:	f7ff fb18 	bl	8004938 <__NVIC_DisableIRQ>
			NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 8005308:	2019      	movs	r0, #25
 800530a:	f7ff fb15 	bl	8004938 <__NVIC_DisableIRQ>

			state_local =
			((DUM_SW.port->IDR & DUMP_SW) << 7) +
 800530e:	4b7f      	ldr	r3, [pc, #508]	@ (800550c <main+0xb34>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
			((N2O_SW.port->IDR & N2O_ISO_SW) << 6) +
 8005314:	4b7e      	ldr	r3, [pc, #504]	@ (8005510 <main+0xb38>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	691b      	ldr	r3, [r3, #16]
			((O2_IS_SW.port->IDR & O2_ISO_SW) << 5) +
 800531a:	4b7e      	ldr	r3, [pc, #504]	@ (8005514 <main+0xb3c>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	691b      	ldr	r3, [r3, #16]
			((IGNITION_IS_SW.port->IDR & IGNITION_SW) << 4) +
 8005320:	4b7d      	ldr	r3, [pc, #500]	@ (8005518 <main+0xb40>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
			((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
			((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
			((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
			(activate_SW.port->IDR & ACTIVATE_SW);
 8005326:	4b7d      	ldr	r3, [pc, #500]	@ (800551c <main+0xb44>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
			((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 800532c:	4b7c      	ldr	r3, [pc, #496]	@ (8005520 <main+0xb48>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	b2da      	uxtb	r2, r3
			((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 800533e:	4b79      	ldr	r3, [pc, #484]	@ (8005524 <main+0xb4c>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800534e:	b2db      	uxtb	r3, r3
			((N2O_DEAD_SW.port->IDR & N2O_DEADMAN_SW) << 3) +
 8005350:	4413      	add	r3, r2
 8005352:	b2da      	uxtb	r2, r3
			((IGNITE_DEAD_SW.port->IDR & IGNITE_DEADMAN_SW) << 1) +
 8005354:	4b74      	ldr	r3, [pc, #464]	@ (8005528 <main+0xb50>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	b2db      	uxtb	r3, r3
			((O2_DEAD_SW.port->IDR & O2_DEADMAN_SW) << 2) + //to trigger -> high to
 8005366:	4413      	add	r3, r2
 8005368:	b2da      	uxtb	r2, r3
			state_local =
 800536a:	4b70      	ldr	r3, [pc, #448]	@ (800552c <main+0xb54>)
 800536c:	701a      	strb	r2, [r3, #0]

			switch_case_state = 0x0F; //change this to allow for local inputs
 800536e:	4b70      	ldr	r3, [pc, #448]	@ (8005530 <main+0xb58>)
 8005370:	220f      	movs	r2, #15
 8005372:	701a      	strb	r2, [r3, #0]
			break;
 8005374:	e321      	b.n	80059ba <main+0xfe2>
			//remote Access
		case 3:
			NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005376:	2017      	movs	r0, #23
 8005378:	f7ff fac0 	bl	80048fc <__NVIC_EnableIRQ>
			NVIC_SetPriority(EXTI9_5_IRQn,9);
 800537c:	2109      	movs	r1, #9
 800537e:	2017      	movs	r0, #23
 8005380:	f7ff fafe 	bl	8004980 <__NVIC_SetPriority>
			NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005384:	2019      	movs	r0, #25
 8005386:	f7ff fab9 	bl	80048fc <__NVIC_EnableIRQ>
			NVIC_SetPriority(TIM1_UP_TIM10_IRQn,10);
 800538a:	210a      	movs	r1, #10
 800538c:	2019      	movs	r0, #25
 800538e:	f7ff faf7 	bl	8004980 <__NVIC_SetPriority>
			//re-enable interrupt callbacks for LoRa
			switch_case_state = 4;
 8005392:	4b67      	ldr	r3, [pc, #412]	@ (8005530 <main+0xb58>)
 8005394:	2204      	movs	r2, #4
 8005396:	701a      	strb	r2, [r3, #0]
			 * B3: Ignition Fire
			 * B2: Ignition Selected
			 * B1: Gas Filled selected
			 * B0: System Activated
			 */
			break;
 8005398:	e30f      	b.n	80059ba <main+0xfe2>
//**************************REMOTE ACCESS*************************************************************
		case 4:
			//Is the system on bit on at this point in TIME!
			if((state & SYSTEM_ACTIVATED) != SYSTEM_ACTIVATED)
 800539a:	4b66      	ldr	r3, [pc, #408]	@ (8005534 <main+0xb5c>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <main+0x9d6>
						{
							switch_case_state =10; break;
 80053a6:	4b62      	ldr	r3, [pc, #392]	@ (8005530 <main+0xb58>)
 80053a8:	220a      	movs	r2, #10
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	e305      	b.n	80059ba <main+0xfe2>
						}
						else if((state & MANUAL_PURGE) == MANUAL_PURGE)
 80053ae:	4b61      	ldr	r3, [pc, #388]	@ (8005534 <main+0xb5c>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	da03      	bge.n	80053c0 <main+0x9e8>
							{
									switch_case_state =10; break;	//When system is off, leave in PURGE state!
 80053b8:	4b5d      	ldr	r3, [pc, #372]	@ (8005530 <main+0xb58>)
 80053ba:	220a      	movs	r2, #10
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e2fc      	b.n	80059ba <main+0xfe2>
							}
//**********************Pass this point, the system is active, and manual purge has not been selected! *************************************

						else if((state & GAS_FILLED_SELECTED) == 0) //0 to indicate a successful -> skip this when bit 1 is a 1
 80053c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005534 <main+0xb5c>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d14b      	bne.n	8005464 <main+0xa8c>
											{
												if((state & IGNITION_SELECTED) ==0) //IGNITE SELECTED -> BIT2
 80053cc:	4b59      	ldr	r3, [pc, #356]	@ (8005534 <main+0xb5c>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d103      	bne.n	80053e0 <main+0xa08>
												{
													switch_case_state = 9; //go into neutral state!
 80053d8:	4b55      	ldr	r3, [pc, #340]	@ (8005530 <main+0xb58>)
 80053da:	2209      	movs	r2, #9
 80053dc:	701a      	strb	r2, [r3, #0]
													break;
 80053de:	e2ec      	b.n	80059ba <main+0xfe2>
												}
												else //if bit 2 is a 1
												{
													//Close relays here!
													CH3_ARM.port->ODR |= (CH3_Arm & 0x00)<<10;
 80053e0:	4b55      	ldr	r3, [pc, #340]	@ (8005538 <main+0xb60>)
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	4b54      	ldr	r3, [pc, #336]	@ (8005538 <main+0xb60>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	6952      	ldr	r2, [r2, #20]
 80053ea:	615a      	str	r2, [r3, #20]
													CH3_OP.port->ODR |= (CH3_Operate & 0x00)<<9;
 80053ec:	4b53      	ldr	r3, [pc, #332]	@ (800553c <main+0xb64>)
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	4b52      	ldr	r3, [pc, #328]	@ (800553c <main+0xb64>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	6952      	ldr	r2, [r2, #20]
 80053f6:	615a      	str	r2, [r3, #20]
													led_n2o.port->ODR|= (N2O_LED & 0x00) << 5;
 80053f8:	4b51      	ldr	r3, [pc, #324]	@ (8005540 <main+0xb68>)
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	4b50      	ldr	r3, [pc, #320]	@ (8005540 <main+0xb68>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	6952      	ldr	r2, [r2, #20]
 8005402:	615a      	str	r2, [r3, #20]

													led_O2.port->ODR|=(O2_LED & 0x00) << 6;
 8005404:	4b4f      	ldr	r3, [pc, #316]	@ (8005544 <main+0xb6c>)
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	4b4e      	ldr	r3, [pc, #312]	@ (8005544 <main+0xb6c>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	6952      	ldr	r2, [r2, #20]
 800540e:	615a      	str	r2, [r3, #20]
													CH2_ARM.port->ODR |= (CH2_Arm & 0x00)<<14;
 8005410:	4b4d      	ldr	r3, [pc, #308]	@ (8005548 <main+0xb70>)
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	4b4c      	ldr	r3, [pc, #304]	@ (8005548 <main+0xb70>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	6952      	ldr	r2, [r2, #20]
 800541a:	615a      	str	r2, [r3, #20]
													CH2_OP.port->ODR |= (CH2_Operate & 0x00)<<13;
 800541c:	4b4b      	ldr	r3, [pc, #300]	@ (800554c <main+0xb74>)
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	4b4a      	ldr	r3, [pc, #296]	@ (800554c <main+0xb74>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	6952      	ldr	r2, [r2, #20]
 8005426:	615a      	str	r2, [r3, #20]


													Ignition1_ARM.port->ODR |= IGNITION1_ARM;
 8005428:	4b49      	ldr	r3, [pc, #292]	@ (8005550 <main+0xb78>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	4b48      	ldr	r3, [pc, #288]	@ (8005550 <main+0xb78>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005436:	615a      	str	r2, [r3, #20]
													Ignition2_ARM.port->ODR |= IGNITION2_ARM;
 8005438:	4b46      	ldr	r3, [pc, #280]	@ (8005554 <main+0xb7c>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	695a      	ldr	r2, [r3, #20]
 800543e:	4b45      	ldr	r3, [pc, #276]	@ (8005554 <main+0xb7c>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f042 0208 	orr.w	r2, r2, #8
 8005446:	615a      	str	r2, [r3, #20]
													//ARM both pins
													if((state & IGNITION_FIRE) != IGNITION_FIRE) //IGNITE OP -> BIT 3
 8005448:	4b3a      	ldr	r3, [pc, #232]	@ (8005534 <main+0xb5c>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <main+0xa84>
													{ //if bit 3 is a 0
														switch_case_state = 9;
 8005454:	4b36      	ldr	r3, [pc, #216]	@ (8005530 <main+0xb58>)
 8005456:	2209      	movs	r2, #9
 8005458:	701a      	strb	r2, [r3, #0]
														break;
 800545a:	e2ae      	b.n	80059ba <main+0xfe2>
													}
													else
													{ //if bit 3 is a 1

														switch_case_state = 0x80; //to ensure accidential bit flips do not trigger fire stage
 800545c:	4b34      	ldr	r3, [pc, #208]	@ (8005530 <main+0xb58>)
 800545e:	2280      	movs	r2, #128	@ 0x80
 8005460:	701a      	strb	r2, [r3, #0]
														break;
 8005462:	e2aa      	b.n	80059ba <main+0xfe2>

											}

//***********Pass this point, ignite is NOT selected, and gas fill state has been selected ************************************

						else if((state & SWITCH_SELECTOR) == SWITCH_SELECTOR)
 8005464:	4b33      	ldr	r3, [pc, #204]	@ (8005534 <main+0xb5c>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <main+0xa9c>
										{
											//redundant so far but allow for future expansion
											__asm("NOP"); //do nothing so far!
 8005470:	bf00      	nop
 8005472:	e037      	b.n	80054e4 <main+0xb0c>
										}
						//only O2 can be on and NOT N20
						else if((state & O2_FILL_ACTIVATE) == O2_FILL_ACTIVATE && (state & N2O_FILL_ACTIVATE) == 0x00)
 8005474:	4b2f      	ldr	r3, [pc, #188]	@ (8005534 <main+0xb5c>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <main+0xad0>
 8005480:	4b2c      	ldr	r3, [pc, #176]	@ (8005534 <main+0xb5c>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10d      	bne.n	80054a8 <main+0xad0>
						{
							if(state & (0x01<<1))//gas fill state needs to be on!
 800548c:	4b29      	ldr	r3, [pc, #164]	@ (8005534 <main+0xb5c>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <main+0xac8>
							{
								switch_case_state = 8;
 8005498:	4b25      	ldr	r3, [pc, #148]	@ (8005530 <main+0xb58>)
 800549a:	2208      	movs	r2, #8
 800549c:	701a      	strb	r2, [r3, #0]
								break;
 800549e:	e28c      	b.n	80059ba <main+0xfe2>
							}
							else
							{
								switch_case_state = 11; //exclusive break to turn off O2 and N2O relays (NOT TOTAL neutral state)
 80054a0:	4b23      	ldr	r3, [pc, #140]	@ (8005530 <main+0xb58>)
 80054a2:	220b      	movs	r2, #11
 80054a4:	701a      	strb	r2, [r3, #0]
								break;
 80054a6:	e288      	b.n	80059ba <main+0xfe2>

							}
						}
			//N20 FILL
						else if((state & N2O_FILL_ACTIVATE) == N2O_FILL_ACTIVATE && (state & O2_FILL_ACTIVATE))
 80054a8:	4b22      	ldr	r3, [pc, #136]	@ (8005534 <main+0xb5c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d013      	beq.n	80054dc <main+0xb04>
 80054b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005534 <main+0xb5c>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00d      	beq.n	80054dc <main+0xb04>
						{
							if(state &(0x01<<1))//gas fill state needs to be on!
 80054c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005534 <main+0xb5c>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <main+0xafc>
								{
									switch_case_state = 7;
 80054cc:	4b18      	ldr	r3, [pc, #96]	@ (8005530 <main+0xb58>)
 80054ce:	2207      	movs	r2, #7
 80054d0:	701a      	strb	r2, [r3, #0]
									break;
 80054d2:	e272      	b.n	80059ba <main+0xfe2>
								}
							else
							{
								switch_case_state = 11; //exclusive break to turn off O2 and N2O relays (NOT TOTAL neutral state)
 80054d4:	4b16      	ldr	r3, [pc, #88]	@ (8005530 <main+0xb58>)
 80054d6:	220b      	movs	r2, #11
 80054d8:	701a      	strb	r2, [r3, #0]
								break;
 80054da:	e26e      	b.n	80059ba <main+0xfe2>
						}
			//GAS SELECTED -> BIT 1
				else
				{
					//get error flag in here as well!
					switch_case_state = 0;
 80054dc:	4b14      	ldr	r3, [pc, #80]	@ (8005530 <main+0xb58>)
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]
					break;
 80054e2:	e26a      	b.n	80059ba <main+0xfe2>

//***************************END OF REMOTE ACCESS*****************************************************************************

//*******************************LOCAL ACCESS*************************************************************
		case 0x0F:
			if((state_local & ACTIVATE_SW) != ACTIVATE_SW) //if the system is not active
 80054e4:	4b11      	ldr	r3, [pc, #68]	@ (800552c <main+0xb54>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d135      	bne.n	800555c <main+0xb84>
			{
				led_power.port->ODR |= (0x00 & PWR_LED);
 80054f0:	4b19      	ldr	r3, [pc, #100]	@ (8005558 <main+0xb80>)
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	4b18      	ldr	r3, [pc, #96]	@ (8005558 <main+0xb80>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	6952      	ldr	r2, [r2, #20]
 80054fa:	615a      	str	r2, [r3, #20]
				switch_case_state = 10;
 80054fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005530 <main+0xb58>)
 80054fe:	220a      	movs	r2, #10
 8005500:	701a      	strb	r2, [r3, #0]
				break;
 8005502:	e25a      	b.n	80059ba <main+0xfe2>
 8005504:	40010000 	.word	0x40010000
 8005508:	40001000 	.word	0x40001000
 800550c:	20000474 	.word	0x20000474
 8005510:	2000048c 	.word	0x2000048c
 8005514:	200004a4 	.word	0x200004a4
 8005518:	200004bc 	.word	0x200004bc
 800551c:	20000444 	.word	0x20000444
 8005520:	200004d4 	.word	0x200004d4
 8005524:	200004ec 	.word	0x200004ec
 8005528:	20000504 	.word	0x20000504
 800552c:	2000002a 	.word	0x2000002a
 8005530:	20000028 	.word	0x20000028
 8005534:	20000029 	.word	0x20000029
 8005538:	20000324 	.word	0x20000324
 800553c:	2000030c 	.word	0x2000030c
 8005540:	20000414 	.word	0x20000414
 8005544:	2000042c 	.word	0x2000042c
 8005548:	200002dc 	.word	0x200002dc
 800554c:	200002c4 	.word	0x200002c4
 8005550:	20000354 	.word	0x20000354
 8005554:	20000384 	.word	0x20000384
 8005558:	200003b4 	.word	0x200003b4
			}
			//Adding 'dump' flag to detect the change in interrupt state in key areas!
			//periodic 'dump' flag checks are needed along certain areas as to ensure state is checked regardless
				else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 800555c:	4b8a      	ldr	r3, [pc, #552]	@ (8005788 <main+0xdb0>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005564:	2b00      	cmp	r3, #0
 8005566:	d06d      	beq.n	8005644 <main+0xc6c>
					(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 8005568:	4b87      	ldr	r3, [pc, #540]	@ (8005788 <main+0xdb0>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
				else if((state_local & IGNITION_SW) == IGNITION_SW && //is ignition ISO on
 8005570:	2b00      	cmp	r3, #0
 8005572:	d167      	bne.n	8005644 <main+0xc6c>
					(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 8005574:	4b84      	ldr	r3, [pc, #528]	@ (8005788 <main+0xdb0>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
					(state_local & N2O_ISO_SW) != N2O_ISO_SW  && //is N2O off
 800557c:	2b00      	cmp	r3, #0
 800557e:	d161      	bne.n	8005644 <main+0xc6c>
					(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 8005580:	4b81      	ldr	r3, [pc, #516]	@ (8005788 <main+0xdb0>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
					(state_local & O2_ISO_SW) != O2_ISO_SW && 	//is O2 ISO off
 8005588:	2b00      	cmp	r3, #0
 800558a:	d15b      	bne.n	8005644 <main+0xc6c>
					(state_local & O2_DEADMAN_SW) != O2_DEADMAN_SW) //is O2 deadman off
 800558c:	4b7e      	ldr	r3, [pc, #504]	@ (8005788 <main+0xdb0>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f003 0320 	and.w	r3, r3, #32
					(state_local & N2O_DEADMAN_SW) != N2O_DEADMAN_SW &&  //is N2O 'deadman' off
 8005594:	2b00      	cmp	r3, #0
 8005596:	d155      	bne.n	8005644 <main+0xc6c>
				{
					if(dump_flag == 1){switch_case_state = 0; dump_flag = 0; break;}
 8005598:	4b7c      	ldr	r3, [pc, #496]	@ (800578c <main+0xdb4>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d106      	bne.n	80055ae <main+0xbd6>
 80055a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005790 <main+0xdb8>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	4b79      	ldr	r3, [pc, #484]	@ (800578c <main+0xdb4>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e205      	b.n	80059ba <main+0xfe2>
					else{__asm("NOP");}
 80055ae:	bf00      	nop
					//does nothing when false condition is set - ie when dump button has not been pressed!

					led_power.port->ODR |= PWR_LED;
 80055b0:	4b78      	ldr	r3, [pc, #480]	@ (8005794 <main+0xdbc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	4b77      	ldr	r3, [pc, #476]	@ (8005794 <main+0xdbc>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	615a      	str	r2, [r3, #20]
					CH3_ARM.port->ODR |= (CH3_Arm & 0x00)<<10;
 80055c0:	4b75      	ldr	r3, [pc, #468]	@ (8005798 <main+0xdc0>)
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	4b74      	ldr	r3, [pc, #464]	@ (8005798 <main+0xdc0>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	6952      	ldr	r2, [r2, #20]
 80055ca:	615a      	str	r2, [r3, #20]
					CH3_OP.port->ODR |= (CH3_Operate & 0x00)<<9;
 80055cc:	4b73      	ldr	r3, [pc, #460]	@ (800579c <main+0xdc4>)
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	4b72      	ldr	r3, [pc, #456]	@ (800579c <main+0xdc4>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	6952      	ldr	r2, [r2, #20]
 80055d6:	615a      	str	r2, [r3, #20]
					led_n2o.port->ODR|= (N2O_LED & 0x00) << 5;
 80055d8:	4b71      	ldr	r3, [pc, #452]	@ (80057a0 <main+0xdc8>)
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	4b70      	ldr	r3, [pc, #448]	@ (80057a0 <main+0xdc8>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	6952      	ldr	r2, [r2, #20]
 80055e2:	615a      	str	r2, [r3, #20]

					led_O2.port->ODR|=(O2_LED & 0x00) << 6;
 80055e4:	4b6f      	ldr	r3, [pc, #444]	@ (80057a4 <main+0xdcc>)
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	4b6e      	ldr	r3, [pc, #440]	@ (80057a4 <main+0xdcc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	6952      	ldr	r2, [r2, #20]
 80055ee:	615a      	str	r2, [r3, #20]
					CH2_ARM.port->ODR |= (CH2_Arm & 0x00)<<14;
 80055f0:	4b6d      	ldr	r3, [pc, #436]	@ (80057a8 <main+0xdd0>)
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	4b6c      	ldr	r3, [pc, #432]	@ (80057a8 <main+0xdd0>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	6952      	ldr	r2, [r2, #20]
 80055fa:	615a      	str	r2, [r3, #20]
					CH2_OP.port->ODR |= (CH2_Operate & 0x00)<<13;
 80055fc:	4b6b      	ldr	r3, [pc, #428]	@ (80057ac <main+0xdd4>)
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	4b6a      	ldr	r3, [pc, #424]	@ (80057ac <main+0xdd4>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	6952      	ldr	r2, [r2, #20]
 8005606:	615a      	str	r2, [r3, #20]


					Ignition1_ARM.port->ODR |= IGNITION1_ARM;
 8005608:	4b69      	ldr	r3, [pc, #420]	@ (80057b0 <main+0xdd8>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	4b68      	ldr	r3, [pc, #416]	@ (80057b0 <main+0xdd8>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005616:	615a      	str	r2, [r3, #20]
					Ignition2_ARM.port->ODR |= IGNITION2_ARM;
 8005618:	4b66      	ldr	r3, [pc, #408]	@ (80057b4 <main+0xddc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	4b65      	ldr	r3, [pc, #404]	@ (80057b4 <main+0xddc>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f042 0208 	orr.w	r2, r2, #8
 8005626:	615a      	str	r2, [r3, #20]
					if((state_local & IGNITE_DEADMAN_SW) == IGNITE_DEADMAN_SW) //is IGNITE button pressed!
 8005628:	4b57      	ldr	r3, [pc, #348]	@ (8005788 <main+0xdb0>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <main+0xc64>
					{

						switch_case_state = 0xF0;  //IGNITE state
 8005634:	4b56      	ldr	r3, [pc, #344]	@ (8005790 <main+0xdb8>)
 8005636:	22f0      	movs	r2, #240	@ 0xf0
 8005638:	701a      	strb	r2, [r3, #0]
						break;
 800563a:	e1be      	b.n	80059ba <main+0xfe2>
					}
					else
					{
						switch_case_state = 9; //neutral state
 800563c:	4b54      	ldr	r3, [pc, #336]	@ (8005790 <main+0xdb8>)
 800563e:	2209      	movs	r2, #9
 8005640:	701a      	strb	r2, [r3, #0]
						break;
 8005642:	e1ba      	b.n	80059ba <main+0xfe2>
					}
				}
			else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8005644:	4b50      	ldr	r3, [pc, #320]	@ (8005788 <main+0xdb0>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d021      	beq.n	8005694 <main+0xcbc>
					(state_local & O2_ISO_SW) == O2_ISO_SW) //error check if both ISO switches are triggered for N20 and O2
 8005650:	4b4d      	ldr	r3, [pc, #308]	@ (8005788 <main+0xdb0>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
			else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01b      	beq.n	8005694 <main+0xcbc>
			{
				if(dump_flag == 1){switch_case_state = 0; dump_flag = 0; break;}
 800565c:	4b4b      	ldr	r3, [pc, #300]	@ (800578c <main+0xdb4>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <main+0xc9a>
 8005664:	4b4a      	ldr	r3, [pc, #296]	@ (8005790 <main+0xdb8>)
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	4b48      	ldr	r3, [pc, #288]	@ (800578c <main+0xdb4>)
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e1a3      	b.n	80059ba <main+0xfe2>
				else{__asm("NOP");}
 8005672:	bf00      	nop

				//if local dump flag has been triggered REGARDLESS of input control state!

				led_O2.port->ODR|=((O2_LED & 0x00) << 0x06);
 8005674:	4b4b      	ldr	r3, [pc, #300]	@ (80057a4 <main+0xdcc>)
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	4b4a      	ldr	r3, [pc, #296]	@ (80057a4 <main+0xdcc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	6952      	ldr	r2, [r2, #20]
 800567e:	615a      	str	r2, [r3, #20]
				led_n2o.port->ODR|=((N2O_LED & 0x00) << 0x05);
 8005680:	4b47      	ldr	r3, [pc, #284]	@ (80057a0 <main+0xdc8>)
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	4b46      	ldr	r3, [pc, #280]	@ (80057a0 <main+0xdc8>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	6952      	ldr	r2, [r2, #20]
 800568a:	615a      	str	r2, [r3, #20]
				switch_case_state = 10;
 800568c:	4b40      	ldr	r3, [pc, #256]	@ (8005790 <main+0xdb8>)
 800568e:	220a      	movs	r2, #10
 8005690:	701a      	strb	r2, [r3, #0]
				break;
 8005692:	e192      	b.n	80059ba <main+0xfe2>
			}

			else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 8005694:	4b3c      	ldr	r3, [pc, #240]	@ (8005788 <main+0xdb0>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02a      	beq.n	80056f6 <main+0xd1e>
					(state_local & O2_ISO_SW) != O2_ISO_SW)
 80056a0:	4b39      	ldr	r3, [pc, #228]	@ (8005788 <main+0xdb0>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
			else if((state_local & N2O_ISO_SW) == N2O_ISO_SW &&
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d124      	bne.n	80056f6 <main+0xd1e>
				{
				if(dump_flag == 1){switch_case_state = 0; dump_flag = 0; break;}
 80056ac:	4b37      	ldr	r3, [pc, #220]	@ (800578c <main+0xdb4>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d106      	bne.n	80056c2 <main+0xcea>
 80056b4:	4b36      	ldr	r3, [pc, #216]	@ (8005790 <main+0xdb8>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	4b34      	ldr	r3, [pc, #208]	@ (800578c <main+0xdb4>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e17b      	b.n	80059ba <main+0xfe2>
				else{__asm("NOP");}
 80056c2:	bf00      	nop

					led_n2o.port->ODR|=N2O_LED;
 80056c4:	4b36      	ldr	r3, [pc, #216]	@ (80057a0 <main+0xdc8>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	4b35      	ldr	r3, [pc, #212]	@ (80057a0 <main+0xdc8>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f042 0220 	orr.w	r2, r2, #32
 80056d2:	615a      	str	r2, [r3, #20]
					if((state_local& N2O_DEADMAN_SW) == N2O_DEADMAN_SW)
 80056d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005788 <main+0xdb0>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <main+0xd10>
					{
						switch_case_state = 7;
 80056e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005790 <main+0xdb8>)
 80056e2:	2207      	movs	r2, #7
 80056e4:	701a      	strb	r2, [r3, #0]
						break;
 80056e6:	e168      	b.n	80059ba <main+0xfe2>
					}
					else
					{
						led_n2o.port->ODR|=((N2O_LED & 0x00) << 0x05);
 80056e8:	4b2d      	ldr	r3, [pc, #180]	@ (80057a0 <main+0xdc8>)
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	4b2c      	ldr	r3, [pc, #176]	@ (80057a0 <main+0xdc8>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	6952      	ldr	r2, [r2, #20]
 80056f2:	615a      	str	r2, [r3, #20]
					if((state_local& N2O_DEADMAN_SW) == N2O_DEADMAN_SW)
 80056f4:	e034      	b.n	8005760 <main+0xd88>
					}
				}
			else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 80056f6:	4b24      	ldr	r3, [pc, #144]	@ (8005788 <main+0xdb0>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02a      	beq.n	8005758 <main+0xd80>
					(state_local & N2O_ISO_SW) != N2O_ISO_SW)
 8005702:	4b21      	ldr	r3, [pc, #132]	@ (8005788 <main+0xdb0>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
			else if((state_local & O2_ISO_SW) == O2_ISO_SW &&
 800570a:	2b00      	cmp	r3, #0
 800570c:	d124      	bne.n	8005758 <main+0xd80>
				{
				if(dump_flag == 1){switch_case_state = 0; dump_flag = 0; break;}
 800570e:	4b1f      	ldr	r3, [pc, #124]	@ (800578c <main+0xdb4>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d106      	bne.n	8005724 <main+0xd4c>
 8005716:	4b1e      	ldr	r3, [pc, #120]	@ (8005790 <main+0xdb8>)
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	4b1b      	ldr	r3, [pc, #108]	@ (800578c <main+0xdb4>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e14a      	b.n	80059ba <main+0xfe2>
				else{__asm("NOP");}
 8005724:	bf00      	nop
					led_O2.port->ODR |=O2_LED;
 8005726:	4b1f      	ldr	r3, [pc, #124]	@ (80057a4 <main+0xdcc>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	4b1d      	ldr	r3, [pc, #116]	@ (80057a4 <main+0xdcc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005734:	615a      	str	r2, [r3, #20]
					if((state_local & O2_DEADMAN_SW) == O2_DEADMAN_SW)
 8005736:	4b14      	ldr	r3, [pc, #80]	@ (8005788 <main+0xdb0>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <main+0xd72>
					{
						switch_case_state = 8;
 8005742:	4b13      	ldr	r3, [pc, #76]	@ (8005790 <main+0xdb8>)
 8005744:	2208      	movs	r2, #8
 8005746:	701a      	strb	r2, [r3, #0]
						break;
 8005748:	e137      	b.n	80059ba <main+0xfe2>
					}
					else
					{
						led_O2.port->ODR|=((O2_LED & 0x00) << 0x06);
 800574a:	4b16      	ldr	r3, [pc, #88]	@ (80057a4 <main+0xdcc>)
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	4b15      	ldr	r3, [pc, #84]	@ (80057a4 <main+0xdcc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	6952      	ldr	r2, [r2, #20]
 8005754:	615a      	str	r2, [r3, #20]
					if((state_local & O2_DEADMAN_SW) == O2_DEADMAN_SW)
 8005756:	e003      	b.n	8005760 <main+0xd88>
					}
				}
		else
			{
				//If power is ON but other bits are off!
				switch_case_state = 0;
 8005758:	4b0d      	ldr	r3, [pc, #52]	@ (8005790 <main+0xdb8>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
				break;
 800575e:	e12c      	b.n	80059ba <main+0xfe2>

//********************VARIOUS STATES/STAGES************************************************************************************

		case 7:
			//N20 Fill State
			if(CH3_MON.port->IDR != CH3_Cont)
 8005760:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <main+0xde0>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800576a:	d029      	beq.n	80057c0 <main+0xde8>
			{
				led_n2o.port->ODR|=((N2O_LED & 0x00) << 0x05);
 800576c:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <main+0xdc8>)
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <main+0xdc8>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	6952      	ldr	r2, [r2, #20]
 8005776:	615a      	str	r2, [r3, #20]
				error = 0x01 << 14;
 8005778:	4b10      	ldr	r3, [pc, #64]	@ (80057bc <main+0xde4>)
 800577a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800577e:	801a      	strh	r2, [r3, #0]
				switch_case_state = 0;
 8005780:	4b03      	ldr	r3, [pc, #12]	@ (8005790 <main+0xdb8>)
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
				break;
 8005786:	e118      	b.n	80059ba <main+0xfe2>
 8005788:	2000002a 	.word	0x2000002a
 800578c:	2000002f 	.word	0x2000002f
 8005790:	20000028 	.word	0x20000028
 8005794:	200003b4 	.word	0x200003b4
 8005798:	20000324 	.word	0x20000324
 800579c:	2000030c 	.word	0x2000030c
 80057a0:	20000414 	.word	0x20000414
 80057a4:	2000042c 	.word	0x2000042c
 80057a8:	200002dc 	.word	0x200002dc
 80057ac:	200002c4 	.word	0x200002c4
 80057b0:	20000354 	.word	0x20000354
 80057b4:	20000384 	.word	0x20000384
 80057b8:	2000033c 	.word	0x2000033c
 80057bc:	2000002c 	.word	0x2000002c
			}
			else{
				error = 0x00 << 14;
 80057c0:	4b7f      	ldr	r3, [pc, #508]	@ (80059c0 <main+0xfe8>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	801a      	strh	r2, [r3, #0]
				led_n2o.port->ODR|=N2O_LED;
 80057c6:	4b7f      	ldr	r3, [pc, #508]	@ (80059c4 <main+0xfec>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	4b7d      	ldr	r3, [pc, #500]	@ (80059c4 <main+0xfec>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f042 0220 	orr.w	r2, r2, #32
 80057d4:	615a      	str	r2, [r3, #20]
				CH3_ARM.port->ODR |= CH3_Arm;
 80057d6:	4b7c      	ldr	r3, [pc, #496]	@ (80059c8 <main+0xff0>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	4b7a      	ldr	r3, [pc, #488]	@ (80059c8 <main+0xff0>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057e4:	615a      	str	r2, [r3, #20]
				CH3_OP.port->ODR |= CH3_Operate;
 80057e6:	4b79      	ldr	r3, [pc, #484]	@ (80059cc <main+0xff4>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	4b77      	ldr	r3, [pc, #476]	@ (80059cc <main+0xff4>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f4:	615a      	str	r2, [r3, #20]

				switch_case_state = 0;
 80057f6:	4b76      	ldr	r3, [pc, #472]	@ (80059d0 <main+0xff8>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
				break;
 80057fc:	e0dd      	b.n	80059ba <main+0xfe2>
			}

		case 8:
			//O2 FILL
			if(CH2_MON.port->IDR != CH2_Cont)
 80057fe:	4b75      	ldr	r3, [pc, #468]	@ (80059d4 <main+0xffc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005808:	d00d      	beq.n	8005826 <main+0xe4e>
			{
				led_O2.port->ODR|= ((O2_LED & 0x00) << 0x06);
 800580a:	4b73      	ldr	r3, [pc, #460]	@ (80059d8 <main+0x1000>)
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	4b72      	ldr	r3, [pc, #456]	@ (80059d8 <main+0x1000>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	6952      	ldr	r2, [r2, #20]
 8005814:	615a      	str	r2, [r3, #20]
				error = 0x01 << 13;
 8005816:	4b6a      	ldr	r3, [pc, #424]	@ (80059c0 <main+0xfe8>)
 8005818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800581c:	801a      	strh	r2, [r3, #0]
				switch_case_state = 0;
 800581e:	4b6c      	ldr	r3, [pc, #432]	@ (80059d0 <main+0xff8>)
 8005820:	2200      	movs	r2, #0
 8005822:	701a      	strb	r2, [r3, #0]
				break;
 8005824:	e0c9      	b.n	80059ba <main+0xfe2>
			}
			else{
				error = 0x00 << 13; //unasserts error flag
 8005826:	4b66      	ldr	r3, [pc, #408]	@ (80059c0 <main+0xfe8>)
 8005828:	2200      	movs	r2, #0
 800582a:	801a      	strh	r2, [r3, #0]
				led_O2.port->ODR|=O2_LED;
 800582c:	4b6a      	ldr	r3, [pc, #424]	@ (80059d8 <main+0x1000>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	4b69      	ldr	r3, [pc, #420]	@ (80059d8 <main+0x1000>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800583a:	615a      	str	r2, [r3, #20]
				CH2_ARM.port->ODR |= CH2_Arm;
 800583c:	4b67      	ldr	r3, [pc, #412]	@ (80059dc <main+0x1004>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	4b66      	ldr	r3, [pc, #408]	@ (80059dc <main+0x1004>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800584a:	615a      	str	r2, [r3, #20]
				CH2_OP.port->ODR |= CH2_Operate;
 800584c:	4b64      	ldr	r3, [pc, #400]	@ (80059e0 <main+0x1008>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	4b63      	ldr	r3, [pc, #396]	@ (80059e0 <main+0x1008>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800585a:	615a      	str	r2, [r3, #20]

				switch_case_state = 0;
 800585c:	4b5c      	ldr	r3, [pc, #368]	@ (80059d0 <main+0xff8>)
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
				break;
 8005862:	e0aa      	b.n	80059ba <main+0xfe2>
			}

		case 9:
			//neutral state
			//Turn OFF ignition coil relays
			Ignition1_ARM.port->ODR |= IGNITION1_ARM_OFF;
 8005864:	4b5f      	ldr	r3, [pc, #380]	@ (80059e4 <main+0x100c>)
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	4b5e      	ldr	r3, [pc, #376]	@ (80059e4 <main+0x100c>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	6952      	ldr	r2, [r2, #20]
 800586e:	615a      	str	r2, [r3, #20]
			Ignition2_ARM.port->ODR |= IGNITION2_ARM_OFF;
 8005870:	4b5d      	ldr	r3, [pc, #372]	@ (80059e8 <main+0x1010>)
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	4b5c      	ldr	r3, [pc, #368]	@ (80059e8 <main+0x1010>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	6952      	ldr	r2, [r2, #20]
 800587a:	615a      	str	r2, [r3, #20]
			Ignition1_OP.port->ODR |= IGNITION1_OP_OFF;
 800587c:	4b5b      	ldr	r3, [pc, #364]	@ (80059ec <main+0x1014>)
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	4b5a      	ldr	r3, [pc, #360]	@ (80059ec <main+0x1014>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	6952      	ldr	r2, [r2, #20]
 8005886:	615a      	str	r2, [r3, #20]
			Ignition2_OP.port->ODR |= IGNITION2_OP_OFF;
 8005888:	4b59      	ldr	r3, [pc, #356]	@ (80059f0 <main+0x1018>)
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	4b58      	ldr	r3, [pc, #352]	@ (80059f0 <main+0x1018>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	6952      	ldr	r2, [r2, #20]
 8005892:	615a      	str	r2, [r3, #20]

			//turn off relays purging gas!
			CH1_OP.port->ODR |= CH1_Operate_OFF;
 8005894:	4b57      	ldr	r3, [pc, #348]	@ (80059f4 <main+0x101c>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	4b56      	ldr	r3, [pc, #344]	@ (80059f4 <main+0x101c>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058a2:	615a      	str	r2, [r3, #20]
			CH1_ARM.port->ODR |= CH1_Arm_OFF;
 80058a4:	4b54      	ldr	r3, [pc, #336]	@ (80059f8 <main+0x1020>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	4b53      	ldr	r3, [pc, #332]	@ (80059f8 <main+0x1020>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058b2:	615a      	str	r2, [r3, #20]


			switch_case_state = 0;
 80058b4:	4b46      	ldr	r3, [pc, #280]	@ (80059d0 <main+0xff8>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
			break;
 80058ba:	e07e      	b.n	80059ba <main+0xfe2>
			//PURGE is NO -> output a low to purge
			//output a high to stop purging!
			//__disable_irq(); //during purge state, no other interference can disturb the purge state!


			CH3_ARM.port->ODR |= (CH3_Arm & 0x00)<<10;
 80058bc:	4b42      	ldr	r3, [pc, #264]	@ (80059c8 <main+0xff0>)
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	4b41      	ldr	r3, [pc, #260]	@ (80059c8 <main+0xff0>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	6952      	ldr	r2, [r2, #20]
 80058c6:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR |= (CH3_Operate & 0x00)<<9;
 80058c8:	4b40      	ldr	r3, [pc, #256]	@ (80059cc <main+0xff4>)
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	4b3f      	ldr	r3, [pc, #252]	@ (80059cc <main+0xff4>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	6952      	ldr	r2, [r2, #20]
 80058d2:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR|= (N2O_LED & 0x00) << 5;
 80058d4:	4b3b      	ldr	r3, [pc, #236]	@ (80059c4 <main+0xfec>)
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	4b3a      	ldr	r3, [pc, #232]	@ (80059c4 <main+0xfec>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	6952      	ldr	r2, [r2, #20]
 80058de:	615a      	str	r2, [r3, #20]

			led_O2.port->ODR|=(O2_LED & 0x00) << 6;
 80058e0:	4b3d      	ldr	r3, [pc, #244]	@ (80059d8 <main+0x1000>)
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	4b3c      	ldr	r3, [pc, #240]	@ (80059d8 <main+0x1000>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	6952      	ldr	r2, [r2, #20]
 80058ea:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR |= (CH2_Arm & 0x00)<<14;
 80058ec:	4b3b      	ldr	r3, [pc, #236]	@ (80059dc <main+0x1004>)
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	4b3a      	ldr	r3, [pc, #232]	@ (80059dc <main+0x1004>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	6952      	ldr	r2, [r2, #20]
 80058f6:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR |= (CH2_Operate & 0x00)<<13;
 80058f8:	4b39      	ldr	r3, [pc, #228]	@ (80059e0 <main+0x1008>)
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	4b38      	ldr	r3, [pc, #224]	@ (80059e0 <main+0x1008>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	6952      	ldr	r2, [r2, #20]
 8005902:	615a      	str	r2, [r3, #20]


			CH1_ARM.port->ODR |= CH1_Arm;
 8005904:	4b3c      	ldr	r3, [pc, #240]	@ (80059f8 <main+0x1020>)
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	4b3b      	ldr	r3, [pc, #236]	@ (80059f8 <main+0x1020>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	6952      	ldr	r2, [r2, #20]
 800590e:	615a      	str	r2, [r3, #20]
			CH1_OP.port->ODR |= CH1_Operate;
 8005910:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <main+0x101c>)
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	4b37      	ldr	r3, [pc, #220]	@ (80059f4 <main+0x101c>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	6952      	ldr	r2, [r2, #20]
 800591a:	615a      	str	r2, [r3, #20]
			//__enable_irq();
			//PURGE state will be left on UNTIL further notice as indicated by state var!
			switch_case_state = 0;
 800591c:	4b2c      	ldr	r3, [pc, #176]	@ (80059d0 <main+0xff8>)
 800591e:	2200      	movs	r2, #0
 8005920:	701a      	strb	r2, [r3, #0]
			break;
 8005922:	e04a      	b.n	80059ba <main+0xfe2>

		case 11: //O2 -> N20 Shutoff state (when O2 and N2O state are triggered at the same time)
			CH3_ARM.port->ODR |= (CH3_Arm & 0x00)<<10;
 8005924:	4b28      	ldr	r3, [pc, #160]	@ (80059c8 <main+0xff0>)
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	4b27      	ldr	r3, [pc, #156]	@ (80059c8 <main+0xff0>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	6952      	ldr	r2, [r2, #20]
 800592e:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR |= (CH3_Operate & 0x00)<<9;
 8005930:	4b26      	ldr	r3, [pc, #152]	@ (80059cc <main+0xff4>)
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	4b25      	ldr	r3, [pc, #148]	@ (80059cc <main+0xff4>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	6952      	ldr	r2, [r2, #20]
 800593a:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR|= (N2O_LED & 0x00) << 5;
 800593c:	4b21      	ldr	r3, [pc, #132]	@ (80059c4 <main+0xfec>)
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	4b20      	ldr	r3, [pc, #128]	@ (80059c4 <main+0xfec>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	6952      	ldr	r2, [r2, #20]
 8005946:	615a      	str	r2, [r3, #20]

			led_O2.port->ODR|=(O2_LED & 0x00) << 6;
 8005948:	4b23      	ldr	r3, [pc, #140]	@ (80059d8 <main+0x1000>)
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <main+0x1000>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	6952      	ldr	r2, [r2, #20]
 8005952:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR |= (CH2_Arm & 0x00)<<14;
 8005954:	4b21      	ldr	r3, [pc, #132]	@ (80059dc <main+0x1004>)
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	4b20      	ldr	r3, [pc, #128]	@ (80059dc <main+0x1004>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	6952      	ldr	r2, [r2, #20]
 800595e:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR |= (CH2_Operate & 0x00)<<13;
 8005960:	4b1f      	ldr	r3, [pc, #124]	@ (80059e0 <main+0x1008>)
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	4b1e      	ldr	r3, [pc, #120]	@ (80059e0 <main+0x1008>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	6952      	ldr	r2, [r2, #20]
 800596a:	615a      	str	r2, [r3, #20]

			switch_case_state = 0;
 800596c:	4b18      	ldr	r3, [pc, #96]	@ (80059d0 <main+0xff8>)
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
			break;
 8005972:	e022      	b.n	80059ba <main+0xfe2>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005974:	b672      	cpsid	i
}
 8005976:	bf00      	nop

		case 0x80:
			__disable_irq();
			Ignition1_OP.port->ODR |= IGNITION1_OP;
 8005978:	4b1c      	ldr	r3, [pc, #112]	@ (80059ec <main+0x1014>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <main+0x1014>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005986:	615a      	str	r2, [r3, #20]
		//	Ignition2_OP.port->ODR |= IGNITION2_OP;
			switch_case_state = 0;
 8005988:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <main+0xff8>)
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
			delay_software_ms(30); //provide a delay to ensure fire state has been activated for a long enough time
 800598e:	201e      	movs	r0, #30
 8005990:	f000 fe5d 	bl	800664e <delay_software_ms>
			Ignition1_OP.port->ODR |= IGNITION1_OP_OFF;
 8005994:	4b15      	ldr	r3, [pc, #84]	@ (80059ec <main+0x1014>)
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	4b14      	ldr	r3, [pc, #80]	@ (80059ec <main+0x1014>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	6952      	ldr	r2, [r2, #20]
 800599e:	615a      	str	r2, [r3, #20]
			state |= (0x02 <<2); //this if more so for remote control 0bxxxx11xx become 0
 80059a0:	4b16      	ldr	r3, [pc, #88]	@ (80059fc <main+0x1024>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f043 0308 	orr.w	r3, r3, #8
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	4b14      	ldr	r3, [pc, #80]	@ (80059fc <main+0x1024>)
 80059ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80059ae:	b662      	cpsie	i
}
 80059b0:	bf00      	nop
			//turns of the ignite state once done!
			//state cannot be triggered more than once sequentially!
			__enable_irq();
			break;
 80059b2:	e002      	b.n	80059ba <main+0xfe2>
	break; //enter PURGE state
 80059b4:	bf00      	nop
 80059b6:	f7ff ba39 	b.w	8004e2c <main+0x454>
	switch(switch_case_state){
 80059ba:	f7ff ba37 	b.w	8004e2c <main+0x454>
 80059be:	bf00      	nop
 80059c0:	2000002c 	.word	0x2000002c
 80059c4:	20000414 	.word	0x20000414
 80059c8:	20000324 	.word	0x20000324
 80059cc:	2000030c 	.word	0x2000030c
 80059d0:	20000028 	.word	0x20000028
 80059d4:	200002f4 	.word	0x200002f4
 80059d8:	2000042c 	.word	0x2000042c
 80059dc:	200002dc 	.word	0x200002dc
 80059e0:	200002c4 	.word	0x200002c4
 80059e4:	20000354 	.word	0x20000354
 80059e8:	20000384 	.word	0x20000384
 80059ec:	2000036c 	.word	0x2000036c
 80059f0:	2000039c 	.word	0x2000039c
 80059f4:	2000027c 	.word	0x2000027c
 80059f8:	20000294 	.word	0x20000294
 80059fc:	20000029 	.word	0x20000029

08005a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b094      	sub	sp, #80	@ 0x50
 8005a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a06:	f107 0320 	add.w	r3, r7, #32
 8005a0a:	2230      	movs	r2, #48	@ 0x30
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fd58 	bl	80074c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a14:	f107 030c 	add.w	r3, r7, #12
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a24:	2300      	movs	r3, #0
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad8 <SystemClock_Config+0xd8>)
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ad8 <SystemClock_Config+0xd8>)
 8005a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a34:	4b28      	ldr	r3, [pc, #160]	@ (8005ad8 <SystemClock_Config+0xd8>)
 8005a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a40:	2300      	movs	r3, #0
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	4b25      	ldr	r3, [pc, #148]	@ (8005adc <SystemClock_Config+0xdc>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a24      	ldr	r2, [pc, #144]	@ (8005adc <SystemClock_Config+0xdc>)
 8005a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	4b22      	ldr	r3, [pc, #136]	@ (8005adc <SystemClock_Config+0xdc>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005a58:	607b      	str	r3, [r7, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a60:	2301      	movs	r3, #1
 8005a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a64:	2310      	movs	r3, #16
 8005a66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005a70:	2308      	movs	r3, #8
 8005a72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005a74:	23b4      	movs	r3, #180	@ 0xb4
 8005a76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a80:	f107 0320 	add.w	r3, r7, #32
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f8f9 	bl	8006c7c <HAL_RCC_OscConfig>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005a90:	f000 fa4c 	bl	8005f2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005a94:	f001 f8a2 	bl	8006bdc <HAL_PWREx_EnableOverDrive>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005a9e:	f000 fa45 	bl	8005f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005aa2:	230f      	movs	r3, #15
 8005aa4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005aae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005ab2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005aba:	f107 030c 	add.w	r3, r7, #12
 8005abe:	2105      	movs	r1, #5
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fb53 	bl	800716c <HAL_RCC_ClockConfig>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8005acc:	f000 fa2e 	bl	8005f2c <Error_Handler>
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	3750      	adds	r7, #80	@ 0x50
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	40007000 	.word	0x40007000

08005ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	4b1e      	ldr	r3, [pc, #120]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aee:	4a1d      	ldr	r2, [pc, #116]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005af0:	f043 0304 	orr.w	r3, r3, #4
 8005af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005af6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	4b17      	ldr	r3, [pc, #92]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	4a16      	ldr	r2, [pc, #88]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b12:	4b14      	ldr	r3, [pc, #80]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	60bb      	str	r3, [r7, #8]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	4b10      	ldr	r3, [pc, #64]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b26:	4a0f      	ldr	r2, [pc, #60]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	607b      	str	r3, [r7, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	4a08      	ldr	r2, [pc, #32]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <MX_GPIO_Init+0x84>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40023800 	.word	0x40023800

08005b68 <TIM1_UP_TIM10_IRQHandler>:

/* USER CODE BEGIN 4 */

   void TIM1_UP_TIM10_IRQHandler(void)
   {
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
		hardware_timer_count++;
 8005b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c28 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	4b2c      	ldr	r3, [pc, #176]	@ (8005c28 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 8005b76:	701a      	strb	r2, [r3, #0]
		if(hardware_timer_count<5)
 8005b78:	4b2b      	ldr	r3, [pc, #172]	@ (8005c28 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d80d      	bhi.n	8005b9c <TIM1_UP_TIM10_IRQHandler+0x34>
		{
			   //Hardware Timer interrupt callback for LoRa RX
				while((TIM1->SR & TIM_SR_UIF)==0); //wait for hardware interrupt flag to be updated
 8005b80:	bf00      	nop
 8005b82:	4b2a      	ldr	r3, [pc, #168]	@ (8005c2c <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f9      	beq.n	8005b82 <TIM1_UP_TIM10_IRQHandler+0x1a>
				TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 8005b8e:	4b27      	ldr	r3, [pc, #156]	@ (8005c2c <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	4a26      	ldr	r2, [pc, #152]	@ (8005c2c <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	6113      	str	r3, [r2, #16]

			hardware_timer_count = 0;
			while((TIM1->SR & TIM_SR_UIF)==0); //wait for hardware interrupt flag to be updated
			TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
		}
   }
 8005b9a:	e03f      	b.n	8005c1c <TIM1_UP_TIM10_IRQHandler+0xb4>
			CH3_ARM.port->ODR |= (CH3_Arm & 0x00)<<10;
 8005b9c:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <TIM1_UP_TIM10_IRQHandler+0xc8>)
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	4b23      	ldr	r3, [pc, #140]	@ (8005c30 <TIM1_UP_TIM10_IRQHandler+0xc8>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	6952      	ldr	r2, [r2, #20]
 8005ba6:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR |= (CH3_Operate & 0x00)<<9;
 8005ba8:	4b22      	ldr	r3, [pc, #136]	@ (8005c34 <TIM1_UP_TIM10_IRQHandler+0xcc>)
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	4b21      	ldr	r3, [pc, #132]	@ (8005c34 <TIM1_UP_TIM10_IRQHandler+0xcc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	6952      	ldr	r2, [r2, #20]
 8005bb2:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR|= (N2O_LED & 0x00) << 5;
 8005bb4:	4b20      	ldr	r3, [pc, #128]	@ (8005c38 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c38 <TIM1_UP_TIM10_IRQHandler+0xd0>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	6952      	ldr	r2, [r2, #20]
 8005bbe:	615a      	str	r2, [r3, #20]
			led_O2.port->ODR|=(O2_LED & 0x00) << 6;
 8005bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8005c3c <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c3c <TIM1_UP_TIM10_IRQHandler+0xd4>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	6952      	ldr	r2, [r2, #20]
 8005bca:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR |= (CH2_Arm & 0x00)<<14;
 8005bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c40 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c40 <TIM1_UP_TIM10_IRQHandler+0xd8>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	6952      	ldr	r2, [r2, #20]
 8005bd6:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR |= (CH2_Operate & 0x00)<<13;
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c44 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	4b19      	ldr	r3, [pc, #100]	@ (8005c44 <TIM1_UP_TIM10_IRQHandler+0xdc>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	6952      	ldr	r2, [r2, #20]
 8005be2:	615a      	str	r2, [r3, #20]
			CH1_ARM.port->ODR |= CH1_Arm;
 8005be4:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	4b17      	ldr	r3, [pc, #92]	@ (8005c48 <TIM1_UP_TIM10_IRQHandler+0xe0>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	6952      	ldr	r2, [r2, #20]
 8005bee:	615a      	str	r2, [r3, #20]
			CH1_OP.port->ODR |= CH1_Operate;
 8005bf0:	4b16      	ldr	r3, [pc, #88]	@ (8005c4c <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <TIM1_UP_TIM10_IRQHandler+0xe4>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	6952      	ldr	r2, [r2, #20]
 8005bfa:	615a      	str	r2, [r3, #20]
			hardware_timer_count = 0;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <TIM1_UP_TIM10_IRQHandler+0xc0>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
			while((TIM1->SR & TIM_SR_UIF)==0); //wait for hardware interrupt flag to be updated
 8005c02:	bf00      	nop
 8005c04:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f9      	beq.n	8005c04 <TIM1_UP_TIM10_IRQHandler+0x9c>
			TIM1->SR &= ~(TIM_SR_UIF); //clears UIF register
 8005c10:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4a05      	ldr	r2, [pc, #20]	@ (8005c2c <TIM1_UP_TIM10_IRQHandler+0xc4>)
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	6113      	str	r3, [r2, #16]
   }
 8005c1c:	bf00      	nop
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	2000002e 	.word	0x2000002e
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	20000324 	.word	0x20000324
 8005c34:	2000030c 	.word	0x2000030c
 8005c38:	20000414 	.word	0x20000414
 8005c3c:	2000042c 	.word	0x2000042c
 8005c40:	200002dc 	.word	0x200002dc
 8005c44:	200002c4 	.word	0x200002c4
 8005c48:	20000294 	.word	0x20000294
 8005c4c:	2000027c 	.word	0x2000027c

08005c50 <EXTI1_IRQHandler>:

   void EXTI1_IRQHandler(void)
   {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
	delay_software_us(100); //100us delay to prevent debouncing
 8005c54:	2064      	movs	r0, #100	@ 0x64
 8005c56:	f000 fcde 	bl	8006616 <delay_software_us>
   	if(EXTI->PR & EXTI_PR_PR1) //if the rising edge has been detected by pin 2
 8005c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d0c <EXTI1_IRQHandler+0xbc>)
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d050      	beq.n	8005d08 <EXTI1_IRQHandler+0xb8>
   	{
   		EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 8005c66:	4b29      	ldr	r3, [pc, #164]	@ (8005d0c <EXTI1_IRQHandler+0xbc>)
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	4a28      	ldr	r2, [pc, #160]	@ (8005d0c <EXTI1_IRQHandler+0xbc>)
 8005c6c:	f023 0302 	bic.w	r3, r3, #2
 8005c70:	6153      	str	r3, [r2, #20]
   		//Dump flag for local access!
   		//do something here
   		//equivalent of Purge Mode
   		if((local_control_SW.port->IDR & LOCAL_CONTROL_SW) == LOCAL_CONTROL_SW)
 8005c72:	4b27      	ldr	r3, [pc, #156]	@ (8005d10 <EXTI1_IRQHandler+0xc0>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c80:	d13c      	bne.n	8005cfc <EXTI1_IRQHandler+0xac>
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 8005c82:	4b22      	ldr	r3, [pc, #136]	@ (8005d0c <EXTI1_IRQHandler+0xbc>)
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	4a21      	ldr	r2, [pc, #132]	@ (8005d0c <EXTI1_IRQHandler+0xbc>)
 8005c88:	f023 0302 	bic.w	r3, r3, #2
 8005c8c:	6153      	str	r3, [r2, #20]
			CH3_ARM.port->ODR |= (CH3_Arm & 0x00)<<10;
 8005c8e:	4b21      	ldr	r3, [pc, #132]	@ (8005d14 <EXTI1_IRQHandler+0xc4>)
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	4b20      	ldr	r3, [pc, #128]	@ (8005d14 <EXTI1_IRQHandler+0xc4>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	6952      	ldr	r2, [r2, #20]
 8005c98:	615a      	str	r2, [r3, #20]
			CH3_OP.port->ODR |= (CH3_Operate & 0x00)<<9;
 8005c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005d18 <EXTI1_IRQHandler+0xc8>)
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d18 <EXTI1_IRQHandler+0xc8>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	6952      	ldr	r2, [r2, #20]
 8005ca4:	615a      	str	r2, [r3, #20]
			led_n2o.port->ODR|= (N2O_LED & 0x00) << 5;
 8005ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d1c <EXTI1_IRQHandler+0xcc>)
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	4b1c      	ldr	r3, [pc, #112]	@ (8005d1c <EXTI1_IRQHandler+0xcc>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	6952      	ldr	r2, [r2, #20]
 8005cb0:	615a      	str	r2, [r3, #20]

			led_O2.port->ODR|=(O2_LED & 0x00) << 6;
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d20 <EXTI1_IRQHandler+0xd0>)
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d20 <EXTI1_IRQHandler+0xd0>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	6952      	ldr	r2, [r2, #20]
 8005cbc:	615a      	str	r2, [r3, #20]
			CH2_ARM.port->ODR |= (CH2_Arm & 0x00)<<14;
 8005cbe:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <EXTI1_IRQHandler+0xd4>)
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	4b18      	ldr	r3, [pc, #96]	@ (8005d24 <EXTI1_IRQHandler+0xd4>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	6952      	ldr	r2, [r2, #20]
 8005cc8:	615a      	str	r2, [r3, #20]
			CH2_OP.port->ODR |= (CH2_Operate & 0x00)<<13;
 8005cca:	4b17      	ldr	r3, [pc, #92]	@ (8005d28 <EXTI1_IRQHandler+0xd8>)
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	4b16      	ldr	r3, [pc, #88]	@ (8005d28 <EXTI1_IRQHandler+0xd8>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	6952      	ldr	r2, [r2, #20]
 8005cd4:	615a      	str	r2, [r3, #20]

			CH1_ARM.port->ODR |= CH1_Arm;
 8005cd6:	4b15      	ldr	r3, [pc, #84]	@ (8005d2c <EXTI1_IRQHandler+0xdc>)
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	4b14      	ldr	r3, [pc, #80]	@ (8005d2c <EXTI1_IRQHandler+0xdc>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	6952      	ldr	r2, [r2, #20]
 8005ce0:	615a      	str	r2, [r3, #20]
			CH1_OP.port->ODR |= CH1_Operate;
 8005ce2:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <EXTI1_IRQHandler+0xe0>)
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	4b12      	ldr	r3, [pc, #72]	@ (8005d30 <EXTI1_IRQHandler+0xe0>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	6952      	ldr	r2, [r2, #20]
 8005cec:	615a      	str	r2, [r3, #20]
			//__enable_irq();
			//PURGE state will be left on UNTIL further notice as indicated by state var!
			switch_case_state = 0; //will reset state machine if interrupt is triggered
 8005cee:	4b11      	ldr	r3, [pc, #68]	@ (8005d34 <EXTI1_IRQHandler+0xe4>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
			//might need to trigger a dump flag that restarts the main loop!
			dump_flag = 1; //tells program manual dump flag has been set!
 8005cf4:	4b10      	ldr	r3, [pc, #64]	@ (8005d38 <EXTI1_IRQHandler+0xe8>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	701a      	strb	r2, [r3, #0]
   		else
   		{
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
   		 }
    	}
   }
 8005cfa:	e005      	b.n	8005d08 <EXTI1_IRQHandler+0xb8>
   			EXTI->PR &= ~EXTI_PR_PR1; //resets the flag
 8005cfc:	4b03      	ldr	r3, [pc, #12]	@ (8005d0c <EXTI1_IRQHandler+0xbc>)
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	4a02      	ldr	r2, [pc, #8]	@ (8005d0c <EXTI1_IRQHandler+0xbc>)
 8005d02:	f023 0302 	bic.w	r3, r3, #2
 8005d06:	6153      	str	r3, [r2, #20]
   }
 8005d08:	bf00      	nop
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40013c00 	.word	0x40013c00
 8005d10:	2000045c 	.word	0x2000045c
 8005d14:	20000324 	.word	0x20000324
 8005d18:	2000030c 	.word	0x2000030c
 8005d1c:	20000414 	.word	0x20000414
 8005d20:	2000042c 	.word	0x2000042c
 8005d24:	200002dc 	.word	0x200002dc
 8005d28:	200002c4 	.word	0x200002c4
 8005d2c:	20000294 	.word	0x20000294
 8005d30:	2000027c 	.word	0x2000027c
 8005d34:	20000028 	.word	0x20000028
 8005d38:	2000002f 	.word	0x2000002f

08005d3c <EXTI3_IRQHandler>:


  void EXTI3_IRQHandler(void)
  {
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  	if(EXTI->PR & EXTI_PR_PR3) //if the rising edge has been detected by pin 2
 8005d40:	4b08      	ldr	r3, [pc, #32]	@ (8005d64 <EXTI3_IRQHandler+0x28>)
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <EXTI3_IRQHandler+0x1c>
  	{
  		EXTI->PR &= ~EXTI_PR_PR3; //resets the flag
 8005d4c:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <EXTI3_IRQHandler+0x28>)
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <EXTI3_IRQHandler+0x28>)
 8005d52:	f023 0308 	bic.w	r3, r3, #8
 8005d56:	6153      	str	r3, [r2, #20]
  		//ambient temperature alert!
  		//do something here
  	}
  }
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40013c00 	.word	0x40013c00

08005d68 <EXTI9_5_IRQHandler>:

  void EXTI9_5_IRQHandler(void)
  {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b096      	sub	sp, #88	@ 0x58
 8005d6c:	af04      	add	r7, sp, #16
	   *  2) Determine which packet has been received by the GSE itself (byte 1)
	   *  3) Store the FIFO data via
	   *  4) Change state variable
	   *  5) Proceed
	   */
	  uint8_t transmit_state = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  uint8_t pointerdata[32];
  	if(EXTI->PR & 0x1F0) //if the rising edge has been detected by pins 5:9
 8005d74:	4b5d      	ldr	r3, [pc, #372]	@ (8005eec <EXTI9_5_IRQHandler+0x184>)
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80b0 	beq.w	8005ee2 <EXTI9_5_IRQHandler+0x17a>
  	{
  		EXTI->PR &= ~0x1F0; //resets the flag
 8005d82:	4b5a      	ldr	r3, [pc, #360]	@ (8005eec <EXTI9_5_IRQHandler+0x184>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4a59      	ldr	r2, [pc, #356]	@ (8005eec <EXTI9_5_IRQHandler+0x184>)
 8005d88:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8005d8c:	6153      	str	r3, [r2, #20]

  		SX1272_startReceive(&lora);
 8005d8e:	4858      	ldr	r0, [pc, #352]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005d90:	f7fe fcd9 	bl	8004746 <SX1272_startReceive>
  		SX1272_readReceive(&lora, pointerdata, LORA_MSG_PAYLOAD_LENGTH);
 8005d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d98:	221f      	movs	r2, #31
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4854      	ldr	r0, [pc, #336]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005d9e:	f7fe fcf6 	bl	800478e <SX1272_readReceive>

  		GSE_Command.id= pointerdata[0];
 8005da2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005da6:	4b53      	ldr	r3, [pc, #332]	@ (8005ef4 <EXTI9_5_IRQHandler+0x18c>)
 8005da8:	701a      	strb	r2, [r3, #0]
  		GSE_Command.data[0]= pointerdata[1];
 8005daa:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005dae:	4b51      	ldr	r3, [pc, #324]	@ (8005ef4 <EXTI9_5_IRQHandler+0x18c>)
 8005db0:	705a      	strb	r2, [r3, #1]
  		GSE_Command.data[1]= pointerdata[2];
 8005db2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005db6:	4b4f      	ldr	r3, [pc, #316]	@ (8005ef4 <EXTI9_5_IRQHandler+0x18c>)
 8005db8:	709a      	strb	r2, [r3, #2]
  		if(GSE_Command.id != 0x02)
 8005dba:	4b4e      	ldr	r3, [pc, #312]	@ (8005ef4 <EXTI9_5_IRQHandler+0x18c>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d00a      	beq.n	8005dd8 <EXTI9_5_IRQHandler+0x70>
  		{
  			lora_error = ERROR_INVALID_PACKET_ID;
 8005dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ef8 <EXTI9_5_IRQHandler+0x190>)
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	701a      	strb	r2, [r3, #0]
  			hardware_timer_count++;
 8005dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8005efc <EXTI9_5_IRQHandler+0x194>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8005efc <EXTI9_5_IRQHandler+0x194>)
 8005dd2:	701a      	strb	r2, [r3, #0]
  			__asm("NOP");
 8005dd4:	bf00      	nop
  			default:
  				lora_error = ERROR_SYSTEM_STATE_FAILED;
  			}
  		}
  	}
  }
 8005dd6:	e084      	b.n	8005ee2 <EXTI9_5_IRQHandler+0x17a>
  		else if((GSE_Command.data[0] & 0x01) != 1) //ID is correct
 8005dd8:	4b46      	ldr	r3, [pc, #280]	@ (8005ef4 <EXTI9_5_IRQHandler+0x18c>)
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <EXTI9_5_IRQHandler+0x90>
  			state = 0; //make sure everything is OFF
 8005de4:	4b46      	ldr	r3, [pc, #280]	@ (8005f00 <EXTI9_5_IRQHandler+0x198>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
  			led_power.port->ODR |= (PWR_LED & 0x00);
 8005dea:	4b46      	ldr	r3, [pc, #280]	@ (8005f04 <EXTI9_5_IRQHandler+0x19c>)
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	4b45      	ldr	r3, [pc, #276]	@ (8005f04 <EXTI9_5_IRQHandler+0x19c>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	6952      	ldr	r2, [r2, #20]
 8005df4:	615a      	str	r2, [r3, #20]
  }
 8005df6:	e074      	b.n	8005ee2 <EXTI9_5_IRQHandler+0x17a>
  			led_power.port->ODR |= PWR_LED; //Turn ON LED
 8005df8:	4b42      	ldr	r3, [pc, #264]	@ (8005f04 <EXTI9_5_IRQHandler+0x19c>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	4b41      	ldr	r3, [pc, #260]	@ (8005f04 <EXTI9_5_IRQHandler+0x19c>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	615a      	str	r2, [r3, #20]
  			state = GSE_Command.data[0];
 8005e08:	4b3a      	ldr	r3, [pc, #232]	@ (8005ef4 <EXTI9_5_IRQHandler+0x18c>)
 8005e0a:	785a      	ldrb	r2, [r3, #1]
 8005e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8005f00 <EXTI9_5_IRQHandler+0x198>)
 8005e0e:	701a      	strb	r2, [r3, #0]
  			hardware_timer_count = 0;
 8005e10:	4b3a      	ldr	r3, [pc, #232]	@ (8005efc <EXTI9_5_IRQHandler+0x194>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
  			uint8_t transmit_state = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  			switch(TX_Packet_Flag)
 8005e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f08 <EXTI9_5_IRQHandler+0x1a0>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <EXTI9_5_IRQHandler+0xc2>
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d02f      	beq.n	8005e88 <EXTI9_5_IRQHandler+0x120>
 8005e28:	e057      	b.n	8005eda <EXTI9_5_IRQHandler+0x172>
  				LoRa_Packet packet_0 = LoRa_GSEData_1(0x06,
 8005e2a:	4b38      	ldr	r3, [pc, #224]	@ (8005f0c <EXTI9_5_IRQHandler+0x1a4>)
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	1d38      	adds	r0, r7, #4
 8005e30:	9303      	str	r3, [sp, #12]
 8005e32:	4b37      	ldr	r3, [pc, #220]	@ (8005f10 <EXTI9_5_IRQHandler+0x1a8>)
 8005e34:	9302      	str	r3, [sp, #8]
 8005e36:	4b37      	ldr	r3, [pc, #220]	@ (8005f14 <EXTI9_5_IRQHandler+0x1ac>)
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <EXTI9_5_IRQHandler+0x1b0>)
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	4b37      	ldr	r3, [pc, #220]	@ (8005f1c <EXTI9_5_IRQHandler+0x1b4>)
 8005e40:	4a37      	ldr	r2, [pc, #220]	@ (8005f20 <EXTI9_5_IRQHandler+0x1b8>)
 8005e42:	2106      	movs	r1, #6
 8005e44:	f7fe fafe 	bl	8004444 <LoRa_GSEData_1>
  				SX1272_transmit(&lora, packet_0.data);
 8005e48:	1d3b      	adds	r3, r7, #4
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4828      	ldr	r0, [pc, #160]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005e50:	f7fe fc42 	bl	80046d8 <SX1272_transmit>
  		  			transmit_state = SX1272_readRegister(&lora, SX1272_REG_IRQ_FLAGS);
 8005e54:	2112      	movs	r1, #18
 8005e56:	4826      	ldr	r0, [pc, #152]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005e58:	f7fe fd19 	bl	800488e <SX1272_readRegister>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  		  		}while((transmit_state & 0x08) == 0x00); //will continue if transmit state and 0x08 are the same or 0
 8005e62:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f2      	beq.n	8005e54 <EXTI9_5_IRQHandler+0xec>
  		  		  SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 8005e6e:	2208      	movs	r2, #8
 8005e70:	2112      	movs	r1, #18
 8005e72:	481f      	ldr	r0, [pc, #124]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005e74:	f7fe fcd7 	bl	8004826 <SX1272_writeRegister>
  		  		  TX_Packet_Flag = 1;
 8005e78:	4b23      	ldr	r3, [pc, #140]	@ (8005f08 <EXTI9_5_IRQHandler+0x1a0>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]
  		  		_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS); //resetting flag back to RXCONTINUOUS mode after flag has been set!
 8005e7e:	2105      	movs	r1, #5
 8005e80:	481b      	ldr	r0, [pc, #108]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005e82:	f7fe fbe2 	bl	800464a <_SX1272_setMode>
  		  		break;
 8005e86:	e02c      	b.n	8005ee2 <EXTI9_5_IRQHandler+0x17a>
  				LoRa_Packet packet_1 = LoRa_GSEData_2(0x07,
 8005e88:	4b20      	ldr	r3, [pc, #128]	@ (8005f0c <EXTI9_5_IRQHandler+0x1a4>)
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	1d38      	adds	r0, r7, #4
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	4b24      	ldr	r3, [pc, #144]	@ (8005f24 <EXTI9_5_IRQHandler+0x1bc>)
 8005e92:	4a25      	ldr	r2, [pc, #148]	@ (8005f28 <EXTI9_5_IRQHandler+0x1c0>)
 8005e94:	2107      	movs	r1, #7
 8005e96:	f7fe fb76 	bl	8004586 <LoRa_GSEData_2>
	  			SX1272_transmit(&lora, packet_1.data);
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4813      	ldr	r0, [pc, #76]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005ea2:	f7fe fc19 	bl	80046d8 <SX1272_transmit>
  		  			transmit_state = SX1272_readRegister(&lora, SX1272_REG_IRQ_FLAGS);
 8005ea6:	2112      	movs	r1, #18
 8005ea8:	4811      	ldr	r0, [pc, #68]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005eaa:	f7fe fcf0 	bl	800488e <SX1272_readRegister>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  		  		}while((transmit_state & 0x08) == 0x00);
 8005eb4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0f2      	beq.n	8005ea6 <EXTI9_5_IRQHandler+0x13e>
  		  			SX1272_writeRegister(&lora, SX1272_REG_IRQ_FLAGS, 0x08); //clears IRQ reg
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	2112      	movs	r1, #18
 8005ec4:	480a      	ldr	r0, [pc, #40]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005ec6:	f7fe fcae 	bl	8004826 <SX1272_writeRegister>
  		  			TX_Packet_Flag = 0;
 8005eca:	4b0f      	ldr	r3, [pc, #60]	@ (8005f08 <EXTI9_5_IRQHandler+0x1a0>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
  		  		_SX1272_setMode(&lora, SX1272_MODE_RXCONTINUOUS);
 8005ed0:	2105      	movs	r1, #5
 8005ed2:	4807      	ldr	r0, [pc, #28]	@ (8005ef0 <EXTI9_5_IRQHandler+0x188>)
 8005ed4:	f7fe fbb9 	bl	800464a <_SX1272_setMode>
  		  		break;
 8005ed8:	e003      	b.n	8005ee2 <EXTI9_5_IRQHandler+0x17a>
  				lora_error = ERROR_SYSTEM_STATE_FAILED;
 8005eda:	4b07      	ldr	r3, [pc, #28]	@ (8005ef8 <EXTI9_5_IRQHandler+0x190>)
 8005edc:	2204      	movs	r2, #4
 8005ede:	701a      	strb	r2, [r3, #0]
  }
 8005ee0:	e7ff      	b.n	8005ee2 <EXTI9_5_IRQHandler+0x17a>
 8005ee2:	bf00      	nop
 8005ee4:	3748      	adds	r7, #72	@ 0x48
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40013c00 	.word	0x40013c00
 8005ef0:	20000038 	.word	0x20000038
 8005ef4:	20000058 	.word	0x20000058
 8005ef8:	20000036 	.word	0x20000036
 8005efc:	2000002e 	.word	0x2000002e
 8005f00:	20000029 	.word	0x20000029
 8005f04:	200003b4 	.word	0x200003b4
 8005f08:	20000030 	.word	0x20000030
 8005f0c:	2000002c 	.word	0x2000002c
 8005f10:	20000160 	.word	0x20000160
 8005f14:	20000124 	.word	0x20000124
 8005f18:	200000e8 	.word	0x200000e8
 8005f1c:	200000ac 	.word	0x200000ac
 8005f20:	200001f4 	.word	0x200001f4
 8005f24:	20000078 	.word	0x20000078
 8005f28:	2000019c 	.word	0x2000019c

08005f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005f30:	b672      	cpsid	i
}
 8005f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8005f34:	bf00      	nop
 8005f36:	e7fd      	b.n	8005f34 <Error_Handler+0x8>

08005f38 <ADC124S021_init>:
#include "sensors.h"
#include "spi.h"
#include "stm32f4xx_hal.h"

void ADC124S021_init(ADC124S021 *adc, SensorType SensorType, GPIO_TypeDef *port, unsigned long cs)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	460b      	mov	r3, r1
 8005f46:	72fb      	strb	r3, [r7, #11]
	SPI_init(&adc->base , SensorType, SPI1, MODE16,port,cs);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1d18      	adds	r0, r3, #4
 8005f4c:	7af9      	ldrb	r1, [r7, #11]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2301      	movs	r3, #1
 8005f58:	4a08      	ldr	r2, [pc, #32]	@ (8005f7c <ADC124S021_init+0x44>)
 8005f5a:	f000 fb93 	bl	8006684 <SPI_init>
	adc->base;
	adc->device = SensorType;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	7afa      	ldrb	r2, [r7, #11]
 8005f62:	f883 2020 	strb.w	r2, [r3, #32]
	adc->extract = ADC124S021_extract;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a05      	ldr	r2, [pc, #20]	@ (8005f80 <ADC124S021_init+0x48>)
 8005f6a:	601a      	str	r2, [r3, #0]
	adc->process = ADC124S021_process;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a05      	ldr	r2, [pc, #20]	@ (8005f84 <ADC124S021_init+0x4c>)
 8005f70:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8005f72:	bf00      	nop
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40013000 	.word	0x40013000
 8005f80:	08005f89 	.word	0x08005f89
 8005f84:	08006081 	.word	0x08006081

08005f88 <ADC124S021_extract>:

void ADC124S021_extract(ADC124S021 * adc)
{
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
switch(adc->device)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <ADC124S021_extract+0x18>
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d032      	beq.n	8006004 <ADC124S021_extract+0x7c>
			//[3] = IN4 -> LOADCELL4
		}
	GPIOG->ODR |= GPIO_ODR_OD4;
	break;
	}
}
 8005f9e:	e063      	b.n	8006068 <ADC124S021_extract+0xe0>
	GPIOA->ODR &= ~(GPIO_ODR_OD2);
 8005fa0:	4b33      	ldr	r3, [pc, #204]	@ (8006070 <ADC124S021_extract+0xe8>)
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	4a32      	ldr	r2, [pc, #200]	@ (8006070 <ADC124S021_extract+0xe8>)
 8005fa6:	f023 0304 	bic.w	r3, r3, #4
 8005faa:	6153      	str	r3, [r2, #20]
	while(TIM7->SR & TIM_SR_UIF);
 8005fac:	bf00      	nop
 8005fae:	4b31      	ldr	r3, [pc, #196]	@ (8006074 <ADC124S021_extract+0xec>)
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f9      	bne.n	8005fae <ADC124S021_extract+0x26>
		TIM7->SR |= 0 << TIM_SR_UIF_Pos; //clearing the UIF bit
 8005fba:	4b2e      	ldr	r3, [pc, #184]	@ (8006074 <ADC124S021_extract+0xec>)
 8005fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8006074 <ADC124S021_extract+0xec>)
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	6113      	str	r3, [r2, #16]
	for(int i = 0; i<NUM_MUX; i++){ //might need to change
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e013      	b.n	8005ff0 <ADC124S021_extract+0x68>
			adc->data_raw[i] = SPI_transmit(&adc, i<<3); //changing the control register
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	687c      	ldr	r4, [r7, #4]
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fb8e 	bl	80066f8 <SPI_transmit>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3310      	adds	r3, #16
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4423      	add	r3, r4
 8005fe8:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i<NUM_MUX; i++){ //might need to change
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	dde8      	ble.n	8005fc8 <ADC124S021_extract+0x40>
	GPIOA->ODR |= GPIO_ODR_OD2;
 8005ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8006070 <ADC124S021_extract+0xe8>)
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <ADC124S021_extract+0xe8>)
 8005ffc:	f043 0304 	orr.w	r3, r3, #4
 8006000:	6153      	str	r3, [r2, #20]
	break;
 8006002:	e031      	b.n	8006068 <ADC124S021_extract+0xe0>
	GPIOG->ODR &= ~(GPIO_ODR_OD4);
 8006004:	4b1c      	ldr	r3, [pc, #112]	@ (8006078 <ADC124S021_extract+0xf0>)
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	4a1b      	ldr	r2, [pc, #108]	@ (8006078 <ADC124S021_extract+0xf0>)
 800600a:	f023 0310 	bic.w	r3, r3, #16
 800600e:	6153      	str	r3, [r2, #20]
	while(TIM7->SR & TIM_SR_UIF);
 8006010:	bf00      	nop
 8006012:	4b18      	ldr	r3, [pc, #96]	@ (8006074 <ADC124S021_extract+0xec>)
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f9      	bne.n	8006012 <ADC124S021_extract+0x8a>
		TIM7->SR |= 0 << TIM_SR_UIF_Pos; //clearing the UIF bit
 800601e:	4b15      	ldr	r3, [pc, #84]	@ (8006074 <ADC124S021_extract+0xec>)
 8006020:	4a14      	ldr	r2, [pc, #80]	@ (8006074 <ADC124S021_extract+0xec>)
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	6113      	str	r3, [r2, #16]
	for(int i = 0; i<NUM_MUX; i++){ //might need to change
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	e013      	b.n	8006054 <ADC124S021_extract+0xcc>
			adc->data_raw[i] = SPI_transmit(&adc, i<<3);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	b29b      	uxth	r3, r3
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	b29a      	uxth	r2, r3
 8006034:	687c      	ldr	r4, [r7, #4]
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fb5c 	bl	80066f8 <SPI_transmit>
 8006040:	4603      	mov	r3, r0
 8006042:	461a      	mov	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	3310      	adds	r3, #16
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4423      	add	r3, r4
 800604c:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i<NUM_MUX; i++){ //might need to change
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3301      	adds	r3, #1
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b03      	cmp	r3, #3
 8006058:	dde8      	ble.n	800602c <ADC124S021_extract+0xa4>
	GPIOG->ODR |= GPIO_ODR_OD4;
 800605a:	4b07      	ldr	r3, [pc, #28]	@ (8006078 <ADC124S021_extract+0xf0>)
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	4a06      	ldr	r2, [pc, #24]	@ (8006078 <ADC124S021_extract+0xf0>)
 8006060:	f043 0310 	orr.w	r3, r3, #16
 8006064:	6153      	str	r3, [r2, #20]
	break;
 8006066:	bf00      	nop
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	bd90      	pop	{r4, r7, pc}
 8006070:	40020000 	.word	0x40020000
 8006074:	40001400 	.word	0x40001400
 8006078:	40021800 	.word	0x40021800
 800607c:	00000000 	.word	0x00000000

08006080 <ADC124S021_process>:

void ADC124S021_process(ADC124S021 * adc)
{
 8006080:	b5b0      	push	{r4, r5, r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	//throw this into a LPF
	for(int i = 0; i<4; i++){
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e085      	b.n	800619a <ADC124S021_process+0x11a>
		adc->data_processed[i] = 0.15*adc->data_processed[i] + (1-0.15)*adc->data_raw[i];
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3314      	adds	r3, #20
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fa fb24 	bl	80006e8 <__aeabi_i2d>
 80060a0:	a343      	add	r3, pc, #268	@ (adr r3, 80061b0 <ADC124S021_process+0x130>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa f8a3 	bl	80001f0 <__aeabi_dmul>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4614      	mov	r4, r2
 80060b0:	461d      	mov	r5, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3310      	adds	r3, #16
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	4413      	add	r3, r2
 80060bc:	885b      	ldrh	r3, [r3, #2]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa fb12 	bl	80006e8 <__aeabi_i2d>
 80060c4:	a33c      	add	r3, pc, #240	@ (adr r3, 80061b8 <ADC124S021_process+0x138>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa f891 	bl	80001f0 <__aeabi_dmul>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4620      	mov	r0, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	f7fa f9bb 	bl	8000450 <__adddf3>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	f7fa fbf3 	bl	80008cc <__aeabi_d2uiz>
 80060e6:	4603      	mov	r3, r0
 80060e8:	b299      	uxth	r1, r3
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	3314      	adds	r3, #20
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	460a      	mov	r2, r1
 80060f6:	805a      	strh	r2, [r3, #2]
		//data_processed[0] = input 1
		//data_processed[1] = input 2
		//data_processed[2] = input 3
		//data_processed[3] = input 4
		//conversion for each here ->
		switch(adc->device)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <ADC124S021_process+0x88>
 8006102:	2b01      	cmp	r3, #1
 8006104:	d023      	beq.n	800614e <ADC124S021_process+0xce>
 8006106:	e045      	b.n	8006194 <ADC124S021_process+0x114>
		{
			case 0: //loadcell
				union{float mass; uint16_t post_op; int mass_int;}Converter_load;
				for(int i = 0; i<4; i++)
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	e01b      	b.n	8006146 <ADC124S021_process+0xc6>
				{
					Converter_load.post_op  = adc->data_processed[i];
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	3314      	adds	r3, #20
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4413      	add	r3, r2
 8006118:	885b      	ldrh	r3, [r3, #2]
 800611a:	823b      	strh	r3, [r7, #16]
					Converter_load.mass_int = Converter_load.post_op;
 800611c:	8a3b      	ldrh	r3, [r7, #16]
 800611e:	613b      	str	r3, [r7, #16]
					adc->Converted_Value_LoadCell[i] = (Converter_load.mass_int/(50/4096));
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2200      	movs	r2, #0
 8006124:	fb93 f3f2 	sdiv	r3, r3, r2
 8006128:	ee07 3a90 	vmov	s15, r3
 800612c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	330c      	adds	r3, #12
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	3304      	adds	r3, #4
 800613c:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i<4; i++)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	3301      	adds	r3, #1
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b03      	cmp	r3, #3
 800614a:	dde0      	ble.n	800610e <ADC124S021_process+0x8e>
					//output for each channel will be in KG
				}
				break;
 800614c:	e022      	b.n	8006194 <ADC124S021_process+0x114>

			case 1: //transducer
				union{float mass; uint16_t post_op; int mass_int;}Converter_trans;
				for(int i = 0; i<4; i++)
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e01b      	b.n	800618c <ADC124S021_process+0x10c>
								{
									Converter_trans.post_op  = adc->data_processed[i];
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	3314      	adds	r3, #20
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	4413      	add	r3, r2
 800615e:	885b      	ldrh	r3, [r3, #2]
 8006160:	81bb      	strh	r3, [r7, #12]
									Converter_trans.mass_int = Converter_trans.post_op;
 8006162:	89bb      	ldrh	r3, [r7, #12]
 8006164:	60fb      	str	r3, [r7, #12]
									adc->Converted_Value_Transducer[i] = (Converter_trans.mass_int/(300/4096));
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	fb93 f3f2 	sdiv	r3, r3, r2
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	3310      	adds	r3, #16
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	3304      	adds	r3, #4
 8006182:	edc3 7a00 	vstr	s15, [r3]
				for(int i = 0; i<4; i++)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	3301      	adds	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b03      	cmp	r3, #3
 8006190:	dde0      	ble.n	8006154 <ADC124S021_process+0xd4>
									//output for each channel will be in bar of pressure
								}
				break;
 8006192:	bf00      	nop
	for(int i = 0; i<4; i++){
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	3301      	adds	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	2b03      	cmp	r3, #3
 800619e:	f77f af76 	ble.w	800608e <ADC124S021_process+0xe>
		}

	}
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bdb0      	pop	{r4, r5, r7, pc}
 80061ac:	f3af 8000 	nop.w
 80061b0:	33333333 	.word	0x33333333
 80061b4:	3fc33333 	.word	0x3fc33333
 80061b8:	33333333 	.word	0x33333333
 80061bc:	3feb3333 	.word	0x3feb3333

080061c0 <MCP96RL00_EMX_1_init>:

void MCP96RL00_EMX_1_init(MCP96RL00_EMX_1 * sensor, I2C_TypeDef *interface,GPIO_TypeDef *port, Type THERMOCOUPLE, uint8_t sample, uint8_t resolution, uint8_t address)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	70fb      	strb	r3, [r7, #3]
	I2C_init(&sensor->base, interface, port, THERMOCOUPLE, address);//change address later
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4618      	mov	r0, r3
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4613      	mov	r3, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	f7fa fd0c 	bl	8000bfc <I2C_init>
	sensor->address = address;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80061ea:	f883 2020 	strb.w	r2, [r3, #32]
	sensor->device = THERMOCOUPLE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	771a      	strb	r2, [r3, #28]
	sensor->resolution = resolution;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80061fa:	779a      	strb	r2, [r3, #30]
	sensor->sample = sample;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006202:	77da      	strb	r2, [r3, #31]
	sensor->extract = MCP96RL00_EMX_1_extract;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a10      	ldr	r2, [pc, #64]	@ (8006248 <MCP96RL00_EMX_1_init+0x88>)
 8006208:	631a      	str	r2, [r3, #48]	@ 0x30
	sensor->process = MCP96RL00_EMX_1_process;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4a0f      	ldr	r2, [pc, #60]	@ (800624c <MCP96RL00_EMX_1_init+0x8c>)
 800620e:	635a      	str	r2, [r3, #52]	@ 0x34
	sensor->write = MCP96RL00_EMX_1_write;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a0f      	ldr	r2, [pc, #60]	@ (8006250 <MCP96RL00_EMX_1_init+0x90>)
 8006214:	639a      	str	r2, [r3, #56]	@ 0x38
	//read = bit0 = 1
	//write = bit0 = 1
	//address = external GPIO -> should not be set in software -> will change later

	//get the device ID first
	uint8_t data_thermo_conf = 0x00 << 4; 	//configure the thermocouple type (CHANGE THIS) does nothing
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
	uint8_t data_status_conf = COLD_JUNCTION_RES_LOW << 7 | RESOLUTION_HIGH << 5 | THERMO_SAMPLE_8 << 2 | 0x00; //sample is only in burst mode -> not implemented
 800621a:	23ac      	movs	r3, #172	@ 0xac
 800621c:	75bb      	strb	r3, [r7, #22]
//temporarily T type thermocouple!
	MCP96RL00_EMX_1_write(&sensor, address, data_thermo_conf, THERMOCOUPLE_SENSOR_CONFIG_REG);
 800621e:	7dfa      	ldrb	r2, [r7, #23]
 8006220:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8006224:	f107 000c 	add.w	r0, r7, #12
 8006228:	2305      	movs	r3, #5
 800622a:	f000 f8dd 	bl	80063e8 <MCP96RL00_EMX_1_write>
	MCP96RL00_EMX_1_write(&sensor, address, data_status_conf, DEVICE_CONFIGURATION_REG);
 800622e:	7dba      	ldrb	r2, [r7, #22]
 8006230:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8006234:	f107 000c 	add.w	r0, r7, #12
 8006238:	2306      	movs	r3, #6
 800623a:	f000 f8d5 	bl	80063e8 <MCP96RL00_EMX_1_write>


	//device config register

}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	08006255 	.word	0x08006255
 800624c:	080062a9 	.word	0x080062a9
 8006250:	080063e9 	.word	0x080063e9

08006254 <MCP96RL00_EMX_1_extract>:

void MCP96RL00_EMX_1_extract(MCP96RL00_EMX_1 *i2c, uint8_t address, volatile uint8_t *data)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	460b      	mov	r3, r1
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	72fb      	strb	r3, [r7, #11]
	//command is fixed -> no need to change this
	I2C_send(&i2c->base, address, HOT_JUNCTION_TEMP_REG);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4618      	mov	r0, r3
 8006266:	7afb      	ldrb	r3, [r7, #11]
 8006268:	2200      	movs	r2, #0
 800626a:	4619      	mov	r1, r3
 800626c:	f7fa fcea 	bl	8000c44 <I2C_send>
	I2C_MultiReceive(&i2c, *data, address, 2);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	4619      	mov	r1, r3
 8006278:	7afa      	ldrb	r2, [r7, #11]
 800627a:	f107 000c 	add.w	r0, r7, #12
 800627e:	2302      	movs	r3, #2
 8006280:	f7fa fde0 	bl	8000e44 <I2C_MultiReceive>

	i2c->data_raw[0] = &data[0]; //MSB
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	i2c->data_raw[1] = &data[1]; //LSB
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3301      	adds	r3, #1
 8006292:	461a      	mov	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	//each sensor will have its own struct like this

}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	0000      	movs	r0, r0
	...

080062a8 <MCP96RL00_EMX_1_process>:
void MCP96RL00_EMX_1_process(MCP96RL00_EMX_1 *i2c)
{
 80062a8:	b5b0      	push	{r4, r5, r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i<2; i++){
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]
 80062b4:	e033      	b.n	800631e <MCP96RL00_EMX_1_process+0x76>
	//a = 0.15
		i2c->data_processed[i] = 0.15*(i2c->data_processed[i]) + (1-0.15)*i2c->data_raw[i];
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fa fa11 	bl	80006e8 <__aeabi_i2d>
 80062c6:	a344      	add	r3, pc, #272	@ (adr r3, 80063d8 <MCP96RL00_EMX_1_process+0x130>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f7f9 ff90 	bl	80001f0 <__aeabi_dmul>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4614      	mov	r4, r2
 80062d6:	461d      	mov	r5, r3
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	4413      	add	r3, r2
 80062de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fa fa00 	bl	80006e8 <__aeabi_i2d>
 80062e8:	a33d      	add	r3, pc, #244	@ (adr r3, 80063e0 <MCP96RL00_EMX_1_process+0x138>)
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f7f9 ff7f 	bl	80001f0 <__aeabi_dmul>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7fa f8a9 	bl	8000450 <__adddf3>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	7bfc      	ldrb	r4, [r7, #15]
 8006304:	4610      	mov	r0, r2
 8006306:	4619      	mov	r1, r3
 8006308:	f7fa fae0 	bl	80008cc <__aeabi_d2uiz>
 800630c:	4603      	mov	r3, r0
 800630e:	b2da      	uxtb	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4423      	add	r3, r4
 8006314:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	for(uint8_t i = 0; i<2; i++){
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	3301      	adds	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d9c8      	bls.n	80062b6 <MCP96RL00_EMX_1_process+0xe>

	//y[n] = a*y[n-1] + (1-a)x[n];
	}
	//do temperature conversion
	//K type thermocouple -> temperature range is-> -200C to 1372C within a 0-5V range
	i2c->converted_bin[0] = (i2c->data_processed[0] << 8) | (i2c->data_processed[1]);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	b21a      	sxth	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006334:	b21b      	sxth	r3, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	b21b      	sxth	r3, r3
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	84da      	strh	r2, [r3, #38]	@ 0x26

	union{float temperature; uint16_t raw_bin[2]; int temperature_int;}Converter;
		for(uint8_t i = 0; i<2; i++)
 8006340:	2300      	movs	r3, #0
 8006342:	73bb      	strb	r3, [r7, #14]
 8006344:	e00f      	b.n	8006366 <MCP96RL00_EMX_1_process+0xbe>
		{
			Converter.raw_bin[i] = i2c->converted_bin[i];
 8006346:	7bbb      	ldrb	r3, [r7, #14]
 8006348:	7bba      	ldrb	r2, [r7, #14]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	3310      	adds	r3, #16
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	440b      	add	r3, r1
 8006352:	88d9      	ldrh	r1, [r3, #6]
 8006354:	0053      	lsls	r3, r2, #1
 8006356:	3310      	adds	r3, #16
 8006358:	443b      	add	r3, r7
 800635a:	460a      	mov	r2, r1
 800635c:	f823 2c08 	strh.w	r2, [r3, #-8]
		for(uint8_t i = 0; i<2; i++)
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	3301      	adds	r3, #1
 8006364:	73bb      	strb	r3, [r7, #14]
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d9ec      	bls.n	8006346 <MCP96RL00_EMX_1_process+0x9e>
		}
		if(Converter.temperature_int & 0x01<<31)//checking for sign
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	da17      	bge.n	80063a2 <MCP96RL00_EMX_1_process+0xfa>
		{
			Converter.temperature = (((Converter.temperature_int & 0xFF000000)*16) + ((Converter.temperature_int & 0x00FF0000)/16) - 4096);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006378:	011a      	lsls	r2, r3, #4
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006380:	2b00      	cmp	r3, #0
 8006382:	da00      	bge.n	8006386 <MCP96RL00_EMX_1_process+0xde>
 8006384:	330f      	adds	r3, #15
 8006386:	111b      	asrs	r3, r3, #4
 8006388:	4413      	add	r3, r2
 800638a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006396:	edc7 7a02 	vstr	s15, [r7, #8]
			i2c->temperature = Converter.temperature;
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	62da      	str	r2, [r3, #44]	@ 0x2c
		else{ //if sign is 0 -> temperature is positive below!
			Converter.temperature = ((Converter.temperature_int & 0xFF000000)*16) + ((Converter.temperature_int & 0x00FF0000)/16);
			i2c->temperature = Converter.temperature;
		}
	//too access temperature information post processing-> use struct element->temperature
}
 80063a0:	e014      	b.n	80063cc <MCP96RL00_EMX_1_process+0x124>
			Converter.temperature = ((Converter.temperature_int & 0xFF000000)*16) + ((Converter.temperature_int & 0x00FF0000)/16);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80063a8:	011a      	lsls	r2, r3, #4
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	da00      	bge.n	80063b6 <MCP96RL00_EMX_1_process+0x10e>
 80063b4:	330f      	adds	r3, #15
 80063b6:	111b      	asrs	r3, r3, #4
 80063b8:	4413      	add	r3, r2
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c2:	edc7 7a02 	vstr	s15, [r7, #8]
			i2c->temperature = Converter.temperature;
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bdb0      	pop	{r4, r5, r7, pc}
 80063d4:	f3af 8000 	nop.w
 80063d8:	33333333 	.word	0x33333333
 80063dc:	3fc33333 	.word	0x3fc33333
 80063e0:	33333333 	.word	0x33333333
 80063e4:	3feb3333 	.word	0x3feb3333

080063e8 <MCP96RL00_EMX_1_write>:
void MCP96RL00_EMX_1_write(MCP96RL00_EMX_1 *i2c, uint8_t address, uint8_t data, uint8_t command)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	4608      	mov	r0, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	461a      	mov	r2, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	70fb      	strb	r3, [r7, #3]
 80063fa:	460b      	mov	r3, r1
 80063fc:	70bb      	strb	r3, [r7, #2]
 80063fe:	4613      	mov	r3, r2
 8006400:	707b      	strb	r3, [r7, #1]
	uint8_t payload[3]; //address, MSB byte, LSB byte


	//payload[0] = address & 0xF0; //clearing bit0 to allow for write mode -> change this!
	//address is in automatically
	payload_first[0] = command; //pointer register
 8006402:	787b      	ldrb	r3, [r7, #1]
 8006404:	733b      	strb	r3, [r7, #12]
	payload_first[1] = data;
 8006406:	78bb      	ldrb	r3, [r7, #2]
 8006408:	737b      	strb	r3, [r7, #13]
	I2C_send(&i2c->base, payload_first[0], payload_first[1]); //Struct, Address byte, Pointer address,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7b39      	ldrb	r1, [r7, #12]
 800640e:	7b7a      	ldrb	r2, [r7, #13]
 8006410:	4618      	mov	r0, r3
 8006412:	f7fa fc17 	bl	8000c44 <I2C_send>
	I2C_sendBurst(&i2c->base, payload, 3-1, address);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	f107 0108 	add.w	r1, r7, #8
 800641e:	2202      	movs	r2, #2
 8006420:	f7fa fc62 	bl	8000ce8 <I2C_sendBurst>
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <ADT75ARMZ_init>:


void ADT75ARMZ_init(ADT75ARMZ *i2c, I2C_TypeDef *interface, GPIO_TypeDef *port, Type TEMPERATURE_SENSOR, uint8_t address)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	70fb      	strb	r3, [r7, #3]
	I2C_init(&i2c->base, interface, port, TEMPERATURE_SENSOR, address);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4618      	mov	r0, r3
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	4613      	mov	r3, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	f7fa fbd6 	bl	8000bfc <I2C_init>
	i2c->address = address;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006456:	775a      	strb	r2, [r3, #29]
	i2c->device = TEMPERATURE_SENSOR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	771a      	strb	r2, [r3, #28]
	i2c->extract = ADT75ARMZ_extract;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a10      	ldr	r2, [pc, #64]	@ (80064a4 <ADT75ARMZ_init+0x78>)
 8006462:	629a      	str	r2, [r3, #40]	@ 0x28
	i2c->process = ADT75ARMZ_process;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4a10      	ldr	r2, [pc, #64]	@ (80064a8 <ADT75ARMZ_init+0x7c>)
 8006468:	62da      	str	r2, [r3, #44]	@ 0x2c
	i2c->write = ADT75ARMZ_write;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4a0f      	ldr	r2, [pc, #60]	@ (80064ac <ADT75ARMZ_init+0x80>)
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
	//reading (R) = 0 at LSb, writing (W) = 1 at LSb
	address = (address<<1)|0x01; //bit shift left and bitwise or the result post bitshift
 8006470:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	b25b      	sxtb	r3, r3
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	b25b      	sxtb	r3, r3
 800647e:	f887 3020 	strb.w	r3, [r7, #32]

	uint8_t data[2];
	data[0] = 0x01; //configuration register pointer
 8006482:	2301      	movs	r3, #1
 8006484:	753b      	strb	r3, [r7, #20]
	data[1] = INTERRUPT_MODE_BIT | OS_ALERT_HIGH | TEMPERATURE_QUEUE_1 | NORMAL_MODE | DIS_SMBUS_ALERT;
 8006486:	2306      	movs	r3, #6
 8006488:	757b      	strb	r3, [r7, #21]

	I2C_sendBurst(&i2c, data, sizeof(data), address);
 800648a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800648e:	f107 0114 	add.w	r1, r7, #20
 8006492:	f107 000c 	add.w	r0, r7, #12
 8006496:	2202      	movs	r2, #2
 8006498:	f7fa fc26 	bl	8000ce8 <I2C_sendBurst>

}
 800649c:	bf00      	nop
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	080064b1 	.word	0x080064b1
 80064a8:	080064f1 	.word	0x080064f1
 80064ac:	080065d1 	.word	0x080065d1

080064b0 <ADT75ARMZ_extract>:
//@param data is a temporary variable -> doesn't have to be declared globally!
void ADT75ARMZ_extract(ADT75ARMZ *i2c, volatile uint8_t *data, uint8_t address)	//data is read in 2 byte chunks! (every transaction must include pointer register)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	71fb      	strb	r3, [r7, #7]
	address = address<<1; //6bit address fitting the entire byte to include the r/w command
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	71fb      	strb	r3, [r7, #7]

	 I2C_TempExtract(&i2c, data, address, 0x00);
 80064c4:	79fa      	ldrb	r2, [r7, #7]
 80064c6:	f107 000c 	add.w	r0, r7, #12
 80064ca:	2300      	movs	r3, #0
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	f7fa fd17 	bl	8000f00 <I2C_TempExtract>
	 i2c->data_raw[0] = &data[0];
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	b252      	sxtb	r2, r2
 80064d8:	779a      	strb	r2, [r3, #30]
	 i2c->data_raw[1] = &data[1];
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	3301      	adds	r3, #1
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	b252      	sxtb	r2, r2
 80064e4:	77da      	strb	r2, [r3, #31]
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <ADT75ARMZ_process>:

void ADT75ARMZ_process(ADT75ARMZ *i2c)
{
 80064f0:	b5b0      	push	{r4, r5, r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<2;i++){
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e035      	b.n	800656a <ADT75ARMZ_process+0x7a>

	i2c->data_processed[i] = 0.10*i2c->data_processed[i] + (1-0.1)*i2c->data_raw[i];
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	3320      	adds	r3, #32
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f7fa f8ed 	bl	80006e8 <__aeabi_i2d>
 800650e:	a32c      	add	r3, pc, #176	@ (adr r3, 80065c0 <ADT75ARMZ_process+0xd0>)
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f7f9 fe6c 	bl	80001f0 <__aeabi_dmul>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	331e      	adds	r3, #30
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	b25b      	sxtb	r3, r3
 800652c:	4618      	mov	r0, r3
 800652e:	f7fa f8db 	bl	80006e8 <__aeabi_i2d>
 8006532:	a325      	add	r3, pc, #148	@ (adr r3, 80065c8 <ADT75ARMZ_process+0xd8>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f7f9 fe5a 	bl	80001f0 <__aeabi_dmul>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4620      	mov	r0, r4
 8006542:	4629      	mov	r1, r5
 8006544:	f7f9 ff84 	bl	8000450 <__adddf3>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4610      	mov	r0, r2
 800654e:	4619      	mov	r1, r3
 8006550:	f7fa f9bc 	bl	80008cc <__aeabi_d2uiz>
 8006554:	4603      	mov	r3, r0
 8006556:	b2d9      	uxtb	r1, r3
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	3320      	adds	r3, #32
 8006560:	460a      	mov	r2, r1
 8006562:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<2;i++){
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b01      	cmp	r3, #1
 800656e:	ddc6      	ble.n	80064fe <ADT75ARMZ_process+0xe>
		//y[n] = a*y[n-1] + (1-a)x[n];
			//a = 0.1
	}
		union{float temperature;  int data_int;}Converter;
			Converter.data_int = i2c->data_processed[0]<<24 | i2c->data_processed[1]<<16;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006576:	061a      	lsls	r2, r3, #24
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800657e:	041b      	lsls	r3, r3, #16
 8006580:	4313      	orrs	r3, r2
 8006582:	60bb      	str	r3, [r7, #8]
		if(Converter.data_int & 0x01<<31){//sign checking
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	da0c      	bge.n	80065a4 <ADT75ARMZ_process+0xb4>
			Converter.temperature = (((Converter.data_int & 0xFFF00000)-4096)/16);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	0d1b      	lsrs	r3, r3, #20
 800658e:	051b      	lsls	r3, r3, #20
 8006590:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	edc7 7a02 	vstr	s15, [r7, #8]
		}
		else{
			Converter.temperature = ((Converter.data_int & 0xFFF00000)/16);
			//for positive temperatures
		}
}
 80065a2:	e009      	b.n	80065b8 <ADT75ARMZ_process+0xc8>
			Converter.temperature = ((Converter.data_int & 0xFFF00000)/16);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	0d1b      	lsrs	r3, r3, #20
 80065a8:	051b      	lsls	r3, r3, #20
 80065aa:	091b      	lsrs	r3, r3, #4
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b4:	edc7 7a02 	vstr	s15, [r7, #8]
}
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bdb0      	pop	{r4, r5, r7, pc}
 80065c0:	9999999a 	.word	0x9999999a
 80065c4:	3fb99999 	.word	0x3fb99999
 80065c8:	cccccccd 	.word	0xcccccccd
 80065cc:	3feccccc 	.word	0x3feccccc

080065d0 <ADT75ARMZ_write>:
void ADT75ARMZ_write(ADT75ARMZ *i2c, uint8_t data, uint8_t address, uint8_t pointer_address)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	4608      	mov	r0, r1
 80065da:	4611      	mov	r1, r2
 80065dc:	461a      	mov	r2, r3
 80065de:	4603      	mov	r3, r0
 80065e0:	70fb      	strb	r3, [r7, #3]
 80065e2:	460b      	mov	r3, r1
 80065e4:	70bb      	strb	r3, [r7, #2]
 80065e6:	4613      	mov	r3, r2
 80065e8:	707b      	strb	r3, [r7, #1]
	address = (address<<1)|0x01; //bit shift left and bitwise or the result post bitshift
 80065ea:	78bb      	ldrb	r3, [r7, #2]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	b25b      	sxtb	r3, r3
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	b25b      	sxtb	r3, r3
 80065f6:	70bb      	strb	r3, [r7, #2]
	uint8_t payload[2];

		payload[0] = pointer_address;
 80065f8:	787b      	ldrb	r3, [r7, #1]
 80065fa:	733b      	strb	r3, [r7, #12]
		payload[1] = data;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	737b      	strb	r3, [r7, #13]

	I2C_sendBurst(&i2c, data, sizeof(data), address);
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	4619      	mov	r1, r3
 8006604:	78bb      	ldrb	r3, [r7, #2]
 8006606:	1d38      	adds	r0, r7, #4
 8006608:	2201      	movs	r2, #1
 800660a:	f7fa fb6d 	bl	8000ce8 <I2C_sendBurst>
}
 800660e:	bf00      	nop
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <delay_software_us>:

void delay_software_us( uint32_t usec )
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
    // To avoid delaying for less than usec, always round up.;
		uint32_t i = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (usec * 21); i++);
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e002      	b.n	800662e <delay_software_us+0x18>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	00da      	lsls	r2, r3, #3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	429a      	cmp	r2, r3
 800663e:	d3f3      	bcc.n	8006628 <delay_software_us+0x12>

}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <delay_software_ms>:

void delay_software_ms( uint32_t msec )
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
    // To avoid delaying for less than usec, always round up.;
		uint32_t i = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (msec * 21000); i++);
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	e002      	b.n	8006666 <delay_software_ms+0x18>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f245 2208 	movw	r2, #21000	@ 0x5208
 800666c:	fb02 f303 	mul.w	r3, r2, r3
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	429a      	cmp	r2, r3
 8006674:	d3f4      	bcc.n	8006660 <delay_software_ms+0x12>

}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <SPI_init>:
 * @param *port 			Pointer to GPIO port struct.
 * @param cs 					Device chip select address.
 * @return @c NULL.
 **
 * =============================================================================== */
void SPI_init(SPI *spi, DeviceType device, SPI_TypeDef *interface, DataFormat df, GPIO_TypeDef *port, unsigned long cs) {
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	461a      	mov	r2, r3
 8006690:	460b      	mov	r3, r1
 8006692:	72fb      	strb	r3, [r7, #11]
 8006694:	4613      	mov	r3, r2
 8006696:	72bb      	strb	r3, [r7, #10]
  spi->device    = device;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	7afa      	ldrb	r2, [r7, #11]
 800669c:	701a      	strb	r2, [r3, #0]
  spi->interface = interface;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	605a      	str	r2, [r3, #4]
  spi->port      = port;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	609a      	str	r2, [r3, #8]
  spi->cs        = cs;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	60da      	str	r2, [r3, #12]

  spi->send      = (df == MODE8) ? SPI_send8 : SPI_send16;
 80066b0:	7abb      	ldrb	r3, [r7, #10]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <SPI_init+0x36>
 80066b6:	4a0b      	ldr	r2, [pc, #44]	@ (80066e4 <SPI_init+0x60>)
 80066b8:	e000      	b.n	80066bc <SPI_init+0x38>
 80066ba:	4a0b      	ldr	r2, [pc, #44]	@ (80066e8 <SPI_init+0x64>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	611a      	str	r2, [r3, #16]
  spi->receive   = (df == MODE8) ? SPI_receive8 : SPI_receive16; //if Data format is MODE8
 80066c0:	7abb      	ldrb	r3, [r7, #10]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <SPI_init+0x46>
 80066c6:	4a09      	ldr	r2, [pc, #36]	@ (80066ec <SPI_init+0x68>)
 80066c8:	e000      	b.n	80066cc <SPI_init+0x48>
 80066ca:	4a09      	ldr	r2, [pc, #36]	@ (80066f0 <SPI_init+0x6c>)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	615a      	str	r2, [r3, #20]
  spi->transmit  = SPI_transmit;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a08      	ldr	r2, [pc, #32]	@ (80066f4 <SPI_init+0x70>)
 80066d4:	619a      	str	r2, [r3, #24]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	0800673b 	.word	0x0800673b
 80066e8:	0800676d 	.word	0x0800676d
 80066ec:	0800679d 	.word	0x0800679d
 80066f0:	080067d1 	.word	0x080067d1
 80066f4:	080066f9 	.word	0x080066f9

080066f8 <SPI_transmit>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param 	data 			Data payload to be sent to slave device.
 * @retval 	response 	Returns the slave device response from the transaction.
 **
 * =============================================================================== */
uint16_t SPI_transmit(SPI *spi, uint16_t data) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	807b      	strh	r3, [r7, #2]
  volatile uint16_t response;
  spi->send(spi, data);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	887a      	ldrh	r2, [r7, #2]
 800670a:	4611      	mov	r1, r2
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
  spi->receive(spi, &response);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	f107 020e 	add.w	r2, r7, #14
 8006718:	4611      	mov	r1, r2
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
  while (spi->interface->SR & SPI_SR_BSY);
 800671e:	bf00      	nop
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f8      	bne.n	8006720 <SPI_transmit+0x28>
  return response;
 800672e:	89fb      	ldrh	r3, [r7, #14]
 8006730:	b29b      	uxth	r3, r3
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <SPI_send8>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param   data      The data to send.
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_send8(SPI *spi, uint16_t data) {
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8006746:	bf00      	nop
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f8      	beq.n	8006748 <SPI_send8+0xe>
  spi->interface->DR = (uint8_t)data;
 8006756:	887b      	ldrh	r3, [r7, #2]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60da      	str	r2, [r3, #12]
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <SPI_send16>:

static void SPI_send16(SPI *spi, uint16_t data) {
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8006778:	bf00      	nop
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f8      	beq.n	800677a <SPI_send16+0xe>
  spi->interface->DR = data;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	887a      	ldrh	r2, [r7, #2]
 800678e:	60da      	str	r2, [r3, #12]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <SPI_receive8>:
 * @param 	*spi 			Pointer to SPI struct.
 * @param   data      Pointer to variable to receive data into.
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive8(SPI *spi, volatile uint16_t *data) {
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 80067a6:	bf00      	nop
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f8      	beq.n	80067a8 <SPI_receive8+0xc>
  *data = (uint8_t) spi->interface->DR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	801a      	strh	r2, [r3, #0]
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <SPI_receive16>:

static void SPI_receive16(SPI *spi, volatile uint16_t *data) {
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 80067da:	bf00      	nop
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f8      	beq.n	80067dc <SPI_receive16+0xc>
  *data = spi->interface->DR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	801a      	strh	r2, [r3, #0]
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
 800680e:	4b10      	ldr	r3, [pc, #64]	@ (8006850 <HAL_MspInit+0x4c>)
 8006810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006812:	4a0f      	ldr	r2, [pc, #60]	@ (8006850 <HAL_MspInit+0x4c>)
 8006814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006818:	6453      	str	r3, [r2, #68]	@ 0x44
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <HAL_MspInit+0x4c>)
 800681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	603b      	str	r3, [r7, #0]
 800682a:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <HAL_MspInit+0x4c>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	4a08      	ldr	r2, [pc, #32]	@ (8006850 <HAL_MspInit+0x4c>)
 8006830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006834:	6413      	str	r3, [r2, #64]	@ 0x40
 8006836:	4b06      	ldr	r3, [pc, #24]	@ (8006850 <HAL_MspInit+0x4c>)
 8006838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40023800 	.word	0x40023800

08006854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <NMI_Handler+0x4>

0800685c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006860:	bf00      	nop
 8006862:	e7fd      	b.n	8006860 <HardFault_Handler+0x4>

08006864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006868:	bf00      	nop
 800686a:	e7fd      	b.n	8006868 <MemManage_Handler+0x4>

0800686c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <BusFault_Handler+0x4>

08006874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <UsageFault_Handler+0x4>

0800687c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006880:	bf00      	nop
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800688a:	b480      	push	{r7}
 800688c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800688e:	bf00      	nop
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800689c:	bf00      	nop
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068aa:	f000 f891 	bl	80069d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068ae:	bf00      	nop
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068b8:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <SystemInit+0x20>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068be:	4a05      	ldr	r2, [pc, #20]	@ (80068d4 <SystemInit+0x20>)
 80068c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	e000ed00 	.word	0xe000ed00

080068d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80068d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006910 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80068dc:	f7ff ffea 	bl	80068b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80068e0:	480c      	ldr	r0, [pc, #48]	@ (8006914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80068e2:	490d      	ldr	r1, [pc, #52]	@ (8006918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068e4:	4a0d      	ldr	r2, [pc, #52]	@ (800691c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068e8:	e002      	b.n	80068f0 <LoopCopyDataInit>

080068ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068ee:	3304      	adds	r3, #4

080068f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068f4:	d3f9      	bcc.n	80068ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80068f8:	4c0a      	ldr	r4, [pc, #40]	@ (8006924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80068fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068fc:	e001      	b.n	8006902 <LoopFillZerobss>

080068fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006900:	3204      	adds	r2, #4

08006902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006904:	d3fb      	bcc.n	80068fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006906:	f000 fde5 	bl	80074d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800690a:	f7fe f865 	bl	80049d8 <main>
  bx  lr    
 800690e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006910:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006918:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800691c:	08007560 	.word	0x08007560
  ldr r2, =_sbss
 8006920:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8006924:	20000520 	.word	0x20000520

08006928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006928:	e7fe      	b.n	8006928 <ADC_IRQHandler>
	...

0800692c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006930:	4b0e      	ldr	r3, [pc, #56]	@ (800696c <HAL_Init+0x40>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a0d      	ldr	r2, [pc, #52]	@ (800696c <HAL_Init+0x40>)
 8006936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800693a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800693c:	4b0b      	ldr	r3, [pc, #44]	@ (800696c <HAL_Init+0x40>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0a      	ldr	r2, [pc, #40]	@ (800696c <HAL_Init+0x40>)
 8006942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006948:	4b08      	ldr	r3, [pc, #32]	@ (800696c <HAL_Init+0x40>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a07      	ldr	r2, [pc, #28]	@ (800696c <HAL_Init+0x40>)
 800694e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006954:	2003      	movs	r0, #3
 8006956:	f000 f90d 	bl	8006b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800695a:	200f      	movs	r0, #15
 800695c:	f000 f808 	bl	8006970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006960:	f7ff ff50 	bl	8006804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40023c00 	.word	0x40023c00

08006970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006978:	4b12      	ldr	r3, [pc, #72]	@ (80069c4 <HAL_InitTick+0x54>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b12      	ldr	r3, [pc, #72]	@ (80069c8 <HAL_InitTick+0x58>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	4619      	mov	r1, r3
 8006982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006986:	fbb3 f3f1 	udiv	r3, r3, r1
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f917 	bl	8006bc2 <HAL_SYSTICK_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e00e      	b.n	80069bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b0f      	cmp	r3, #15
 80069a2:	d80a      	bhi.n	80069ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069a4:	2200      	movs	r2, #0
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	f000 f8ed 	bl	8006b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069b0:	4a06      	ldr	r2, [pc, #24]	@ (80069cc <HAL_InitTick+0x5c>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	e000      	b.n	80069bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000000 	.word	0x20000000
 80069c8:	20000008 	.word	0x20000008
 80069cc:	20000004 	.word	0x20000004

080069d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069d4:	4b06      	ldr	r3, [pc, #24]	@ (80069f0 <HAL_IncTick+0x20>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <HAL_IncTick+0x24>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4413      	add	r3, r2
 80069e0:	4a04      	ldr	r2, [pc, #16]	@ (80069f4 <HAL_IncTick+0x24>)
 80069e2:	6013      	str	r3, [r2, #0]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000008 	.word	0x20000008
 80069f4:	2000051c 	.word	0x2000051c

080069f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  return uwTick;
 80069fc:	4b03      	ldr	r3, [pc, #12]	@ (8006a0c <HAL_GetTick+0x14>)
 80069fe:	681b      	ldr	r3, [r3, #0]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	2000051c 	.word	0x2000051c

08006a10 <__NVIC_SetPriorityGrouping>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a20:	4b0c      	ldr	r3, [pc, #48]	@ (8006a54 <__NVIC_SetPriorityGrouping+0x44>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a42:	4a04      	ldr	r2, [pc, #16]	@ (8006a54 <__NVIC_SetPriorityGrouping+0x44>)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	60d3      	str	r3, [r2, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	e000ed00 	.word	0xe000ed00

08006a58 <__NVIC_GetPriorityGrouping>:
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a5c:	4b04      	ldr	r3, [pc, #16]	@ (8006a70 <__NVIC_GetPriorityGrouping+0x18>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	f003 0307 	and.w	r3, r3, #7
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <__NVIC_SetPriority>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	db0a      	blt.n	8006a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	490c      	ldr	r1, [pc, #48]	@ (8006ac0 <__NVIC_SetPriority+0x4c>)
 8006a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a92:	0112      	lsls	r2, r2, #4
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	440b      	add	r3, r1
 8006a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a9c:	e00a      	b.n	8006ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	4908      	ldr	r1, [pc, #32]	@ (8006ac4 <__NVIC_SetPriority+0x50>)
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	3b04      	subs	r3, #4
 8006aac:	0112      	lsls	r2, r2, #4
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	761a      	strb	r2, [r3, #24]
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	e000e100 	.word	0xe000e100
 8006ac4:	e000ed00 	.word	0xe000ed00

08006ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b089      	sub	sp, #36	@ 0x24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f1c3 0307 	rsb	r3, r3, #7
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	bf28      	it	cs
 8006ae6:	2304      	movcs	r3, #4
 8006ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	3304      	adds	r3, #4
 8006aee:	2b06      	cmp	r3, #6
 8006af0:	d902      	bls.n	8006af8 <NVIC_EncodePriority+0x30>
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3b03      	subs	r3, #3
 8006af6:	e000      	b.n	8006afa <NVIC_EncodePriority+0x32>
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006afc:	f04f 32ff 	mov.w	r2, #4294967295
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	43da      	mvns	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	401a      	ands	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b10:	f04f 31ff 	mov.w	r1, #4294967295
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	43d9      	mvns	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b20:	4313      	orrs	r3, r2
         );
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3724      	adds	r7, #36	@ 0x24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
	...

08006b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b40:	d301      	bcc.n	8006b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b42:	2301      	movs	r3, #1
 8006b44:	e00f      	b.n	8006b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b46:	4a0a      	ldr	r2, [pc, #40]	@ (8006b70 <SysTick_Config+0x40>)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b4e:	210f      	movs	r1, #15
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	f7ff ff8e 	bl	8006a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b58:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <SysTick_Config+0x40>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b5e:	4b04      	ldr	r3, [pc, #16]	@ (8006b70 <SysTick_Config+0x40>)
 8006b60:	2207      	movs	r2, #7
 8006b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	e000e010 	.word	0xe000e010

08006b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ff47 	bl	8006a10 <__NVIC_SetPriorityGrouping>
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	4603      	mov	r3, r0
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b9c:	f7ff ff5c 	bl	8006a58 <__NVIC_GetPriorityGrouping>
 8006ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	6978      	ldr	r0, [r7, #20]
 8006ba8:	f7ff ff8e 	bl	8006ac8 <NVIC_EncodePriority>
 8006bac:	4602      	mov	r2, r0
 8006bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff ff5d 	bl	8006a74 <__NVIC_SetPriority>
}
 8006bba:	bf00      	nop
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff ffb0 	bl	8006b30 <SysTick_Config>
 8006bd0:	4603      	mov	r3, r0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	2300      	movs	r3, #0
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	4b20      	ldr	r3, [pc, #128]	@ (8006c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	4a1f      	ldr	r2, [pc, #124]	@ (8006c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c6c <HAL_PWREx_EnableOverDrive+0x90>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006c02:	4b1b      	ldr	r3, [pc, #108]	@ (8006c70 <HAL_PWREx_EnableOverDrive+0x94>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c08:	f7ff fef6 	bl	80069f8 <HAL_GetTick>
 8006c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c0e:	e009      	b.n	8006c24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c10:	f7ff fef2 	bl	80069f8 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c1e:	d901      	bls.n	8006c24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e01f      	b.n	8006c64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c24:	4b13      	ldr	r3, [pc, #76]	@ (8006c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c30:	d1ee      	bne.n	8006c10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006c32:	4b11      	ldr	r3, [pc, #68]	@ (8006c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c38:	f7ff fede 	bl	80069f8 <HAL_GetTick>
 8006c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c3e:	e009      	b.n	8006c54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c40:	f7ff feda 	bl	80069f8 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c4e:	d901      	bls.n	8006c54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e007      	b.n	8006c64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c54:	4b07      	ldr	r3, [pc, #28]	@ (8006c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c60:	d1ee      	bne.n	8006c40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	420e0040 	.word	0x420e0040
 8006c74:	40007000 	.word	0x40007000
 8006c78:	420e0044 	.word	0x420e0044

08006c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e267      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d075      	beq.n	8006d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006c9a:	4b88      	ldr	r3, [pc, #544]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d00c      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ca6:	4b85      	ldr	r3, [pc, #532]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d112      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cb2:	4b82      	ldr	r3, [pc, #520]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d05b      	beq.n	8006d84 <HAL_RCC_OscConfig+0x108>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d157      	bne.n	8006d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e242      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce0:	d106      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x74>
 8006ce2:	4b76      	ldr	r3, [pc, #472]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a75      	ldr	r2, [pc, #468]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e01d      	b.n	8006d2c <HAL_RCC_OscConfig+0xb0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x98>
 8006cfa:	4b70      	ldr	r3, [pc, #448]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a6f      	ldr	r2, [pc, #444]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4b6d      	ldr	r3, [pc, #436]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6c      	ldr	r2, [pc, #432]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e00b      	b.n	8006d2c <HAL_RCC_OscConfig+0xb0>
 8006d14:	4b69      	ldr	r3, [pc, #420]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a68      	ldr	r2, [pc, #416]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	4b66      	ldr	r3, [pc, #408]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a65      	ldr	r2, [pc, #404]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d013      	beq.n	8006d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d34:	f7ff fe60 	bl	80069f8 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d3c:	f7ff fe5c 	bl	80069f8 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b64      	cmp	r3, #100	@ 0x64
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e207      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0xc0>
 8006d5a:	e014      	b.n	8006d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7ff fe4c 	bl	80069f8 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d64:	f7ff fe48 	bl	80069f8 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b64      	cmp	r3, #100	@ 0x64
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e1f3      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d76:	4b51      	ldr	r3, [pc, #324]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0xe8>
 8006d82:	e000      	b.n	8006d86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d063      	beq.n	8006e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006d92:	4b4a      	ldr	r3, [pc, #296]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 030c 	and.w	r3, r3, #12
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d9e:	4b47      	ldr	r3, [pc, #284]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d11c      	bne.n	8006de4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006daa:	4b44      	ldr	r3, [pc, #272]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d116      	bne.n	8006de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006db6:	4b41      	ldr	r3, [pc, #260]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <HAL_RCC_OscConfig+0x152>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d001      	beq.n	8006dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e1c7      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dce:	4b3b      	ldr	r3, [pc, #236]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	4937      	ldr	r1, [pc, #220]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006de2:	e03a      	b.n	8006e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d020      	beq.n	8006e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dec:	4b34      	ldr	r3, [pc, #208]	@ (8006ec0 <HAL_RCC_OscConfig+0x244>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df2:	f7ff fe01 	bl	80069f8 <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dfa:	f7ff fdfd 	bl	80069f8 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e1a8      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0f0      	beq.n	8006dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e18:	4b28      	ldr	r3, [pc, #160]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	4925      	ldr	r1, [pc, #148]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]
 8006e2c:	e015      	b.n	8006e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ec0 <HAL_RCC_OscConfig+0x244>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7ff fde0 	bl	80069f8 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e3c:	f7ff fddc 	bl	80069f8 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e187      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f0      	bne.n	8006e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d036      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ec4 <HAL_RCC_OscConfig+0x248>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e74:	f7ff fdc0 	bl	80069f8 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e7c:	f7ff fdbc 	bl	80069f8 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e167      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <HAL_RCC_OscConfig+0x240>)
 8006e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0x200>
 8006e9a:	e01b      	b.n	8006ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e9c:	4b09      	ldr	r3, [pc, #36]	@ (8006ec4 <HAL_RCC_OscConfig+0x248>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea2:	f7ff fda9 	bl	80069f8 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ea8:	e00e      	b.n	8006ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eaa:	f7ff fda5 	bl	80069f8 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d907      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e150      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	42470000 	.word	0x42470000
 8006ec4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec8:	4b88      	ldr	r3, [pc, #544]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1ea      	bne.n	8006eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8097 	beq.w	8007010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee6:	4b81      	ldr	r3, [pc, #516]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10f      	bne.n	8006f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	4b7d      	ldr	r3, [pc, #500]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	4a7c      	ldr	r2, [pc, #496]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f02:	4b7a      	ldr	r3, [pc, #488]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f0a:	60bb      	str	r3, [r7, #8]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f12:	4b77      	ldr	r3, [pc, #476]	@ (80070f0 <HAL_RCC_OscConfig+0x474>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d118      	bne.n	8006f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f1e:	4b74      	ldr	r3, [pc, #464]	@ (80070f0 <HAL_RCC_OscConfig+0x474>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a73      	ldr	r2, [pc, #460]	@ (80070f0 <HAL_RCC_OscConfig+0x474>)
 8006f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f2a:	f7ff fd65 	bl	80069f8 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f32:	f7ff fd61 	bl	80069f8 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e10c      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f44:	4b6a      	ldr	r3, [pc, #424]	@ (80070f0 <HAL_RCC_OscConfig+0x474>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d106      	bne.n	8006f66 <HAL_RCC_OscConfig+0x2ea>
 8006f58:	4b64      	ldr	r3, [pc, #400]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5c:	4a63      	ldr	r2, [pc, #396]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f64:	e01c      	b.n	8006fa0 <HAL_RCC_OscConfig+0x324>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b05      	cmp	r3, #5
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCC_OscConfig+0x30c>
 8006f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f72:	4a5e      	ldr	r2, [pc, #376]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f74:	f043 0304 	orr.w	r3, r3, #4
 8006f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f80:	f043 0301 	orr.w	r3, r3, #1
 8006f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f86:	e00b      	b.n	8006fa0 <HAL_RCC_OscConfig+0x324>
 8006f88:	4b58      	ldr	r3, [pc, #352]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f8c:	4a57      	ldr	r2, [pc, #348]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f94:	4b55      	ldr	r3, [pc, #340]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f98:	4a54      	ldr	r2, [pc, #336]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006f9a:	f023 0304 	bic.w	r3, r3, #4
 8006f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d015      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa8:	f7ff fd26 	bl	80069f8 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fae:	e00a      	b.n	8006fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fb0:	f7ff fd22 	bl	80069f8 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e0cb      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc6:	4b49      	ldr	r3, [pc, #292]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0ee      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x334>
 8006fd2:	e014      	b.n	8006ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fd4:	f7ff fd10 	bl	80069f8 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fda:	e00a      	b.n	8006ff2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fdc:	f7ff fd0c 	bl	80069f8 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d901      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e0b5      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1ee      	bne.n	8006fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d105      	bne.n	8007010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007004:	4b39      	ldr	r3, [pc, #228]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8007006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007008:	4a38      	ldr	r2, [pc, #224]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 800700a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800700e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80a1 	beq.w	800715c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800701a:	4b34      	ldr	r3, [pc, #208]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	2b08      	cmp	r3, #8
 8007024:	d05c      	beq.n	80070e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d141      	bne.n	80070b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800702e:	4b31      	ldr	r3, [pc, #196]	@ (80070f4 <HAL_RCC_OscConfig+0x478>)
 8007030:	2200      	movs	r2, #0
 8007032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007034:	f7ff fce0 	bl	80069f8 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800703c:	f7ff fcdc 	bl	80069f8 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e087      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800704e:	4b27      	ldr	r3, [pc, #156]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f0      	bne.n	800703c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69da      	ldr	r2, [r3, #28]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	3b01      	subs	r3, #1
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	491b      	ldr	r1, [pc, #108]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 8007080:	4313      	orrs	r3, r2
 8007082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007084:	4b1b      	ldr	r3, [pc, #108]	@ (80070f4 <HAL_RCC_OscConfig+0x478>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800708a:	f7ff fcb5 	bl	80069f8 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007092:	f7ff fcb1 	bl	80069f8 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e05c      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070a4:	4b11      	ldr	r3, [pc, #68]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0f0      	beq.n	8007092 <HAL_RCC_OscConfig+0x416>
 80070b0:	e054      	b.n	800715c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b2:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <HAL_RCC_OscConfig+0x478>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b8:	f7ff fc9e 	bl	80069f8 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c0:	f7ff fc9a 	bl	80069f8 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e045      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d2:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <HAL_RCC_OscConfig+0x470>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x444>
 80070de:	e03d      	b.n	800715c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d107      	bne.n	80070f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e038      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
 80070ec:	40023800 	.word	0x40023800
 80070f0:	40007000 	.word	0x40007000
 80070f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007168 <HAL_RCC_OscConfig+0x4ec>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d028      	beq.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d121      	bne.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800711e:	429a      	cmp	r2, r3
 8007120:	d11a      	bne.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007128:	4013      	ands	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800712e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007130:	4293      	cmp	r3, r2
 8007132:	d111      	bne.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	085b      	lsrs	r3, r3, #1
 8007140:	3b01      	subs	r3, #1
 8007142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007144:	429a      	cmp	r2, r3
 8007146:	d107      	bne.n	8007158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007154:	429a      	cmp	r2, r3
 8007156:	d001      	beq.n	800715c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40023800 	.word	0x40023800

0800716c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e0cc      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007180:	4b68      	ldr	r3, [pc, #416]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d90c      	bls.n	80071a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718e:	4b65      	ldr	r3, [pc, #404]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	b2d2      	uxtb	r2, r2
 8007194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007196:	4b63      	ldr	r3, [pc, #396]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d001      	beq.n	80071a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e0b8      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d020      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071c0:	4b59      	ldr	r3, [pc, #356]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	4a58      	ldr	r2, [pc, #352]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80071ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071d8:	4b53      	ldr	r3, [pc, #332]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	4a52      	ldr	r2, [pc, #328]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80071e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071e4:	4b50      	ldr	r3, [pc, #320]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	494d      	ldr	r1, [pc, #308]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d044      	beq.n	800728c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d107      	bne.n	800721a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800720a:	4b47      	ldr	r3, [pc, #284]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d119      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e07f      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d003      	beq.n	800722a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007226:	2b03      	cmp	r3, #3
 8007228:	d107      	bne.n	800723a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722a:	4b3f      	ldr	r3, [pc, #252]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e06f      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723a:	4b3b      	ldr	r3, [pc, #236]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e067      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800724a:	4b37      	ldr	r3, [pc, #220]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f023 0203 	bic.w	r2, r3, #3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	4934      	ldr	r1, [pc, #208]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 8007258:	4313      	orrs	r3, r2
 800725a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800725c:	f7ff fbcc 	bl	80069f8 <HAL_GetTick>
 8007260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007262:	e00a      	b.n	800727a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007264:	f7ff fbc8 	bl	80069f8 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e04f      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727a:	4b2b      	ldr	r3, [pc, #172]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 020c 	and.w	r2, r3, #12
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	429a      	cmp	r2, r3
 800728a:	d1eb      	bne.n	8007264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800728c:	4b25      	ldr	r3, [pc, #148]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d20c      	bcs.n	80072b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b22      	ldr	r3, [pc, #136]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a2:	4b20      	ldr	r3, [pc, #128]	@ (8007324 <HAL_RCC_ClockConfig+0x1b8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d001      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e032      	b.n	800731a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072c0:	4b19      	ldr	r3, [pc, #100]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4916      	ldr	r1, [pc, #88]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072de:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	490e      	ldr	r1, [pc, #56]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072f2:	f000 f821 	bl	8007338 <HAL_RCC_GetSysClockFreq>
 80072f6:	4602      	mov	r2, r0
 80072f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <HAL_RCC_ClockConfig+0x1bc>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	091b      	lsrs	r3, r3, #4
 80072fe:	f003 030f 	and.w	r3, r3, #15
 8007302:	490a      	ldr	r1, [pc, #40]	@ (800732c <HAL_RCC_ClockConfig+0x1c0>)
 8007304:	5ccb      	ldrb	r3, [r1, r3]
 8007306:	fa22 f303 	lsr.w	r3, r2, r3
 800730a:	4a09      	ldr	r2, [pc, #36]	@ (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 800730c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800730e:	4b09      	ldr	r3, [pc, #36]	@ (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f7ff fb2c 	bl	8006970 <HAL_InitTick>

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	40023c00 	.word	0x40023c00
 8007328:	40023800 	.word	0x40023800
 800732c:	08007540 	.word	0x08007540
 8007330:	20000000 	.word	0x20000000
 8007334:	20000004 	.word	0x20000004

08007338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800733c:	b090      	sub	sp, #64	@ 0x40
 800733e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007350:	4b59      	ldr	r3, [pc, #356]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 030c 	and.w	r3, r3, #12
 8007358:	2b08      	cmp	r3, #8
 800735a:	d00d      	beq.n	8007378 <HAL_RCC_GetSysClockFreq+0x40>
 800735c:	2b08      	cmp	r3, #8
 800735e:	f200 80a1 	bhi.w	80074a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <HAL_RCC_GetSysClockFreq+0x34>
 8007366:	2b04      	cmp	r3, #4
 8007368:	d003      	beq.n	8007372 <HAL_RCC_GetSysClockFreq+0x3a>
 800736a:	e09b      	b.n	80074a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800736c:	4b53      	ldr	r3, [pc, #332]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x184>)
 800736e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007370:	e09b      	b.n	80074aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007372:	4b53      	ldr	r3, [pc, #332]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007374:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007376:	e098      	b.n	80074aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007378:	4b4f      	ldr	r3, [pc, #316]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007380:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007382:	4b4d      	ldr	r3, [pc, #308]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d028      	beq.n	80073e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800738e:	4b4a      	ldr	r3, [pc, #296]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	099b      	lsrs	r3, r3, #6
 8007394:	2200      	movs	r2, #0
 8007396:	623b      	str	r3, [r7, #32]
 8007398:	627a      	str	r2, [r7, #36]	@ 0x24
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80073a0:	2100      	movs	r1, #0
 80073a2:	4b47      	ldr	r3, [pc, #284]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80073a4:	fb03 f201 	mul.w	r2, r3, r1
 80073a8:	2300      	movs	r3, #0
 80073aa:	fb00 f303 	mul.w	r3, r0, r3
 80073ae:	4413      	add	r3, r2
 80073b0:	4a43      	ldr	r2, [pc, #268]	@ (80074c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80073b2:	fba0 1202 	umull	r1, r2, r0, r2
 80073b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073b8:	460a      	mov	r2, r1
 80073ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80073bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073be:	4413      	add	r3, r2
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c4:	2200      	movs	r2, #0
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	61fa      	str	r2, [r7, #28]
 80073ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80073d2:	f7f9 fa9b 	bl	800090c <__aeabi_uldivmod>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4613      	mov	r3, r2
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073de:	e053      	b.n	8007488 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073e0:	4b35      	ldr	r3, [pc, #212]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	099b      	lsrs	r3, r3, #6
 80073e6:	2200      	movs	r2, #0
 80073e8:	613b      	str	r3, [r7, #16]
 80073ea:	617a      	str	r2, [r7, #20]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80073f2:	f04f 0b00 	mov.w	fp, #0
 80073f6:	4652      	mov	r2, sl
 80073f8:	465b      	mov	r3, fp
 80073fa:	f04f 0000 	mov.w	r0, #0
 80073fe:	f04f 0100 	mov.w	r1, #0
 8007402:	0159      	lsls	r1, r3, #5
 8007404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007408:	0150      	lsls	r0, r2, #5
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	ebb2 080a 	subs.w	r8, r2, sl
 8007412:	eb63 090b 	sbc.w	r9, r3, fp
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007422:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007426:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800742a:	ebb2 0408 	subs.w	r4, r2, r8
 800742e:	eb63 0509 	sbc.w	r5, r3, r9
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	00eb      	lsls	r3, r5, #3
 800743c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007440:	00e2      	lsls	r2, r4, #3
 8007442:	4614      	mov	r4, r2
 8007444:	461d      	mov	r5, r3
 8007446:	eb14 030a 	adds.w	r3, r4, sl
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	eb45 030b 	adc.w	r3, r5, fp
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800745e:	4629      	mov	r1, r5
 8007460:	028b      	lsls	r3, r1, #10
 8007462:	4621      	mov	r1, r4
 8007464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007468:	4621      	mov	r1, r4
 800746a:	028a      	lsls	r2, r1, #10
 800746c:	4610      	mov	r0, r2
 800746e:	4619      	mov	r1, r3
 8007470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007472:	2200      	movs	r2, #0
 8007474:	60bb      	str	r3, [r7, #8]
 8007476:	60fa      	str	r2, [r7, #12]
 8007478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800747c:	f7f9 fa46 	bl	800090c <__aeabi_uldivmod>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4613      	mov	r3, r2
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007488:	4b0b      	ldr	r3, [pc, #44]	@ (80074b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	0c1b      	lsrs	r3, r3, #16
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	3301      	adds	r3, #1
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007498:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074a2:	e002      	b.n	80074aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074a4:	4b05      	ldr	r3, [pc, #20]	@ (80074bc <HAL_RCC_GetSysClockFreq+0x184>)
 80074a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3740      	adds	r7, #64	@ 0x40
 80074b0:	46bd      	mov	sp, r7
 80074b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074b6:	bf00      	nop
 80074b8:	40023800 	.word	0x40023800
 80074bc:	00f42400 	.word	0x00f42400
 80074c0:	017d7840 	.word	0x017d7840

080074c4 <memset>:
 80074c4:	4402      	add	r2, r0
 80074c6:	4603      	mov	r3, r0
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d100      	bne.n	80074ce <memset+0xa>
 80074cc:	4770      	bx	lr
 80074ce:	f803 1b01 	strb.w	r1, [r3], #1
 80074d2:	e7f9      	b.n	80074c8 <memset+0x4>

080074d4 <__libc_init_array>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4d0d      	ldr	r5, [pc, #52]	@ (800750c <__libc_init_array+0x38>)
 80074d8:	4c0d      	ldr	r4, [pc, #52]	@ (8007510 <__libc_init_array+0x3c>)
 80074da:	1b64      	subs	r4, r4, r5
 80074dc:	10a4      	asrs	r4, r4, #2
 80074de:	2600      	movs	r6, #0
 80074e0:	42a6      	cmp	r6, r4
 80074e2:	d109      	bne.n	80074f8 <__libc_init_array+0x24>
 80074e4:	4d0b      	ldr	r5, [pc, #44]	@ (8007514 <__libc_init_array+0x40>)
 80074e6:	4c0c      	ldr	r4, [pc, #48]	@ (8007518 <__libc_init_array+0x44>)
 80074e8:	f000 f818 	bl	800751c <_init>
 80074ec:	1b64      	subs	r4, r4, r5
 80074ee:	10a4      	asrs	r4, r4, #2
 80074f0:	2600      	movs	r6, #0
 80074f2:	42a6      	cmp	r6, r4
 80074f4:	d105      	bne.n	8007502 <__libc_init_array+0x2e>
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fc:	4798      	blx	r3
 80074fe:	3601      	adds	r6, #1
 8007500:	e7ee      	b.n	80074e0 <__libc_init_array+0xc>
 8007502:	f855 3b04 	ldr.w	r3, [r5], #4
 8007506:	4798      	blx	r3
 8007508:	3601      	adds	r6, #1
 800750a:	e7f2      	b.n	80074f2 <__libc_init_array+0x1e>
 800750c:	08007558 	.word	0x08007558
 8007510:	08007558 	.word	0x08007558
 8007514:	08007558 	.word	0x08007558
 8007518:	0800755c 	.word	0x0800755c

0800751c <_init>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	bf00      	nop
 8007520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007522:	bc08      	pop	{r3}
 8007524:	469e      	mov	lr, r3
 8007526:	4770      	bx	lr

08007528 <_fini>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	bf00      	nop
 800752c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752e:	bc08      	pop	{r3}
 8007530:	469e      	mov	lr, r3
 8007532:	4770      	bx	lr
